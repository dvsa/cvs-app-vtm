{
    "pipes": [
        {
            "name": "DefaultNullOrEmpty",
            "id": "pipe-DefaultNullOrEmpty-890bc59668cc5782f9c177cb06e882be61183026c44cd4c581077e61ab1675ac495d668f7879d4a550ca56d0f05568a7cd0e138e621001e8651e2a70240ca5d7",
            "file": "src/app/shared/pipes/default-null-or-empty/default-null-or-empty.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "titleCaseFirstWord",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "defaultNullOrEmpty",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'defaultNullOrEmpty' })\nexport class DefaultNullOrEmpty implements PipeTransform {\n  titleCaseFirstWord(value: string) {\n    return value[0].toUpperCase() + value.substr(1);\n  }\n\n  transform(value: any): any {\n    if (typeof value === 'string') {\n      return value.trim().length > 0 ? this.titleCaseFirstWord(value) : '-';\n    } else if (typeof value === 'boolean') {\n      return value ? 'Yes' : 'No';\n    } else {\n      return value == null ? '-' : value;\n    }\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Axle",
            "id": "interface-Axle-79ef79937246f5a9ea93f07f57fa24bb25b0e0e5c1441b1c82e7e24d3e52431051f3f16572f5838b005d7058533f2ac9b52626e8ed41cf02599e7a8566ddd634",
            "file": "src/app/models/vehicle-tech-record.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface VehicleTechRecordModel {\n  vrms: Vrm[];\n  vin: string;\n  trailerId?: string;\n  systemNumber: string;\n  techRecord: TechRecordModel[];\n}\n\nexport interface Vrm {\n  vrm: string;\n  isPrimary: boolean;\n}\n\nexport enum StatusCodes {\n  ARCHIVED = 'archived',\n  CURRENT = 'current',\n  PROVISIONAL = 'provisional'\n}\n\nexport enum VehicleTypes {\n  PSV = 'psv',\n  HGV = 'hgv',\n  TRL = 'trl'\n}\n\nexport enum FuelTypes {\n  DIESELPETROL = 'DieselPetrol',\n  HYBRID = 'Hybrid',\n  ELECTRIC = 'Electric',\n  CNG = 'CNG',\n  FUELCELL = 'Fuel cell',\n  LNG = 'LNG',\n  OTHER = 'Other'\n}\n\nexport enum VehicleClassDescriptions {\n  MOTORBIKE_OVER_200CC = 'motorbikes over 200cc or with a sidecar',\n  NOT_APPLICABLE = 'not applicable',\n  SMALL_PSV = 'small psv (ie: less than or equal to 22 seats)',\n  MOTORBIKE_UPTO_200CC = 'motorbikes up to 200cc',\n  TRAILER = 'trailer',\n  LARGE_PSV = 'large psv(ie: greater than 23 seats)',\n  THREE_WHEELER = '3 wheelers',\n  HGV = 'heavy goods vehicle',\n  MOT_CLASS_4 = 'MOT class 4',\n  MOT_CLASS_5 = 'MOT class 5',\n  MOT_CLASS_7 = 'MOT class 7'\n}\n\nexport enum VehicleConfigurations {\n  RIGID = 'rigid',\n  ARTICULATED = 'articulated',\n  CENTRE_AXLE_DRAWBAR = 'centre axle drawbar',\n  SEMI_CAR_TRANSPORTER = 'semi-car transporter',\n  SEMI_TRAILER = 'semi-trailer',\n  LOW_LOADER = 'low loader',\n  OTHER = 'other',\n  DRAWBAR = 'drawbar',\n  FOUR_IN_LINE = 'four-in-line',\n  DOLLY = 'dolly',\n  FULL_DRAWBAR = 'full drawbar'\n}\n\nexport enum FrameDescriptions {\n  CHANNEL_SECTION = 'Channel section',\n  SPACE_FRAME = 'Space frame',\n  I_SECTION = 'I section',\n  TUBULAR = 'Tubular',\n  FRAME_SECTION = 'Frame section',\n  OTHER = 'Other',\n  INTEGRAL = 'integral',\n  BOX_SECTION = 'Box section',\n  U_SECTION = 'U section'\n}\n\nexport enum EuVehicleCategories {\n  M1 = 'm1',\n  M2 = 'm2',\n  M3 = 'm3',\n  n1 = 'n1',\n  n2 = 'n2',\n  n3 = 'n3',\n  o1 = 'o1',\n  o2 = 'o2',\n  o3 = 'o3',\n  o4 = 'o4',\n  l1e_a = 'l1e-a',\n  l1e = 'l1e',\n  l2e = 'l2e',\n  l3e = 'l3e',\n  l4e = 'l4e',\n  l5e = 'l5e',\n  l6e = 'l6e',\n  l7e = 'l7e'\n}\n\nexport enum VehicleSizes {\n  SMALL = 'small',\n  LARGE = 'large'\n}\n\nexport interface Axle {\n  axleNumber?: number;\n  parkingBrakeMrk?: boolean;\n}\n\nexport interface TechRecordModel {\n  statusCode: StatusCodes;\n  vehicleType: VehicleTypes;\n  regnDate: string;\n  firstUseDate?: string;\n  manufactureYear: number;\n  noOfAxles: number;\n  axles: Axle[];\n  brakes: {\n    dtpNumber: string;\n  };\n  suspensionType?: string;\n  speedLimiterMrk?: boolean;\n  tachoExemptMrk?: boolean;\n  euroStandard?: string;\n  roadFriendly?: boolean;\n  fuelPropulsionSystem?: FuelTypes;\n  drawbarCouplingFitted?: boolean;\n  vehicleClass: {\n    description: string;\n  };\n  vehicleConfiguration: VehicleConfigurations;\n  couplingType?: string;\n  maxLoadOnCoupling?: number;\n  frameDescription?: FrameDescriptions;\n  offRoad?: boolean;\n  numberOfWheelsDriven?: number;\n  euVehicleCategory: EuVehicleCategories;\n  emissionsLimit?: number;\n  seatsLowerDeck?: number;\n  seatsUpperDeck?: number;\n  standingCapacity?: number;\n  vehicleSize?: VehicleSizes;\n  numberOfSeatbelts?: string;\n  seatbeltInstallationApprovalDate?: string;\n  departmentalVehicleMarker: boolean;\n}\n",
            "properties": [
                {
                    "name": "axleNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "parkingBrakeMrk",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 104
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CustomArray",
            "id": "interface-CustomArray-1b35c5b9e97b395585a0ea15e73734db7582e4f683e573d4915caa2430d8b3b797e7e7a3e37f41c1c2efac144d47838e70459955fa4a567650270131765d29f5",
            "file": "src/app/forms/services/dynamic-form.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractControl, AbstractControlOptions, AsyncValidatorFn, FormArray, FormControl, FormControlOptions, FormGroup, ValidatorFn } from '@angular/forms';\n\nexport enum FormNodeViewTypes {\n  STRING = 'string',\n  DATE = 'date',\n  DATETIME = 'dateTime',\n  TIME = 'time',\n  HIDDEN = 'hidden',\n  VEHICLETYPE = 'vehicleType',\n  SUBHEADING = 'subHeading'\n}\n\nexport enum FormNodeTypes {\n  ROOT = 'root',\n  GROUP = 'group',\n  CONTROL = 'control',\n  ARRAY = 'array',\n  SECTION = 'section',\n  COMBINATION = 'combination'\n}\n\nexport interface FormNodeOption<T> {\n  value: T;\n  label: string;\n}\n\nexport interface FormNode {\n  name: string;\n  children?: FormNode[];\n  type: FormNodeTypes; // maybe updateType?\n  viewType?: FormNodeViewTypes;\n  label?: string;\n  value?: string;\n  path?: string;\n  options?: FormNodeOption<string | number | boolean>[] | FormNodeCombinationOptions;\n  validators?: string[];\n  disabled?: boolean;\n  readonly?: boolean;\n}\n\nexport interface FormNodeCombinationOptions {\n  leftComponentName: string;\n  rightComponentName: string;\n  separator: string;\n}\n\nexport interface CustomControl extends FormControl {\n  meta: FormNode;\n}\n\nexport class CustomFormControl extends FormControl implements CustomControl {\n  meta: FormNode;\n\n  constructor(meta: FormNode, formState?: any, validatorOrOpts?: ValidatorFn | ValidatorFn[] | FormControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(formState, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomGroup extends FormGroup {\n  meta: FormNode;\n}\n\nexport class CustomFormGroup extends FormGroup implements CustomGroup {\n  meta: FormNode;\n\n  constructor(\n    meta: FormNode,\n    controls: {\n      [key: string]: AbstractControl;\n    },\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomArray extends FormArray {\n  meta: FormNode;\n}\n\nexport class CustomFormArray extends FormArray implements CustomArray {\n  meta: FormNode;\n\n  constructor(meta: FormNode, controls: AbstractControl[], validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n",
            "properties": [
                {
                    "name": "meta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormNode",
                    "optional": false,
                    "description": "",
                    "line": 81
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "FormArray"
        },
        {
            "name": "CustomControl",
            "id": "interface-CustomControl-1b35c5b9e97b395585a0ea15e73734db7582e4f683e573d4915caa2430d8b3b797e7e7a3e37f41c1c2efac144d47838e70459955fa4a567650270131765d29f5",
            "file": "src/app/forms/services/dynamic-form.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractControl, AbstractControlOptions, AsyncValidatorFn, FormArray, FormControl, FormControlOptions, FormGroup, ValidatorFn } from '@angular/forms';\n\nexport enum FormNodeViewTypes {\n  STRING = 'string',\n  DATE = 'date',\n  DATETIME = 'dateTime',\n  TIME = 'time',\n  HIDDEN = 'hidden',\n  VEHICLETYPE = 'vehicleType',\n  SUBHEADING = 'subHeading'\n}\n\nexport enum FormNodeTypes {\n  ROOT = 'root',\n  GROUP = 'group',\n  CONTROL = 'control',\n  ARRAY = 'array',\n  SECTION = 'section',\n  COMBINATION = 'combination'\n}\n\nexport interface FormNodeOption<T> {\n  value: T;\n  label: string;\n}\n\nexport interface FormNode {\n  name: string;\n  children?: FormNode[];\n  type: FormNodeTypes; // maybe updateType?\n  viewType?: FormNodeViewTypes;\n  label?: string;\n  value?: string;\n  path?: string;\n  options?: FormNodeOption<string | number | boolean>[] | FormNodeCombinationOptions;\n  validators?: string[];\n  disabled?: boolean;\n  readonly?: boolean;\n}\n\nexport interface FormNodeCombinationOptions {\n  leftComponentName: string;\n  rightComponentName: string;\n  separator: string;\n}\n\nexport interface CustomControl extends FormControl {\n  meta: FormNode;\n}\n\nexport class CustomFormControl extends FormControl implements CustomControl {\n  meta: FormNode;\n\n  constructor(meta: FormNode, formState?: any, validatorOrOpts?: ValidatorFn | ValidatorFn[] | FormControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(formState, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomGroup extends FormGroup {\n  meta: FormNode;\n}\n\nexport class CustomFormGroup extends FormGroup implements CustomGroup {\n  meta: FormNode;\n\n  constructor(\n    meta: FormNode,\n    controls: {\n      [key: string]: AbstractControl;\n    },\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomArray extends FormArray {\n  meta: FormNode;\n}\n\nexport class CustomFormArray extends FormArray implements CustomArray {\n  meta: FormNode;\n\n  constructor(meta: FormNode, controls: AbstractControl[], validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n",
            "properties": [
                {
                    "name": "meta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormNode",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "FormControl"
        },
        {
            "name": "CustomGroup",
            "id": "interface-CustomGroup-1b35c5b9e97b395585a0ea15e73734db7582e4f683e573d4915caa2430d8b3b797e7e7a3e37f41c1c2efac144d47838e70459955fa4a567650270131765d29f5",
            "file": "src/app/forms/services/dynamic-form.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractControl, AbstractControlOptions, AsyncValidatorFn, FormArray, FormControl, FormControlOptions, FormGroup, ValidatorFn } from '@angular/forms';\n\nexport enum FormNodeViewTypes {\n  STRING = 'string',\n  DATE = 'date',\n  DATETIME = 'dateTime',\n  TIME = 'time',\n  HIDDEN = 'hidden',\n  VEHICLETYPE = 'vehicleType',\n  SUBHEADING = 'subHeading'\n}\n\nexport enum FormNodeTypes {\n  ROOT = 'root',\n  GROUP = 'group',\n  CONTROL = 'control',\n  ARRAY = 'array',\n  SECTION = 'section',\n  COMBINATION = 'combination'\n}\n\nexport interface FormNodeOption<T> {\n  value: T;\n  label: string;\n}\n\nexport interface FormNode {\n  name: string;\n  children?: FormNode[];\n  type: FormNodeTypes; // maybe updateType?\n  viewType?: FormNodeViewTypes;\n  label?: string;\n  value?: string;\n  path?: string;\n  options?: FormNodeOption<string | number | boolean>[] | FormNodeCombinationOptions;\n  validators?: string[];\n  disabled?: boolean;\n  readonly?: boolean;\n}\n\nexport interface FormNodeCombinationOptions {\n  leftComponentName: string;\n  rightComponentName: string;\n  separator: string;\n}\n\nexport interface CustomControl extends FormControl {\n  meta: FormNode;\n}\n\nexport class CustomFormControl extends FormControl implements CustomControl {\n  meta: FormNode;\n\n  constructor(meta: FormNode, formState?: any, validatorOrOpts?: ValidatorFn | ValidatorFn[] | FormControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(formState, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomGroup extends FormGroup {\n  meta: FormNode;\n}\n\nexport class CustomFormGroup extends FormGroup implements CustomGroup {\n  meta: FormNode;\n\n  constructor(\n    meta: FormNode,\n    controls: {\n      [key: string]: AbstractControl;\n    },\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomArray extends FormArray {\n  meta: FormNode;\n}\n\nexport class CustomFormArray extends FormArray implements CustomArray {\n  meta: FormNode;\n\n  constructor(meta: FormNode, controls: AbstractControl[], validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n",
            "properties": [
                {
                    "name": "meta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormNode",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "FormGroup"
        },
        {
            "name": "FormNode",
            "id": "interface-FormNode-1b35c5b9e97b395585a0ea15e73734db7582e4f683e573d4915caa2430d8b3b797e7e7a3e37f41c1c2efac144d47838e70459955fa4a567650270131765d29f5",
            "file": "src/app/forms/services/dynamic-form.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractControl, AbstractControlOptions, AsyncValidatorFn, FormArray, FormControl, FormControlOptions, FormGroup, ValidatorFn } from '@angular/forms';\n\nexport enum FormNodeViewTypes {\n  STRING = 'string',\n  DATE = 'date',\n  DATETIME = 'dateTime',\n  TIME = 'time',\n  HIDDEN = 'hidden',\n  VEHICLETYPE = 'vehicleType',\n  SUBHEADING = 'subHeading'\n}\n\nexport enum FormNodeTypes {\n  ROOT = 'root',\n  GROUP = 'group',\n  CONTROL = 'control',\n  ARRAY = 'array',\n  SECTION = 'section',\n  COMBINATION = 'combination'\n}\n\nexport interface FormNodeOption<T> {\n  value: T;\n  label: string;\n}\n\nexport interface FormNode {\n  name: string;\n  children?: FormNode[];\n  type: FormNodeTypes; // maybe updateType?\n  viewType?: FormNodeViewTypes;\n  label?: string;\n  value?: string;\n  path?: string;\n  options?: FormNodeOption<string | number | boolean>[] | FormNodeCombinationOptions;\n  validators?: string[];\n  disabled?: boolean;\n  readonly?: boolean;\n}\n\nexport interface FormNodeCombinationOptions {\n  leftComponentName: string;\n  rightComponentName: string;\n  separator: string;\n}\n\nexport interface CustomControl extends FormControl {\n  meta: FormNode;\n}\n\nexport class CustomFormControl extends FormControl implements CustomControl {\n  meta: FormNode;\n\n  constructor(meta: FormNode, formState?: any, validatorOrOpts?: ValidatorFn | ValidatorFn[] | FormControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(formState, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomGroup extends FormGroup {\n  meta: FormNode;\n}\n\nexport class CustomFormGroup extends FormGroup implements CustomGroup {\n  meta: FormNode;\n\n  constructor(\n    meta: FormNode,\n    controls: {\n      [key: string]: AbstractControl;\n    },\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomArray extends FormArray {\n  meta: FormNode;\n}\n\nexport class CustomFormArray extends FormArray implements CustomArray {\n  meta: FormNode;\n\n  constructor(meta: FormNode, controls: AbstractControl[], validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormNode[]",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormNodeOption<string | number | boolean>[] | FormNodeCombinationOptions",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "readonly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormNodeTypes",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "viewType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormNodeViewTypes",
                    "optional": true,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FormNodeCombinationOptions",
            "id": "interface-FormNodeCombinationOptions-1b35c5b9e97b395585a0ea15e73734db7582e4f683e573d4915caa2430d8b3b797e7e7a3e37f41c1c2efac144d47838e70459955fa4a567650270131765d29f5",
            "file": "src/app/forms/services/dynamic-form.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractControl, AbstractControlOptions, AsyncValidatorFn, FormArray, FormControl, FormControlOptions, FormGroup, ValidatorFn } from '@angular/forms';\n\nexport enum FormNodeViewTypes {\n  STRING = 'string',\n  DATE = 'date',\n  DATETIME = 'dateTime',\n  TIME = 'time',\n  HIDDEN = 'hidden',\n  VEHICLETYPE = 'vehicleType',\n  SUBHEADING = 'subHeading'\n}\n\nexport enum FormNodeTypes {\n  ROOT = 'root',\n  GROUP = 'group',\n  CONTROL = 'control',\n  ARRAY = 'array',\n  SECTION = 'section',\n  COMBINATION = 'combination'\n}\n\nexport interface FormNodeOption<T> {\n  value: T;\n  label: string;\n}\n\nexport interface FormNode {\n  name: string;\n  children?: FormNode[];\n  type: FormNodeTypes; // maybe updateType?\n  viewType?: FormNodeViewTypes;\n  label?: string;\n  value?: string;\n  path?: string;\n  options?: FormNodeOption<string | number | boolean>[] | FormNodeCombinationOptions;\n  validators?: string[];\n  disabled?: boolean;\n  readonly?: boolean;\n}\n\nexport interface FormNodeCombinationOptions {\n  leftComponentName: string;\n  rightComponentName: string;\n  separator: string;\n}\n\nexport interface CustomControl extends FormControl {\n  meta: FormNode;\n}\n\nexport class CustomFormControl extends FormControl implements CustomControl {\n  meta: FormNode;\n\n  constructor(meta: FormNode, formState?: any, validatorOrOpts?: ValidatorFn | ValidatorFn[] | FormControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(formState, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomGroup extends FormGroup {\n  meta: FormNode;\n}\n\nexport class CustomFormGroup extends FormGroup implements CustomGroup {\n  meta: FormNode;\n\n  constructor(\n    meta: FormNode,\n    controls: {\n      [key: string]: AbstractControl;\n    },\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomArray extends FormArray {\n  meta: FormNode;\n}\n\nexport class CustomFormArray extends FormArray implements CustomArray {\n  meta: FormNode;\n\n  constructor(meta: FormNode, controls: AbstractControl[], validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n",
            "properties": [
                {
                    "name": "leftComponentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "rightComponentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "separator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FormNodeOption",
            "id": "interface-FormNodeOption-1b35c5b9e97b395585a0ea15e73734db7582e4f683e573d4915caa2430d8b3b797e7e7a3e37f41c1c2efac144d47838e70459955fa4a567650270131765d29f5",
            "file": "src/app/forms/services/dynamic-form.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractControl, AbstractControlOptions, AsyncValidatorFn, FormArray, FormControl, FormControlOptions, FormGroup, ValidatorFn } from '@angular/forms';\n\nexport enum FormNodeViewTypes {\n  STRING = 'string',\n  DATE = 'date',\n  DATETIME = 'dateTime',\n  TIME = 'time',\n  HIDDEN = 'hidden',\n  VEHICLETYPE = 'vehicleType',\n  SUBHEADING = 'subHeading'\n}\n\nexport enum FormNodeTypes {\n  ROOT = 'root',\n  GROUP = 'group',\n  CONTROL = 'control',\n  ARRAY = 'array',\n  SECTION = 'section',\n  COMBINATION = 'combination'\n}\n\nexport interface FormNodeOption<T> {\n  value: T;\n  label: string;\n}\n\nexport interface FormNode {\n  name: string;\n  children?: FormNode[];\n  type: FormNodeTypes; // maybe updateType?\n  viewType?: FormNodeViewTypes;\n  label?: string;\n  value?: string;\n  path?: string;\n  options?: FormNodeOption<string | number | boolean>[] | FormNodeCombinationOptions;\n  validators?: string[];\n  disabled?: boolean;\n  readonly?: boolean;\n}\n\nexport interface FormNodeCombinationOptions {\n  leftComponentName: string;\n  rightComponentName: string;\n  separator: string;\n}\n\nexport interface CustomControl extends FormControl {\n  meta: FormNode;\n}\n\nexport class CustomFormControl extends FormControl implements CustomControl {\n  meta: FormNode;\n\n  constructor(meta: FormNode, formState?: any, validatorOrOpts?: ValidatorFn | ValidatorFn[] | FormControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(formState, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomGroup extends FormGroup {\n  meta: FormNode;\n}\n\nexport class CustomFormGroup extends FormGroup implements CustomGroup {\n  meta: FormNode;\n\n  constructor(\n    meta: FormNode,\n    controls: {\n      [key: string]: AbstractControl;\n    },\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomArray extends FormArray {\n  meta: FormNode;\n}\n\nexport class CustomFormArray extends FormArray implements CustomArray {\n  meta: FormNode;\n\n  constructor(meta: FormNode, controls: AbstractControl[], validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GlobalError",
            "id": "interface-GlobalError-9d4d3fefb558e45b8b7120a95ece2bff8a3f898cadede4acaf7a726e16a03a18880e383720e37db03c735839797d47ac9f5ce5eb0cfc89143a742482c4a27ccd",
            "file": "src/app/features/global-error/global-error.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { State } from '@store/.';\nimport { addError, clearError } from '@store/global-error/actions/global-error.actions';\nimport { globalErrorState } from '@store/global-error/reducers/global-error-service.reducer';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalErrorService {\n  private errors: Observable<GlobalError[]>;\n\n  constructor(private store: Store<State>) {\n    this.errors = this.store.pipe(select(globalErrorState));\n  }\n\n  get errors$() {\n    return this.errors;\n  }\n\n  addError(error: GlobalError) {\n    this.store.dispatch(addError(error));\n  }\n\n  clearError(): void {\n    this.store.dispatch(clearError());\n  }\n}\n\nexport interface GlobalError {\n  error: string;\n  anchorLink?: string;\n}\n",
            "properties": [
                {
                    "name": "anchorLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GlobalErrorState",
            "id": "interface-GlobalErrorState-96f3da55c7b0d13e72170ded5e57e9e17873592b8f84c43f7a3871f62eab632872225fe05314b81ce815f1cb30b055340918e668e1d14ab9cead31b55b90ff1c",
            "file": "src/app/store/global-error/reducers/global-error-service.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector, createReducer, createSelector, on } from '@ngrx/store';\nimport * as TechnicalRecordServiceActions from '../../technical-records/technical-record-service.actions';\nimport * as TestResultActions from '@store/test-records';\nimport * as GlobalErrorActions from '../actions/global-error.actions'\nimport { GlobalError } from 'src/app/features/global-error/global-error.service';\n\nexport const STORE_GLOBAL_ERROR_KEY = 'GlobalError';\n\nexport interface GlobalErrorState {\n  globalError: Array<GlobalError>;\n}\n\nexport const initialGlobalErrorState: GlobalErrorState = {\n  globalError: []\n};\n\nexport const getGlobalErrorState = createFeatureSelector<GlobalErrorState>(STORE_GLOBAL_ERROR_KEY);\n\nexport const globalErrorState = createSelector(getGlobalErrorState, (state) => state.globalError);\n\nexport const globalErrorReducer = createReducer(\n  initialGlobalErrorState,\n  on(GlobalErrorActions.clearError, TechnicalRecordServiceActions.getByVIN, TestResultActions.fetchTestResults, TestResultActions.fetchTestResultsBySystemId, (state) => ({ ...state, globalError: [] })),\n  on(GlobalErrorActions.addError, TechnicalRecordServiceActions.getByVINFailure, TestResultActions.fetchTestResultsFailed, TestResultActions.fetchTestResultsBySystemIdFailed, (state, {error, anchorLink}) => ({...state, globalError: [...state.globalError, {error: error, anchorLink: anchorLink}]}))\n);\n",
            "properties": [
                {
                    "name": "globalError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<GlobalError>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "HttpRetryConfig",
            "id": "interface-HttpRetryConfig-b67191db99a390b9e7c5a7cb0cfb58110a0e799d5ca8fc98b15a1984bed25237f2458923da9cb14743a585669a6961f530787b6c80dc7c9d2e1195d3d3333e64",
            "file": "src/app/interceptors/delayed-retry/delayed-retry.module.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { InjectionToken, ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { DelayedRetryInterceptor } from './delayed-retry.interceptor';\n\nexport const HTTP_RETRY_CONFIG = new InjectionToken<HttpRetryConfig>('HttpRetryConfig');\n\nexport interface HttpRetryConfig {\n  /**\n   * The maximum number of times to retry.\n   */\n  count?: number;\n  /**\n   * The number of milliseconds to delay before retrying.\n   */\n  delay?: number;\n  /**\n   * Array of http status codes to retry. If undefined, all requests are retried.\n   */\n  httpStatusRetry?: Array<number>;\n  /**\n   * If true, each retry delay will be multiplied by the current retry count.\n   */\n  backoff?: boolean;\n}\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: DelayedRetryInterceptor,\n      multi: true\n    }\n  ]\n})\nexport class DelayedRetryModule {\n  constructor(@Optional() @SkipSelf() parentModule?: DelayedRetryModule) {\n    if (parentModule) {\n      throw new Error('DelayedRetryModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n  static forRoot(config?: HttpRetryConfig): ModuleWithProviders<DelayedRetryModule> {\n    return {\n      ngModule: DelayedRetryModule,\n      providers: [{ provide: HTTP_RETRY_CONFIG, useValue: config }]\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "backoff",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>If true, each retry delay will be multiplied by the current retry count.</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nIf true, each retry delay will be multiplied by the current retry count.\n"
                },
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The maximum number of times to retry.</p>\n",
                    "line": 12,
                    "rawdescription": "\n\nThe maximum number of times to retry.\n"
                },
                {
                    "name": "delay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The number of milliseconds to delay before retrying.</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nThe number of milliseconds to delay before retrying.\n"
                },
                {
                    "name": "httpStatusRetry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "<p>Array of http status codes to retry. If undefined, all requests are retried.</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nArray of http status codes to retry. If undefined, all requests are retried.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "InternalConfig",
            "id": "interface-InternalConfig-6faff5b28f54bf7b1a853aae2dbe2d6d4451fea4d4270ee8ea52600bba47e356c4f6fdf331e33b00870863d3f836bdf5051563fec69ed221ce343e180cb5d4fe",
            "file": "src/app/interceptors/delayed-retry/delayed-retry.interceptor.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { Observable, retry, timer } from 'rxjs';\nimport { HttpRetryConfig, HTTP_RETRY_CONFIG } from './delayed-retry.module';\n\ninterface InternalConfig extends Required<Pick<HttpRetryConfig, 'count' | 'delay' | 'backoff'>>, Pick<HttpRetryConfig, 'httpStatusRetry'> {}\n\n@Injectable()\nexport class DelayedRetryInterceptor implements HttpInterceptor {\n  config: InternalConfig;\n\n  private readonly defaultConfig = { count: 3, delay: 2000, backoff: false };\n\n  constructor(@Optional() @Inject(HTTP_RETRY_CONFIG) private config_: HttpRetryConfig) {\n    this.config = { ...this.defaultConfig, ...this.config_ };\n  }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      retry({\n        delay: (error: any, retryCount: number) => this.retryHandler(error, retryCount, this.config)\n      })\n    );\n  }\n\n  retryHandler(error: any, retryCount: number, config: InternalConfig) {\n    const { delay, count, httpStatusRetry, backoff } = config;\n    const { status } = error;\n\n    if (httpStatusRetry && !httpStatusRetry.includes(status)) {\n      throw error;\n    }\n\n    if (retryCount >= count) {\n      throw 'Request timed out. Check connectivity and try again.';\n    }\n\n    return timer(backoff ? delay * retryCount : delay);\n  }\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Required"
        },
        {
            "name": "ModType",
            "id": "interface-ModType-720039b2cd9b9d10eec7648416a2987a7b262d96c3f13d3f43822336b2f7cec0d9a569298431c9211a6c4cc2cb0db0f6c88707a671f0728f25a4c9d3be82fd2a",
            "file": "src/app/models/emissions.enum.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum FuelType {\n  Diesel = 'diesel',\n  GasCng = 'gas-cng',\n  GasLng = 'gas-lng',\n  GasLpg = 'gas-lpg',\n  FuelCell = 'fuel cell',\n  Petrol = 'petrol',\n  FullElectric = 'full electric'\n}\n\nexport enum EmissionStandard {\n  Euro3PM = '0.10 g/kWh Euro 3 PM',\n  EuroIVPM = '0.03 g/kWh Euro IV PM',\n  Euro3 = 'Euro 3',\n  Euro4 = 'Euro 4',\n  Euro6 = 'Euro 6',\n  EuroVI = 'Euro VI',\n  FullElectric = 'Full Electric'\n}\n\nexport enum ModTypeCode {\n  p = 'p',\n  m = 'm',\n  g = 'g'\n}\n\nexport enum ModeTypeDescription {\n  ParticulateTrap = 'particulate trap',\n  Engine = 'modification or change of engine',\n  GasEngine = 'gas engine'\n}\n\nexport interface ModType {\n  code: ModTypeCode;\n  description: ModeTypeDescription;\n}\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModTypeCode",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModeTypeDescription",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MultiOption",
            "id": "interface-MultiOption-217655f943460e5d14410535eeccecbfab5364f6821c415a5a2c7ad014cf719f09d1019c25ce058a0cb50fe35b71c224bb15205ce8fe19f4b631bd8fef0ef02d",
            "file": "src/app/models/options.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MultiOption {\n  label: string;\n  value: string;\n  hint?: string;\n}\nexport interface MultiOptions extends Array<MultiOption> {}\n",
            "properties": [
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MultiOptions",
            "id": "interface-MultiOptions-217655f943460e5d14410535eeccecbfab5364f6821c415a5a2c7ad014cf719f09d1019c25ce058a0cb50fe35b71c224bb15205ce8fe19f4b631bd8fef0ef02d",
            "file": "src/app/models/options.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MultiOption {\n  label: string;\n  value: string;\n  hint?: string;\n}\nexport interface MultiOptions extends Array<MultiOption> {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Array"
        },
        {
            "name": "Option",
            "id": "interface-Option-f776c3a837a8dd18da65f608ae3de77702b1764a6355ed02a02d30473ad86ecc6015e734c5fab562de502bcc97b8bedd2e6efd4cb97eaf528400d9cd9677afb5",
            "file": "src/app/forms/components/radio-group/radio-group.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Injector, Input, OnInit } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MultiOptions } from '@models/options.model';\nimport { BaseControlComponent } from '../base-control/base-control.component';\n\ninterface Option {\n  label: string;\n  value: string;\n}\n\n@Component({\n  selector: 'app-radio-group',\n  templateUrl: './radio-group.component.html',\n  styleUrls: ['./radio-group.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RadioGroupComponent,\n      multi: true\n    }\n  ]\n})\nexport class RadioGroupComponent extends BaseControlComponent {\n  @Input() options: MultiOptions = [];\n\n  constructor(injector: Injector) {\n    super(injector);\n  }\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SpinnerState",
            "id": "interface-SpinnerState-ba258cee24215c71f27b894b1abc39f35340db674e4bf7974fd1a4083da8b38a58dd0f501e0118ec13e5268ec534398053daef7970922e312295ef17f44992f4",
            "file": "src/app/store/spinner/reducers/spinner.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector, createReducer, createSelector, on } from '@ngrx/store';\nimport * as TechnicalRecordServiceActions from '../../technical-records/technical-record-service.actions';\nimport * as TestResultActions from '@store/test-records';\n\nexport const STORE_SPINNER_KEY = 'Spinner';\n\nexport interface SpinnerState {\n  showSpinner: boolean;\n}\n\nexport const initialSpinnerState: SpinnerState = {\n  showSpinner: false\n};\n\nexport const getSpinnerState = createFeatureSelector<SpinnerState>(STORE_SPINNER_KEY);\n\nexport const spinnerState = createSelector(getSpinnerState, (state) => state.showSpinner);\n\nexport const spinnerReducer = createReducer(\n  initialSpinnerState,\n  on(TechnicalRecordServiceActions.getByVIN, TestResultActions.fetchTestResults, TestResultActions.fetchTestResultsBySystemId, (state) => ({ ...state, showSpinner: true })),\n  on(TechnicalRecordServiceActions.getByVINFailure, TechnicalRecordServiceActions.getByVINSuccess,\n     TestResultActions.fetchTestResultsBySystemIdFailed, TestResultActions.fetchTestResultsBySystemIdSuccess,\n     TestResultActions.fetchTestResultsFailed, TestResultActions.fetchTestResultsSuccess,\n      (state) => ({ ...state, showSpinner: false })\n  ),\n);\n",
            "properties": [
                {
                    "name": "showSpinner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-d9a54684de22946624d3a85ee3aa43c35e48a016a2bc07e9b0d8842438ffdf3358a3e826d8c921ad464ed47da9f77f162e354c855205b4bcfb861aaf51ea99e2",
            "file": "src/app/store/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { environment } from '../../environments/environment';\nimport { initialState as initialTechnicalRecordsState, STORE_FEATURE_TECHNICAL_RECORDS_KEY, TechnicalRecordServiceState, vehicleTechRecordReducer } from './technical-records/technical-record-service.reducer';\nimport { initialTestResultsState, STORE_FEATURE_TEST_RESULTS_KEY, testResultsReducer, TestResultsState } from './test-records';\nimport { initialState as initialUserState, STORE_FEATURE_USER_KEY, userServiceReducer, UserServiceState } from './user/user-service.reducer';\nimport { globalErrorReducer, GlobalErrorState, initialGlobalErrorState, STORE_GLOBAL_ERROR_KEY } from '@store/global-error/reducers/global-error-service.reducer';\nimport { spinnerReducer, SpinnerState, initialSpinnerState, STORE_SPINNER_KEY } from '@store/spinner/reducers/spinner.reducer';\n\nexport interface State {\n  [STORE_FEATURE_USER_KEY]: UserServiceState;\n  [STORE_FEATURE_TECHNICAL_RECORDS_KEY]: TechnicalRecordServiceState;\n  [STORE_FEATURE_TEST_RESULTS_KEY]: TestResultsState;\n  [STORE_GLOBAL_ERROR_KEY]: GlobalErrorState;\n  [STORE_SPINNER_KEY]: SpinnerState;\n  router?: any;\n}\n\nexport const initialAppState = {\n  [STORE_FEATURE_USER_KEY]: initialUserState,\n  [STORE_FEATURE_TECHNICAL_RECORDS_KEY]: initialTechnicalRecordsState,\n  [STORE_FEATURE_TEST_RESULTS_KEY]: initialTestResultsState,\n  [STORE_GLOBAL_ERROR_KEY]: initialGlobalErrorState,\n  [STORE_SPINNER_KEY]: initialSpinnerState\n};\n\nexport const reducers: ActionReducerMap<State> = {\n  [STORE_FEATURE_USER_KEY]: userServiceReducer,\n  [STORE_FEATURE_TECHNICAL_RECORDS_KEY]: vehicleTechRecordReducer,\n  [STORE_FEATURE_TEST_RESULTS_KEY]: testResultsReducer,\n  [STORE_GLOBAL_ERROR_KEY]: globalErrorReducer,\n  [STORE_SPINNER_KEY]: spinnerReducer\n};\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n",
            "properties": [
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "STORE_FEATURE_TECHNICAL_RECORDS_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TechnicalRecordServiceState",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "STORE_FEATURE_TEST_RESULTS_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TestResultsState",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "STORE_FEATURE_USER_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserServiceState",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "STORE_GLOBAL_ERROR_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GlobalErrorState",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "STORE_SPINNER_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpinnerState",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TechnicalRecordServiceState",
            "id": "interface-TechnicalRecordServiceState-239eb859fe98a155c0c12e8eb09a51ca6452c57805e2eefe10fab22958e804f27c87faceb33f15b5b9a849d06580736ddb564d67711b8e03056c676738468465",
            "file": "src/app/store/technical-records/technical-record-service.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector, createReducer, on } from '@ngrx/store';\nimport { VehicleTechRecordModel } from 'src/app/models/vehicle-tech-record.model';\nimport { getByVIN, getByVINFailure, getByVINSuccess } from './technical-record-service.actions';\n\nexport const STORE_FEATURE_TECHNICAL_RECORDS_KEY = 'TechnicalRecords';\n\nexport interface TechnicalRecordServiceState {\n  vehicleTechRecords: Array<VehicleTechRecordModel>;\n}\n\nexport const initialState: TechnicalRecordServiceState = {\n  vehicleTechRecords: []\n};\n\nexport const getVehicleTechRecordState = createFeatureSelector<TechnicalRecordServiceState>(STORE_FEATURE_TECHNICAL_RECORDS_KEY);\n\nexport const vehicleTechRecordReducer = createReducer(\n  initialState,\n  on(getByVIN, (state) => ({ ...state, vehicleTechRecords: [] })),\n  on(getByVINSuccess, (state, { vehicleTechRecords }) => ({ ...state, vehicleTechRecords })),\n  on(getByVINFailure, (state, { error }) => ({ ...state, vehicleTechRecords: [], error }))\n);\n",
            "properties": [
                {
                    "name": "vehicleTechRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<VehicleTechRecordModel>",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TechRecordModel",
            "id": "interface-TechRecordModel-79ef79937246f5a9ea93f07f57fa24bb25b0e0e5c1441b1c82e7e24d3e52431051f3f16572f5838b005d7058533f2ac9b52626e8ed41cf02599e7a8566ddd634",
            "file": "src/app/models/vehicle-tech-record.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface VehicleTechRecordModel {\n  vrms: Vrm[];\n  vin: string;\n  trailerId?: string;\n  systemNumber: string;\n  techRecord: TechRecordModel[];\n}\n\nexport interface Vrm {\n  vrm: string;\n  isPrimary: boolean;\n}\n\nexport enum StatusCodes {\n  ARCHIVED = 'archived',\n  CURRENT = 'current',\n  PROVISIONAL = 'provisional'\n}\n\nexport enum VehicleTypes {\n  PSV = 'psv',\n  HGV = 'hgv',\n  TRL = 'trl'\n}\n\nexport enum FuelTypes {\n  DIESELPETROL = 'DieselPetrol',\n  HYBRID = 'Hybrid',\n  ELECTRIC = 'Electric',\n  CNG = 'CNG',\n  FUELCELL = 'Fuel cell',\n  LNG = 'LNG',\n  OTHER = 'Other'\n}\n\nexport enum VehicleClassDescriptions {\n  MOTORBIKE_OVER_200CC = 'motorbikes over 200cc or with a sidecar',\n  NOT_APPLICABLE = 'not applicable',\n  SMALL_PSV = 'small psv (ie: less than or equal to 22 seats)',\n  MOTORBIKE_UPTO_200CC = 'motorbikes up to 200cc',\n  TRAILER = 'trailer',\n  LARGE_PSV = 'large psv(ie: greater than 23 seats)',\n  THREE_WHEELER = '3 wheelers',\n  HGV = 'heavy goods vehicle',\n  MOT_CLASS_4 = 'MOT class 4',\n  MOT_CLASS_5 = 'MOT class 5',\n  MOT_CLASS_7 = 'MOT class 7'\n}\n\nexport enum VehicleConfigurations {\n  RIGID = 'rigid',\n  ARTICULATED = 'articulated',\n  CENTRE_AXLE_DRAWBAR = 'centre axle drawbar',\n  SEMI_CAR_TRANSPORTER = 'semi-car transporter',\n  SEMI_TRAILER = 'semi-trailer',\n  LOW_LOADER = 'low loader',\n  OTHER = 'other',\n  DRAWBAR = 'drawbar',\n  FOUR_IN_LINE = 'four-in-line',\n  DOLLY = 'dolly',\n  FULL_DRAWBAR = 'full drawbar'\n}\n\nexport enum FrameDescriptions {\n  CHANNEL_SECTION = 'Channel section',\n  SPACE_FRAME = 'Space frame',\n  I_SECTION = 'I section',\n  TUBULAR = 'Tubular',\n  FRAME_SECTION = 'Frame section',\n  OTHER = 'Other',\n  INTEGRAL = 'integral',\n  BOX_SECTION = 'Box section',\n  U_SECTION = 'U section'\n}\n\nexport enum EuVehicleCategories {\n  M1 = 'm1',\n  M2 = 'm2',\n  M3 = 'm3',\n  n1 = 'n1',\n  n2 = 'n2',\n  n3 = 'n3',\n  o1 = 'o1',\n  o2 = 'o2',\n  o3 = 'o3',\n  o4 = 'o4',\n  l1e_a = 'l1e-a',\n  l1e = 'l1e',\n  l2e = 'l2e',\n  l3e = 'l3e',\n  l4e = 'l4e',\n  l5e = 'l5e',\n  l6e = 'l6e',\n  l7e = 'l7e'\n}\n\nexport enum VehicleSizes {\n  SMALL = 'small',\n  LARGE = 'large'\n}\n\nexport interface Axle {\n  axleNumber?: number;\n  parkingBrakeMrk?: boolean;\n}\n\nexport interface TechRecordModel {\n  statusCode: StatusCodes;\n  vehicleType: VehicleTypes;\n  regnDate: string;\n  firstUseDate?: string;\n  manufactureYear: number;\n  noOfAxles: number;\n  axles: Axle[];\n  brakes: {\n    dtpNumber: string;\n  };\n  suspensionType?: string;\n  speedLimiterMrk?: boolean;\n  tachoExemptMrk?: boolean;\n  euroStandard?: string;\n  roadFriendly?: boolean;\n  fuelPropulsionSystem?: FuelTypes;\n  drawbarCouplingFitted?: boolean;\n  vehicleClass: {\n    description: string;\n  };\n  vehicleConfiguration: VehicleConfigurations;\n  couplingType?: string;\n  maxLoadOnCoupling?: number;\n  frameDescription?: FrameDescriptions;\n  offRoad?: boolean;\n  numberOfWheelsDriven?: number;\n  euVehicleCategory: EuVehicleCategories;\n  emissionsLimit?: number;\n  seatsLowerDeck?: number;\n  seatsUpperDeck?: number;\n  standingCapacity?: number;\n  vehicleSize?: VehicleSizes;\n  numberOfSeatbelts?: string;\n  seatbeltInstallationApprovalDate?: string;\n  departmentalVehicleMarker: boolean;\n}\n",
            "properties": [
                {
                    "name": "axles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Axle[]",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "brakes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "couplingType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "departmentalVehicleMarker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "drawbarCouplingFitted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "emissionsLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "euroStandard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "euVehicleCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EuVehicleCategories",
                    "optional": false,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "firstUseDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "frameDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FrameDescriptions",
                    "optional": true,
                    "description": "",
                    "line": 131
                },
                {
                    "name": "fuelPropulsionSystem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FuelTypes",
                    "optional": true,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "manufactureYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "maxLoadOnCoupling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "noOfAxles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "numberOfSeatbelts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "numberOfWheelsDriven",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "offRoad",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "regnDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "roadFriendly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "seatbeltInstallationApprovalDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 141
                },
                {
                    "name": "seatsLowerDeck",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 136
                },
                {
                    "name": "seatsUpperDeck",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "speedLimiterMrk",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "standingCapacity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 138
                },
                {
                    "name": "statusCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatusCodes",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "suspensionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "tachoExemptMrk",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "vehicleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "vehicleConfiguration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VehicleConfigurations",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "vehicleSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VehicleSizes",
                    "optional": true,
                    "description": "",
                    "line": 139
                },
                {
                    "name": "vehicleType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VehicleTypes",
                    "optional": false,
                    "description": "",
                    "line": 109
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TestResultModel",
            "id": "interface-TestResultModel-706cff16fb755cdfb2ad5e3078f25459f17189d8f7a22f3c269b57a11962fe5300fee10be9d4c3ace0350bb6dd31017c246acab1377a06341623e53d09aeb514",
            "file": "src/app/models/test-result.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CountryOfRegistration } from './country-of-registration.enum';\nimport { EuVehicleCategory } from './eu-vehicle-category.enum';\nimport { OdometerReadingUnits } from './odometer-unit.enum';\nimport { TestType } from './test-type.model';\n\nexport interface TestResultModel {\n  testResultId: string;\n\n  systemNumber: string;\n  vin: string;\n  vrm?: string; // Mandatory for PSV and HGV, not applicable to TRL\n\n  createdAt?: string;\n  testStartTimestamp: string | Date;\n\n  testTypes: TestType[];\n\n  trailerId: string;\n  countryOfRegistration: CountryOfRegistration;\n  euVehicleCategory: EuVehicleCategory;\n  odometerReading: number;\n  odometerReadingUnits: OdometerReadingUnits;\n  preparerName: string;\n  preparerId: string;\n\n  reasonForCreation?: string;\n}\n",
            "properties": [
                {
                    "name": "countryOfRegistration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CountryOfRegistration",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "euVehicleCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EuVehicleCategory",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "odometerReading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "odometerReadingUnits",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OdometerReadingUnits",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "preparerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "preparerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "reasonForCreation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "systemNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "testResultId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "testStartTimestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | Date",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "testTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TestType[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "trailerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "vin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "vrm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TestResultsState",
            "id": "interface-TestResultsState-c7580a60bb05051dd9af867d27f4f8ca896cb85558051340eae5a50b69e318f8b083146e5c771f6422c74306219a6ae2c5742d9ebf463066b391fc31d49fb3af",
            "file": "src/app/store/test-records/reducers/test-records.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TestResultModel } from '@models/test-result.model';\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\nimport { createFeatureSelector, createReducer, on } from '@ngrx/store';\nimport { fetchTestResultsBySystemIdFailed, fetchTestResultsBySystemIdSuccess, fetchTestResultsSuccess } from '../actions/test-records.actions';\n\nexport const STORE_FEATURE_TEST_RESULTS_KEY = 'testRecords';\n\nexport interface TestResultsState extends EntityState<TestResultModel> {\n  error: string;\n}\n\nconst selectTestResultId = (a: TestResultModel): string => {\n  return a.testResultId;\n};\n\nexport const testResultAdapter: EntityAdapter<TestResultModel> = createEntityAdapter<TestResultModel>({ selectId: selectTestResultId });\n\nexport const initialTestResultsState = testResultAdapter.getInitialState({ error: '' });\n\nexport const testResultsReducer = createReducer(\n  initialTestResultsState,\n  on(fetchTestResultsSuccess, (state, action) => testResultAdapter.setAll(action.payload, state)),\n  on(fetchTestResultsBySystemIdSuccess, (state, action) => testResultAdapter.setAll(action.payload, state)),\n  on(fetchTestResultsBySystemIdFailed, (state, { error }) => ({ ...testResultAdapter.setAll([], state), error }))\n);\n\nexport const testResultsFeatureState = createFeatureSelector<TestResultsState>(STORE_FEATURE_TEST_RESULTS_KEY);\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "TestType",
            "id": "interface-TestType-f5f6aa2504b826f5775a68b89d74ff16c62c04719b96ebc7c2d73deefa1d64ddb55e8b95dc77a9ad01a726ccaa29b6d559f6c5fc3bfd465a657767f46dafec7a",
            "file": "src/app/models/test-type.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Emissions from './emissions.enum';\n\nexport interface TestType {\n  testNumber: string;\n\n  testCode: string;\n  testTypeName: string;\n\n  testTypeStartTimestamp: string | Date;\n  testTypeEndTimestamp: string | Date;\n  testExpiryDate: string | Date;\n\n  certificateNumber: string;\n  reasonForAbandoning: string;\n  additionalCommentsForAbandon?: string;\n  testAnniversaryDate: string | Date;\n  prohibitionIssued: boolean;\n\n  testResult: string;\n\n  emissionStandard: Emissions.EmissionStandard;\n  smokeTestKLimitApplied: string;\n  fuelType: Emissions.FuelType;\n  modType: Emissions.ModType;\n  modificationTypeUsed: string;\n  particulateTrapFitted: string;\n  particulateTrapSerialNumber: string;\n}\n",
            "properties": [
                {
                    "name": "additionalCommentsForAbandon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "certificateNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "emissionStandard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emissions.EmissionStandard",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fuelType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emissions.FuelType",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "modificationTypeUsed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "modType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emissions.ModType",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "particulateTrapFitted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "particulateTrapSerialNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "prohibitionIssued",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "reasonForAbandoning",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "smokeTestKLimitApplied",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "testAnniversaryDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | Date",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "testCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "testExpiryDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | Date",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "testNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "testResult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "testTypeEndTimestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | Date",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "testTypeName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "testTypeStartTimestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | Date",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UserServiceState",
            "id": "interface-UserServiceState-d7cf6c622dbdf0f6b7ebdb59b242cdaa9d0cf06f1753e725878a8dc9df7d980e6c72a1078bf6c19399ae9bb51f16e1ca0c1746f40a9ea74fde5175c87f2d51d9",
            "file": "src/app/store/user/user-service.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector, createReducer, createSelector, on } from '@ngrx/store';\nimport * as UserServiceActions from './user-service.actions';\n\nexport const STORE_FEATURE_USER_KEY = 'user';\n\nexport interface UserServiceState {\n  username: string;\n}\n\nexport const initialState: UserServiceState = {\n  username: '(Not logged in)'\n};\n\nconst getUserState = createFeatureSelector<UserServiceState>(STORE_FEATURE_USER_KEY);\n\nexport const username = createSelector(getUserState, (state) => state.username);\n\nexport const userServiceReducer = createReducer(\n  initialState,\n  on(UserServiceActions.Login, (state, { name }) => ({ username: name })),\n  on(UserServiceActions.Logout, (state) => initialState)\n);\n",
            "properties": [
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "VehicleTechRecordModel",
            "id": "interface-VehicleTechRecordModel-79ef79937246f5a9ea93f07f57fa24bb25b0e0e5c1441b1c82e7e24d3e52431051f3f16572f5838b005d7058533f2ac9b52626e8ed41cf02599e7a8566ddd634",
            "file": "src/app/models/vehicle-tech-record.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface VehicleTechRecordModel {\n  vrms: Vrm[];\n  vin: string;\n  trailerId?: string;\n  systemNumber: string;\n  techRecord: TechRecordModel[];\n}\n\nexport interface Vrm {\n  vrm: string;\n  isPrimary: boolean;\n}\n\nexport enum StatusCodes {\n  ARCHIVED = 'archived',\n  CURRENT = 'current',\n  PROVISIONAL = 'provisional'\n}\n\nexport enum VehicleTypes {\n  PSV = 'psv',\n  HGV = 'hgv',\n  TRL = 'trl'\n}\n\nexport enum FuelTypes {\n  DIESELPETROL = 'DieselPetrol',\n  HYBRID = 'Hybrid',\n  ELECTRIC = 'Electric',\n  CNG = 'CNG',\n  FUELCELL = 'Fuel cell',\n  LNG = 'LNG',\n  OTHER = 'Other'\n}\n\nexport enum VehicleClassDescriptions {\n  MOTORBIKE_OVER_200CC = 'motorbikes over 200cc or with a sidecar',\n  NOT_APPLICABLE = 'not applicable',\n  SMALL_PSV = 'small psv (ie: less than or equal to 22 seats)',\n  MOTORBIKE_UPTO_200CC = 'motorbikes up to 200cc',\n  TRAILER = 'trailer',\n  LARGE_PSV = 'large psv(ie: greater than 23 seats)',\n  THREE_WHEELER = '3 wheelers',\n  HGV = 'heavy goods vehicle',\n  MOT_CLASS_4 = 'MOT class 4',\n  MOT_CLASS_5 = 'MOT class 5',\n  MOT_CLASS_7 = 'MOT class 7'\n}\n\nexport enum VehicleConfigurations {\n  RIGID = 'rigid',\n  ARTICULATED = 'articulated',\n  CENTRE_AXLE_DRAWBAR = 'centre axle drawbar',\n  SEMI_CAR_TRANSPORTER = 'semi-car transporter',\n  SEMI_TRAILER = 'semi-trailer',\n  LOW_LOADER = 'low loader',\n  OTHER = 'other',\n  DRAWBAR = 'drawbar',\n  FOUR_IN_LINE = 'four-in-line',\n  DOLLY = 'dolly',\n  FULL_DRAWBAR = 'full drawbar'\n}\n\nexport enum FrameDescriptions {\n  CHANNEL_SECTION = 'Channel section',\n  SPACE_FRAME = 'Space frame',\n  I_SECTION = 'I section',\n  TUBULAR = 'Tubular',\n  FRAME_SECTION = 'Frame section',\n  OTHER = 'Other',\n  INTEGRAL = 'integral',\n  BOX_SECTION = 'Box section',\n  U_SECTION = 'U section'\n}\n\nexport enum EuVehicleCategories {\n  M1 = 'm1',\n  M2 = 'm2',\n  M3 = 'm3',\n  n1 = 'n1',\n  n2 = 'n2',\n  n3 = 'n3',\n  o1 = 'o1',\n  o2 = 'o2',\n  o3 = 'o3',\n  o4 = 'o4',\n  l1e_a = 'l1e-a',\n  l1e = 'l1e',\n  l2e = 'l2e',\n  l3e = 'l3e',\n  l4e = 'l4e',\n  l5e = 'l5e',\n  l6e = 'l6e',\n  l7e = 'l7e'\n}\n\nexport enum VehicleSizes {\n  SMALL = 'small',\n  LARGE = 'large'\n}\n\nexport interface Axle {\n  axleNumber?: number;\n  parkingBrakeMrk?: boolean;\n}\n\nexport interface TechRecordModel {\n  statusCode: StatusCodes;\n  vehicleType: VehicleTypes;\n  regnDate: string;\n  firstUseDate?: string;\n  manufactureYear: number;\n  noOfAxles: number;\n  axles: Axle[];\n  brakes: {\n    dtpNumber: string;\n  };\n  suspensionType?: string;\n  speedLimiterMrk?: boolean;\n  tachoExemptMrk?: boolean;\n  euroStandard?: string;\n  roadFriendly?: boolean;\n  fuelPropulsionSystem?: FuelTypes;\n  drawbarCouplingFitted?: boolean;\n  vehicleClass: {\n    description: string;\n  };\n  vehicleConfiguration: VehicleConfigurations;\n  couplingType?: string;\n  maxLoadOnCoupling?: number;\n  frameDescription?: FrameDescriptions;\n  offRoad?: boolean;\n  numberOfWheelsDriven?: number;\n  euVehicleCategory: EuVehicleCategories;\n  emissionsLimit?: number;\n  seatsLowerDeck?: number;\n  seatsUpperDeck?: number;\n  standingCapacity?: number;\n  vehicleSize?: VehicleSizes;\n  numberOfSeatbelts?: string;\n  seatbeltInstallationApprovalDate?: string;\n  departmentalVehicleMarker: boolean;\n}\n",
            "properties": [
                {
                    "name": "systemNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "techRecord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TechRecordModel[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "trailerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "vin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "vrms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Vrm[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Vrm",
            "id": "interface-Vrm-79ef79937246f5a9ea93f07f57fa24bb25b0e0e5c1441b1c82e7e24d3e52431051f3f16572f5838b005d7058533f2ac9b52626e8ed41cf02599e7a8566ddd634",
            "file": "src/app/models/vehicle-tech-record.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface VehicleTechRecordModel {\n  vrms: Vrm[];\n  vin: string;\n  trailerId?: string;\n  systemNumber: string;\n  techRecord: TechRecordModel[];\n}\n\nexport interface Vrm {\n  vrm: string;\n  isPrimary: boolean;\n}\n\nexport enum StatusCodes {\n  ARCHIVED = 'archived',\n  CURRENT = 'current',\n  PROVISIONAL = 'provisional'\n}\n\nexport enum VehicleTypes {\n  PSV = 'psv',\n  HGV = 'hgv',\n  TRL = 'trl'\n}\n\nexport enum FuelTypes {\n  DIESELPETROL = 'DieselPetrol',\n  HYBRID = 'Hybrid',\n  ELECTRIC = 'Electric',\n  CNG = 'CNG',\n  FUELCELL = 'Fuel cell',\n  LNG = 'LNG',\n  OTHER = 'Other'\n}\n\nexport enum VehicleClassDescriptions {\n  MOTORBIKE_OVER_200CC = 'motorbikes over 200cc or with a sidecar',\n  NOT_APPLICABLE = 'not applicable',\n  SMALL_PSV = 'small psv (ie: less than or equal to 22 seats)',\n  MOTORBIKE_UPTO_200CC = 'motorbikes up to 200cc',\n  TRAILER = 'trailer',\n  LARGE_PSV = 'large psv(ie: greater than 23 seats)',\n  THREE_WHEELER = '3 wheelers',\n  HGV = 'heavy goods vehicle',\n  MOT_CLASS_4 = 'MOT class 4',\n  MOT_CLASS_5 = 'MOT class 5',\n  MOT_CLASS_7 = 'MOT class 7'\n}\n\nexport enum VehicleConfigurations {\n  RIGID = 'rigid',\n  ARTICULATED = 'articulated',\n  CENTRE_AXLE_DRAWBAR = 'centre axle drawbar',\n  SEMI_CAR_TRANSPORTER = 'semi-car transporter',\n  SEMI_TRAILER = 'semi-trailer',\n  LOW_LOADER = 'low loader',\n  OTHER = 'other',\n  DRAWBAR = 'drawbar',\n  FOUR_IN_LINE = 'four-in-line',\n  DOLLY = 'dolly',\n  FULL_DRAWBAR = 'full drawbar'\n}\n\nexport enum FrameDescriptions {\n  CHANNEL_SECTION = 'Channel section',\n  SPACE_FRAME = 'Space frame',\n  I_SECTION = 'I section',\n  TUBULAR = 'Tubular',\n  FRAME_SECTION = 'Frame section',\n  OTHER = 'Other',\n  INTEGRAL = 'integral',\n  BOX_SECTION = 'Box section',\n  U_SECTION = 'U section'\n}\n\nexport enum EuVehicleCategories {\n  M1 = 'm1',\n  M2 = 'm2',\n  M3 = 'm3',\n  n1 = 'n1',\n  n2 = 'n2',\n  n3 = 'n3',\n  o1 = 'o1',\n  o2 = 'o2',\n  o3 = 'o3',\n  o4 = 'o4',\n  l1e_a = 'l1e-a',\n  l1e = 'l1e',\n  l2e = 'l2e',\n  l3e = 'l3e',\n  l4e = 'l4e',\n  l5e = 'l5e',\n  l6e = 'l6e',\n  l7e = 'l7e'\n}\n\nexport enum VehicleSizes {\n  SMALL = 'small',\n  LARGE = 'large'\n}\n\nexport interface Axle {\n  axleNumber?: number;\n  parkingBrakeMrk?: boolean;\n}\n\nexport interface TechRecordModel {\n  statusCode: StatusCodes;\n  vehicleType: VehicleTypes;\n  regnDate: string;\n  firstUseDate?: string;\n  manufactureYear: number;\n  noOfAxles: number;\n  axles: Axle[];\n  brakes: {\n    dtpNumber: string;\n  };\n  suspensionType?: string;\n  speedLimiterMrk?: boolean;\n  tachoExemptMrk?: boolean;\n  euroStandard?: string;\n  roadFriendly?: boolean;\n  fuelPropulsionSystem?: FuelTypes;\n  drawbarCouplingFitted?: boolean;\n  vehicleClass: {\n    description: string;\n  };\n  vehicleConfiguration: VehicleConfigurations;\n  couplingType?: string;\n  maxLoadOnCoupling?: number;\n  frameDescription?: FrameDescriptions;\n  offRoad?: boolean;\n  numberOfWheelsDriven?: number;\n  euVehicleCategory: EuVehicleCategories;\n  emissionsLimit?: number;\n  seatsLowerDeck?: number;\n  seatsUpperDeck?: number;\n  standingCapacity?: number;\n  vehicleSize?: VehicleSizes;\n  numberOfSeatbelts?: string;\n  seatbeltInstallationApprovalDate?: string;\n  departmentalVehicleMarker: boolean;\n}\n",
            "properties": [
                {
                    "name": "isPrimary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "vrm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "DynamicFormService",
            "id": "injectable-DynamicFormService-e02faa7bb82cb6c7953344bbca6e8762a9d0285926fa012fa733fab6176eef64da97efa1d21c037b24f5528ba1cc82558f861dfa565824a79a1a2b6114f0bcd4",
            "file": "src/app/forms/services/dynamic-form.service.ts",
            "properties": [
                {
                    "name": "validatorMap",
                    "defaultValue": "{\n    required: Validators.required\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "control",
                            "type": "CustomFormGroup | CustomFormArray | CustomFormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "validators",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "CustomFormGroup | CustomFormArray | CustomFormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "validators",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createControls",
                    "args": [
                        {
                            "name": "child",
                            "type": "FormNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "d",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "child",
                            "type": "FormNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "d",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createForm",
                    "args": [
                        {
                            "name": "f",
                            "type": "FormNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "d",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "CustomFormGroup | CustomFormArray",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f",
                            "type": "FormNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "d",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormArray, FormGroup, ValidatorFn, Validators } from '@angular/forms';\nimport { FormNode, CustomFormGroup, CustomFormControl, CustomFormArray, FormNodeTypes } from './dynamic-form.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DynamicFormService {\n  constructor() {}\n\n  validatorMap: { [key: string]: ValidatorFn } = {\n    required: Validators.required\n  };\n\n  createForm(f: FormNode, d: any = {}): CustomFormGroup | CustomFormArray {\n    if (!f) {\n      return new CustomFormGroup(f, {});\n    }\n\n    const { type } = f;\n    let form: CustomFormGroup | CustomFormArray = FormNodeTypes.ARRAY === type ? new CustomFormArray(f, []) : new CustomFormGroup(f, {});\n\n    f?.children?.forEach((child) => {\n      const { name, type, value, validators, disabled } = child;\n      let control;\n      if (FormNodeTypes.CONTROL !== type) {\n        control = this.createForm(child, d[name]);\n      } else {\n        control = new CustomFormControl({ ...child }, { value, disabled: !!disabled });\n      }\n\n      if (validators && validators.length > 0) {\n        this.addValidators(control, validators);\n      }\n\n      if (form instanceof FormGroup) {\n        form.addControl(name, control);\n      } else if (form instanceof FormArray) {\n        this.createControls(child, d).forEach((control) => {\n          (form as FormArray).push(control);\n        });\n      }\n    });\n\n    return form;\n  }\n\n  createControls(child: FormNode, d: any) {\n    const controls: any[] = [];\n    if (d.length && d.length > 0) {\n      d.forEach(() => {\n        if (FormNodeTypes.CONTROL !== child.type) {\n          controls.push(this.createForm(child, d[child.name]));\n        } else {\n          controls.push(new CustomFormControl({ ...child }, { value: child.value, disabled: !!child.disabled }));\n        }\n      });\n    } else {\n      controls.push(new CustomFormControl({ ...child }, { value: child.value, disabled: !!child.disabled }));\n    }\n    return controls;\n  }\n\n  addValidators(control: CustomFormGroup | CustomFormArray | CustomFormControl, validators: Array<string> = []) {\n    validators.forEach((v: string) => {\n      control.addValidators(this.validatorMap[v]);\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "GlobalErrorService",
            "id": "injectable-GlobalErrorService-9d4d3fefb558e45b8b7120a95ece2bff8a3f898cadede4acaf7a726e16a03a18880e383720e37db03c735839797d47ac9f5ce5eb0cfc89143a742482c4a27ccd",
            "file": "src/app/features/global-error/global-error.service.ts",
            "properties": [
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<GlobalError[]>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addError",
                    "args": [
                        {
                            "name": "error",
                            "type": "GlobalError",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "GlobalError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { State } from '@store/.';\nimport { addError, clearError } from '@store/global-error/actions/global-error.actions';\nimport { globalErrorState } from '@store/global-error/reducers/global-error-service.reducer';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalErrorService {\n  private errors: Observable<GlobalError[]>;\n\n  constructor(private store: Store<State>) {\n    this.errors = this.store.pipe(select(globalErrorState));\n  }\n\n  get errors$() {\n    return this.errors;\n  }\n\n  addError(error: GlobalError) {\n    this.store.dispatch(addError(error));\n  }\n\n  clearError(): void {\n    this.store.dispatch(clearError());\n  }\n}\n\nexport interface GlobalError {\n  error: string;\n  anchorLink?: string;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "errors$": {
                    "name": "errors$",
                    "getSignature": {
                        "name": "errors$",
                        "type": "",
                        "returnType": "",
                        "line": 18
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "SpinnerService",
            "id": "injectable-SpinnerService-19fcea2d775443b8bbfe936a3b927b6cdce5ab9679876b256ed61b9adec897345eeb57d8a45314799330dd2be58d7d68477622fea94ce22c857aafa34dbbb72f",
            "file": "src/app/layout/spinner/spinner.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { State } from '@store/.';\nimport { spinnerState, SpinnerState } from '@store/spinner/reducers/spinner.reducer';\nimport { Subject, combineLatest, map, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpinnerService {\n\n  constructor(private store: Store) {\n  }\n\n  get showSpinner$(): Observable<boolean> {\n    return this.store.pipe(select(spinnerState));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "showSpinner$": {
                    "name": "showSpinner$",
                    "getSignature": {
                        "name": "showSpinner$",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 15
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "TechnicalRecordService",
            "id": "injectable-TechnicalRecordService-7fcd3a24f461818827f15783e1c3bfa65cb77d4213110354cd22a5f1a8f5219ed3f4dd5afe461cd0d44eddccc678d8e645f8b5ee436fb321165fadc4a677e254",
            "file": "src/app/services/technical-record/technical-record.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getByVIN",
                    "args": [
                        {
                            "name": "vin",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<VehicleTechRecordModel[]>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "vin",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchBy",
                    "args": [
                        {
                            "name": "criteria",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "criteria",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { VehicleTechRecordModel } from '@models/vehicle-tech-record.model';\nimport { select, Store } from '@ngrx/store';\nimport { getByVIN, vehicleTechRecords } from '@store/technical-records';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({ providedIn: 'root' })\nexport class TechnicalRecordService {\n  constructor(private store: Store, private http: HttpClient) {}\n\n  getByVIN(vin: string): Observable<VehicleTechRecordModel[]> {\n    const queryStr = `${vin}/tech-records?status=all&metadata=true&searchCriteria=vin`;\n    const url = `${environment.VTM_API_URI}/vehicles/${queryStr}`;\n\n    return this.http.get<VehicleTechRecordModel[]>(url, { responseType: 'json' });\n  }\n\n  get vehicleTechRecords$() {\n    return this.store.pipe(select(vehicleTechRecords));\n  }\n\n  searchBy(criteria: { type: 'vin'; searchTerm: string }) {\n    const { type, searchTerm } = criteria;\n    this.store.dispatch(getByVIN({ [type]: searchTerm }));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "vehicleTechRecords$": {
                    "name": "vehicleTechRecords$",
                    "getSignature": {
                        "name": "vehicleTechRecords$",
                        "type": "",
                        "returnType": "",
                        "line": 20
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "TechnicalRecordServiceEffects",
            "id": "injectable-TechnicalRecordServiceEffects-4f58e2c60515d2c7350a01a9feec489bfcc3edddabb1a46645ddb98027bf228749fc65cf928daee98515121b2208c3beabb553bc8aed7fd6a5e61d363be88f68",
            "file": "src/app/store/technical-records/technical-record-service.effects.ts",
            "properties": [
                {
                    "name": "getByVin$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(getByVIN),\n      mergeMap((action) =>\n        this.technicalRecordService.getByVIN(action.vin).pipe(\n          map((vehicleTechRecords) => getByVINSuccess({ vehicleTechRecords })),\n          catchError((error) => {\n            let message = error;\n\n            if (typeof error === 'object') {\n              switch (error.status) {\n                case 404:\n                  message = 'Vehicle not found, check the vehicle registration mark, trailer ID or vehicle identification number';\n                  break;\n                default:\n                  message = 'There was a problem getting the Tech Record by VIN';\n              }\n            }\n\n            return of(getByVINFailure({ error: message, anchorLink: 'search-term' }));\n          })\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { TechnicalRecordService } from '@services/technical-record/technical-record.service';\nimport { of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { getByVIN, getByVINFailure, getByVINSuccess } from './technical-record-service.actions';\n\n@Injectable()\nexport class TechnicalRecordServiceEffects {\n  getByVin$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(getByVIN),\n      mergeMap((action) =>\n        this.technicalRecordService.getByVIN(action.vin).pipe(\n          map((vehicleTechRecords) => getByVINSuccess({ vehicleTechRecords })),\n          catchError((error) => {\n            let message = error;\n\n            if (typeof error === 'object') {\n              switch (error.status) {\n                case 404:\n                  message = 'Vehicle not found, check the vehicle registration mark, trailer ID or vehicle identification number';\n                  break;\n                default:\n                  message = 'There was a problem getting the Tech Record by VIN';\n              }\n            }\n\n            return of(getByVINFailure({ error: message, anchorLink: 'search-term' }));\n          })\n        )\n      )\n    )\n  );\n\n  constructor(private actions$: Actions, private technicalRecordService: TechnicalRecordService) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "technicalRecordService",
                        "type": "TechnicalRecordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "technicalRecordService",
                        "type": "TechnicalRecordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TestRecordsService",
            "id": "injectable-TestRecordsService-2256e17581f72d87079255a1d7791a581700d347a401ac110eceae915edeb36b21d0630ea353e1861af29609acc8090afb788733cf6ed9323d86eebf557d4b90",
            "file": "src/app/services/test-records/test-records.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fetchTestResultbySystemId",
                    "args": [
                        {
                            "name": "systemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "queryparams",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<TestResultModel>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "queryparams",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadTestResultBySystemId",
                    "args": [
                        {
                            "name": "systemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadTestResults",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { TestResultModel } from '@models/test-result.model';\nimport { select, Store } from '@ngrx/store';\nimport { fetchTestResults, fetchTestResultsBySystemId, selectAllTestResults, selectedTestResultState, TestResultsState } from '@store/test-records';\nimport { Observable, throwError } from 'rxjs';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TestRecordsService {\n  constructor(private http: HttpClient, private store: Store<TestResultsState>) {}\n\n  fetchTestResultbySystemId(systemId: string, queryparams?: { testResultId?: string }): Observable<Array<TestResultModel>> {\n    if (!systemId) {\n      return throwError(() => new Error('systemId is required'));\n    }\n\n    let params = {};\n    if (queryparams && Object.keys(queryparams).length > 0) {\n      params = new HttpParams({ fromObject: queryparams });\n    }\n\n    const url = `${environment.VTM_API_URI}/test-results/${systemId}`;\n\n    return this.http.get<Array<TestResultModel>>(url, { params });\n  }\n\n  loadTestResults(): void {\n    this.store.dispatch(fetchTestResults());\n  }\n\n  loadTestResultBySystemId(systemId: string): void {\n    this.store.dispatch(fetchTestResultsBySystemId({ systemId }));\n  }\n\n  get testResult$() {\n    return this.store.pipe(select(selectedTestResultState));\n  }\n\n  get testRecords$() {\n    return this.store.pipe(select(selectAllTestResults));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<TestResultsState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<TestResultsState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "testResult$": {
                    "name": "testResult$",
                    "getSignature": {
                        "name": "testResult$",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                },
                "testRecords$": {
                    "name": "testRecords$",
                    "getSignature": {
                        "name": "testRecords$",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "TestResultsEffects",
            "id": "injectable-TestResultsEffects-36deb5aa884ed745825a79d6ffadef4a53bbad871d5754fd5c949b5b965f71669708df1918dabb40bd6d7af8fa237ce909f4663b9ad7acfd7e87b99b727577da",
            "file": "src/app/store/test-records/effects/test-records.effects.ts",
            "properties": [
                {
                    "name": "fetchTestResultsBySystemNumber$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(fetchTestResultsBySystemId),\n      mergeMap(({ systemId }) =>\n        this.testRecordsService.fetchTestResultbySystemId(systemId).pipe(\n          map((testResults) => fetchTestResultsBySystemIdSuccess({ payload: testResults })),\n          catchError((e) => of(fetchTestResultsBySystemIdFailed({ error: e.message })))\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "fetchTestResultsBySystemNumberAfterSearchByVinSucces$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(getByVINSuccess),\n      mergeMap((action) =>\n        this.testRecordsService.fetchTestResultbySystemId(action.vehicleTechRecords[0].systemNumber).pipe(\n          map((vehicleTestRecords) => fetchTestResultsBySystemIdSuccess({ payload: vehicleTestRecords })),\n          catchError((e) => {\n            if (e.status != 404) {\n              return of(fetchTestResultsBySystemIdFailed({ error: e.message }))\n            } else {\n              return of(fetchTestResultsBySystemIdSuccess({payload: []}))\n            }\n          })\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { TestRecordsService } from '@services/test-records/test-records.service';\nimport { getByVINSuccess } from '@store/technical-records';\nimport { catchError, map, mergeMap, of } from 'rxjs';\nimport { fetchTestResultsBySystemId, fetchTestResultsBySystemIdFailed, fetchTestResultsBySystemIdSuccess } from '../actions/test-records.actions';\n\n@Injectable()\nexport class TestResultsEffects {\n  fetchTestResultsBySystemNumber$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(fetchTestResultsBySystemId),\n      mergeMap(({ systemId }) =>\n        this.testRecordsService.fetchTestResultbySystemId(systemId).pipe(\n          map((testResults) => fetchTestResultsBySystemIdSuccess({ payload: testResults })),\n          catchError((e) => of(fetchTestResultsBySystemIdFailed({ error: e.message })))\n        )\n      )\n    )\n  );\n\n  fetchTestResultsBySystemNumberAfterSearchByVinSucces$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(getByVINSuccess),\n      mergeMap((action) =>\n        this.testRecordsService.fetchTestResultbySystemId(action.vehicleTechRecords[0].systemNumber).pipe(\n          map((vehicleTestRecords) => fetchTestResultsBySystemIdSuccess({ payload: vehicleTestRecords })),\n          catchError((e) => {\n            if (e.status != 404) {\n              return of(fetchTestResultsBySystemIdFailed({ error: e.message }))\n            } else {\n              return of(fetchTestResultsBySystemIdSuccess({payload: []}))\n            }\n          })\n        )\n      )\n    )\n  );\n\n  constructor(private actions$: Actions, private testRecordsService: TestRecordsService) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "testRecordsService",
                        "type": "TestRecordsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "testRecordsService",
                        "type": "TestRecordsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-7ce1c35a31753be87a69840193910cd9835810ee19f527e7581dc7a18fa86b34bdab6e9910a134e048e1aaca3d78fdc7ea712f8712f4519d92ee40daaf6bbe01",
            "file": "src/app/services/user-service/user-service.ts",
            "properties": [
                {
                    "name": "_destroying$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "logIn",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\nimport { MsalBroadcastService, MsalService } from '@azure/msal-angular';\nimport { EventMessage, EventType } from '@azure/msal-browser';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport * as UserServiceActions from '../../store/user/user-service.actions';\nimport * as UserServiceState from '../../store/user/user-service.reducer';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService implements OnDestroy {\n  private readonly _destroying$ = new Subject<void>();\n\n  constructor(private store: Store, private msalBroadcastService: MsalBroadcastService, private msal: MsalService) {\n    this.msalBroadcastService.msalSubject$\n      .pipe(\n        filter((msg: EventMessage) => msg.eventType === EventType.LOGIN_SUCCESS),\n        takeUntil(this._destroying$)\n      )\n      .subscribe((result: any) => {\n        this.logIn(result.payload.account.name);\n      });\n  }\n\n  ngOnDestroy(): void {\n    this._destroying$.next();\n    this._destroying$.complete();\n  }\n\n  logIn(name: string): void {\n    this.store.dispatch(UserServiceActions.Login({ name: name }));\n  }\n\n  get userName$(): Observable<string> {\n    return this.store.pipe(select(UserServiceState.username));\n  }\n\n  logOut(): void {\n    this.store.dispatch(UserServiceActions.Logout());\n    this.msal.logout();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "msalBroadcastService",
                        "type": "MsalBroadcastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "msal",
                        "type": "MsalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "msalBroadcastService",
                        "type": "MsalBroadcastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "msal",
                        "type": "MsalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userName$": {
                    "name": "userName$",
                    "getSignature": {
                        "name": "userName$",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 34
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "TitleResolver",
            "id": "injectable-TitleResolver-997625cf84be4b8f6f32e187ccf58257049de48ccf7d648ce8b995e02dc32334a2faac28c86a3f32fa77c01a7c614cde74d57c3ba9f87efb143b9f7b9dd6e0d0",
            "file": "src/app/resolvers/title/title.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { Resolve } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { State } from '@store/.';\nimport { selectRouteData } from '@store/router/selectors/router.selectors';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TitleResolver implements Resolve<boolean> {\n  constructor(private titleService: Title, private store: Store<State>) {}\n  resolve(): Promise<boolean> {\n    return new Promise(async (resolve, reject) => {\n      this.store.pipe(select(selectRouteData)).subscribe((navigationData) => {\n        const { title } = navigationData;\n        if (title) {\n          this.titleService.setTitle(`Vehicle Testing Management - ${title}`);\n        }\n      });\n\n      resolve(true);\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "DelayedRetryInterceptor",
            "id": "injectable-DelayedRetryInterceptor-6faff5b28f54bf7b1a853aae2dbe2d6d4451fea4d4270ee8ea52600bba47e356c4f6fdf331e33b00870863d3f836bdf5051563fec69ed221ce343e180cb5d4fe",
            "file": "src/app/interceptors/delayed-retry/delayed-retry.interceptor.ts",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InternalConfig",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "defaultConfig",
                    "defaultValue": "{ count: 3, delay: 2000, backoff: false }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retryHandler",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "retryCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "InternalConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "retryCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "InternalConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { Observable, retry, timer } from 'rxjs';\nimport { HttpRetryConfig, HTTP_RETRY_CONFIG } from './delayed-retry.module';\n\ninterface InternalConfig extends Required<Pick<HttpRetryConfig, 'count' | 'delay' | 'backoff'>>, Pick<HttpRetryConfig, 'httpStatusRetry'> {}\n\n@Injectable()\nexport class DelayedRetryInterceptor implements HttpInterceptor {\n  config: InternalConfig;\n\n  private readonly defaultConfig = { count: 3, delay: 2000, backoff: false };\n\n  constructor(@Optional() @Inject(HTTP_RETRY_CONFIG) private config_: HttpRetryConfig) {\n    this.config = { ...this.defaultConfig, ...this.config_ };\n  }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      retry({\n        delay: (error: any, retryCount: number) => this.retryHandler(error, retryCount, this.config)\n      })\n    );\n  }\n\n  retryHandler(error: any, retryCount: number, config: InternalConfig) {\n    const { delay, count, httpStatusRetry, backoff } = config;\n    const { status } = error;\n\n    if (httpStatusRetry && !httpStatusRetry.includes(status)) {\n      throw error;\n    }\n\n    if (retryCount >= count) {\n      throw 'Request timed out. Check connectivity and try again.';\n    }\n\n    return timer(backoff ? delay * retryCount : delay);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config_",
                        "type": "HttpRetryConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "config_",
                        "type": "HttpRetryConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "CustomFormArray",
            "id": "class-CustomFormArray-1b35c5b9e97b395585a0ea15e73734db7582e4f683e573d4915caa2430d8b3b797e7e7a3e37f41c1c2efac144d47838e70459955fa4a567650270131765d29f5",
            "file": "src/app/forms/services/dynamic-form.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AbstractControl, AbstractControlOptions, AsyncValidatorFn, FormArray, FormControl, FormControlOptions, FormGroup, ValidatorFn } from '@angular/forms';\n\nexport enum FormNodeViewTypes {\n  STRING = 'string',\n  DATE = 'date',\n  DATETIME = 'dateTime',\n  TIME = 'time',\n  HIDDEN = 'hidden',\n  VEHICLETYPE = 'vehicleType',\n  SUBHEADING = 'subHeading'\n}\n\nexport enum FormNodeTypes {\n  ROOT = 'root',\n  GROUP = 'group',\n  CONTROL = 'control',\n  ARRAY = 'array',\n  SECTION = 'section',\n  COMBINATION = 'combination'\n}\n\nexport interface FormNodeOption<T> {\n  value: T;\n  label: string;\n}\n\nexport interface FormNode {\n  name: string;\n  children?: FormNode[];\n  type: FormNodeTypes; // maybe updateType?\n  viewType?: FormNodeViewTypes;\n  label?: string;\n  value?: string;\n  path?: string;\n  options?: FormNodeOption<string | number | boolean>[] | FormNodeCombinationOptions;\n  validators?: string[];\n  disabled?: boolean;\n  readonly?: boolean;\n}\n\nexport interface FormNodeCombinationOptions {\n  leftComponentName: string;\n  rightComponentName: string;\n  separator: string;\n}\n\nexport interface CustomControl extends FormControl {\n  meta: FormNode;\n}\n\nexport class CustomFormControl extends FormControl implements CustomControl {\n  meta: FormNode;\n\n  constructor(meta: FormNode, formState?: any, validatorOrOpts?: ValidatorFn | ValidatorFn[] | FormControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(formState, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomGroup extends FormGroup {\n  meta: FormNode;\n}\n\nexport class CustomFormGroup extends FormGroup implements CustomGroup {\n  meta: FormNode;\n\n  constructor(\n    meta: FormNode,\n    controls: {\n      [key: string]: AbstractControl;\n    },\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomArray extends FormArray {\n  meta: FormNode;\n}\n\nexport class CustomFormArray extends FormArray implements CustomArray {\n  meta: FormNode;\n\n  constructor(meta: FormNode, controls: AbstractControl[], validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "meta",
                        "type": "FormNode",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "controls",
                        "type": "AbstractControl[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validatorOrOpts",
                        "type": "ValidatorFn | ValidatorFn[] | AbstractControlOptions | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "asyncValidator",
                        "type": "AsyncValidatorFn | AsyncValidatorFn[] | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 85,
                "jsdoctags": [
                    {
                        "name": "meta",
                        "type": "FormNode",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "controls",
                        "type": "AbstractControl[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validatorOrOpts",
                        "type": "ValidatorFn | ValidatorFn[] | AbstractControlOptions | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "asyncValidator",
                        "type": "AsyncValidatorFn | AsyncValidatorFn[] | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "meta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormNode",
                    "optional": false,
                    "description": "",
                    "line": 85
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FormArray",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "CustomArray"
            ]
        },
        {
            "name": "CustomFormControl",
            "id": "class-CustomFormControl-1b35c5b9e97b395585a0ea15e73734db7582e4f683e573d4915caa2430d8b3b797e7e7a3e37f41c1c2efac144d47838e70459955fa4a567650270131765d29f5",
            "file": "src/app/forms/services/dynamic-form.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AbstractControl, AbstractControlOptions, AsyncValidatorFn, FormArray, FormControl, FormControlOptions, FormGroup, ValidatorFn } from '@angular/forms';\n\nexport enum FormNodeViewTypes {\n  STRING = 'string',\n  DATE = 'date',\n  DATETIME = 'dateTime',\n  TIME = 'time',\n  HIDDEN = 'hidden',\n  VEHICLETYPE = 'vehicleType',\n  SUBHEADING = 'subHeading'\n}\n\nexport enum FormNodeTypes {\n  ROOT = 'root',\n  GROUP = 'group',\n  CONTROL = 'control',\n  ARRAY = 'array',\n  SECTION = 'section',\n  COMBINATION = 'combination'\n}\n\nexport interface FormNodeOption<T> {\n  value: T;\n  label: string;\n}\n\nexport interface FormNode {\n  name: string;\n  children?: FormNode[];\n  type: FormNodeTypes; // maybe updateType?\n  viewType?: FormNodeViewTypes;\n  label?: string;\n  value?: string;\n  path?: string;\n  options?: FormNodeOption<string | number | boolean>[] | FormNodeCombinationOptions;\n  validators?: string[];\n  disabled?: boolean;\n  readonly?: boolean;\n}\n\nexport interface FormNodeCombinationOptions {\n  leftComponentName: string;\n  rightComponentName: string;\n  separator: string;\n}\n\nexport interface CustomControl extends FormControl {\n  meta: FormNode;\n}\n\nexport class CustomFormControl extends FormControl implements CustomControl {\n  meta: FormNode;\n\n  constructor(meta: FormNode, formState?: any, validatorOrOpts?: ValidatorFn | ValidatorFn[] | FormControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(formState, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomGroup extends FormGroup {\n  meta: FormNode;\n}\n\nexport class CustomFormGroup extends FormGroup implements CustomGroup {\n  meta: FormNode;\n\n  constructor(\n    meta: FormNode,\n    controls: {\n      [key: string]: AbstractControl;\n    },\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomArray extends FormArray {\n  meta: FormNode;\n}\n\nexport class CustomFormArray extends FormArray implements CustomArray {\n  meta: FormNode;\n\n  constructor(meta: FormNode, controls: AbstractControl[], validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "meta",
                        "type": "FormNode",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formState",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "validatorOrOpts",
                        "type": "ValidatorFn | ValidatorFn[] | FormControlOptions | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "asyncValidator",
                        "type": "AsyncValidatorFn | AsyncValidatorFn[] | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "meta",
                        "type": "FormNode",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formState",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validatorOrOpts",
                        "type": "ValidatorFn | ValidatorFn[] | FormControlOptions | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "asyncValidator",
                        "type": "AsyncValidatorFn | AsyncValidatorFn[] | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "meta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormNode",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FormControl",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "CustomControl"
            ]
        },
        {
            "name": "CustomFormGroup",
            "id": "class-CustomFormGroup-1b35c5b9e97b395585a0ea15e73734db7582e4f683e573d4915caa2430d8b3b797e7e7a3e37f41c1c2efac144d47838e70459955fa4a567650270131765d29f5",
            "file": "src/app/forms/services/dynamic-form.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AbstractControl, AbstractControlOptions, AsyncValidatorFn, FormArray, FormControl, FormControlOptions, FormGroup, ValidatorFn } from '@angular/forms';\n\nexport enum FormNodeViewTypes {\n  STRING = 'string',\n  DATE = 'date',\n  DATETIME = 'dateTime',\n  TIME = 'time',\n  HIDDEN = 'hidden',\n  VEHICLETYPE = 'vehicleType',\n  SUBHEADING = 'subHeading'\n}\n\nexport enum FormNodeTypes {\n  ROOT = 'root',\n  GROUP = 'group',\n  CONTROL = 'control',\n  ARRAY = 'array',\n  SECTION = 'section',\n  COMBINATION = 'combination'\n}\n\nexport interface FormNodeOption<T> {\n  value: T;\n  label: string;\n}\n\nexport interface FormNode {\n  name: string;\n  children?: FormNode[];\n  type: FormNodeTypes; // maybe updateType?\n  viewType?: FormNodeViewTypes;\n  label?: string;\n  value?: string;\n  path?: string;\n  options?: FormNodeOption<string | number | boolean>[] | FormNodeCombinationOptions;\n  validators?: string[];\n  disabled?: boolean;\n  readonly?: boolean;\n}\n\nexport interface FormNodeCombinationOptions {\n  leftComponentName: string;\n  rightComponentName: string;\n  separator: string;\n}\n\nexport interface CustomControl extends FormControl {\n  meta: FormNode;\n}\n\nexport class CustomFormControl extends FormControl implements CustomControl {\n  meta: FormNode;\n\n  constructor(meta: FormNode, formState?: any, validatorOrOpts?: ValidatorFn | ValidatorFn[] | FormControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(formState, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomGroup extends FormGroup {\n  meta: FormNode;\n}\n\nexport class CustomFormGroup extends FormGroup implements CustomGroup {\n  meta: FormNode;\n\n  constructor(\n    meta: FormNode,\n    controls: {\n      [key: string]: AbstractControl;\n    },\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n\nexport interface CustomArray extends FormArray {\n  meta: FormNode;\n}\n\nexport class CustomFormArray extends FormArray implements CustomArray {\n  meta: FormNode;\n\n  constructor(meta: FormNode, controls: AbstractControl[], validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.meta = meta;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "meta",
                        "type": "FormNode",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "controls",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validatorOrOpts",
                        "type": "ValidatorFn | ValidatorFn[] | AbstractControlOptions | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "asyncValidator",
                        "type": "AsyncValidatorFn | AsyncValidatorFn[] | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "meta",
                        "type": "FormNode",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "controls",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validatorOrOpts",
                        "type": "ValidatorFn | ValidatorFn[] | AbstractControlOptions | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "asyncValidator",
                        "type": "AsyncValidatorFn | AsyncValidatorFn[] | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "meta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormNode",
                    "optional": false,
                    "description": "",
                    "line": 65
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FormGroup",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "CustomGroup"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-e2335d8a909f404c56ec83955a00d912c207ce7324ebfc331a882d6963dbb8b7389d53b9e41596917b76b4e78c92e5a47ef6462f675ce0c14799b71ba057b1b2",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "userService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserService",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { UserService } from '@services/user-service/user-service';\nimport { initAll } from 'govuk-frontend/govuk/all';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  constructor(public userService: UserService) {}\n\n  ngOnInit() {\n    initAll();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-header [username]=\"userService.userName$ | async\" (logOutEvent)=\"userService.logOut()\"></app-header>\n\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\">\n    <app-global-error></app-global-error>\n    <app-spinner></app-spinner>\n    <router-outlet></router-outlet>\n  </main>\n</div>\n\n<app-footer></app-footer>\n"
        },
        {
            "name": "BaseControlComponent",
            "id": "component-BaseControlComponent-76cd127db1e20cbb2bc07b396cc2827dcc7242b66ac88879002eeddd06ad98aeae073b2faba724d1c2a320f7edc64e15ddc27e204c5d65ebdf1243f85f2a1aff",
            "file": "src/app/forms/components/base-control/base-control.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-base-control",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "viewType",
                    "defaultValue": "FormNodeViewTypes.STRING",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "FormNodeViewTypes",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CustomControl",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "focused",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value_",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterContentInit, Component, DoCheck, Injector, Input } from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { FormNodeViewTypes, CustomControl } from '../../services/dynamic-form.types';\nimport { ErrorMessageMap } from '../../utils/error-message-map';\n\n@Component({\n  selector: 'app-base-control',\n  template: ``,\n  styles: []\n})\nexport class BaseControlComponent implements ControlValueAccessor, AfterContentInit, DoCheck {\n  @Input() label?: string;\n  @Input() name: string = '';\n  @Input() viewType: FormNodeViewTypes = FormNodeViewTypes.STRING;\n  @Input() hint?: string;\n\n  public onChange = (event: any) => {};\n  public onTouched = () => {};\n  public focused = false;\n  public errorMessage?: string;\n  public control?: CustomControl;\n\n  private value_: any;\n\n  constructor(private injector: Injector) {}\n\n  ngAfterContentInit(): void {\n    const ngControl: NgControl | null = this.injector.get(NgControl, null);\n    if (ngControl) {\n      this.control = ngControl.control as CustomControl;\n    } else {\n      throw new Error(`No control binding for ${this.name}`);\n    }\n  }\n\n  ngDoCheck(): void {\n    this.getError();\n  }\n\n  private getError() {\n    if (this.control && this.control.touched && this.control.invalid) {\n      const { errors } = this.control;\n      if (errors) {\n        const errorList = Object.keys(errors);\n        const firstError = ErrorMessageMap[errorList[0]];\n        this.errorMessage = firstError(errors[errorList[0]], this.label);\n      }\n    }\n  }\n\n  get value() {\n    return this.value_;\n  }\n\n  set value(value) {\n    this.value_ = value;\n  }\n\n  get disabled() {\n    return this.control?.disabled;\n  }\n\n  get meta() {\n    return this.control?.meta;\n  }\n\n  public handleEvent(event: Event) {\n    switch (event.type) {\n      case 'focus':\n        this.focused = true;\n        break;\n      case 'blur':\n        this.focused = false;\n        break;\n      default:\n        console.log('unhandled:', event);\n    }\n  }\n\n  writeValue(obj: any): void {\n    this.value_ = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "AfterContentInit",
                "DoCheck"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 55,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 51
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 59
                    }
                },
                "meta": {
                    "name": "meta",
                    "getSignature": {
                        "name": "meta",
                        "type": "",
                        "returnType": "",
                        "line": 63
                    }
                }
            }
        },
        {
            "name": "DynamicFormGroupComponent",
            "id": "component-DynamicFormGroupComponent-ab7a2e837ac0cb259efa3dd26707b88798ce2330160a70de7836995ada9c545ec625b1502bf483c949572f63f732250ed19c46aa9d217adae8e793e14d2ef677",
            "file": "src/app/forms/components/dynamic-form-group/dynamic-form-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form-group",
            "styleUrls": [
                "./dynamic-form-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-form-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "isReadonly",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "FormNode",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new CustomFormGroup({ name: 'dynamic-form', type: FormNodeTypes.GROUP, children: [] }, {})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CustomFormGroup | CustomFormArray",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "entriesOf",
                    "args": [
                        {
                            "name": "obj",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type[]",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { DynamicFormService } from '../../services/dynamic-form.service';\nimport { CustomFormArray, CustomFormGroup, FormNode, FormNodeTypes, FormNodeViewTypes } from '../../services/dynamic-form.types';\n\n@Component({\n  selector: 'app-dynamic-form-group',\n  templateUrl: './dynamic-form-group.component.html',\n  styleUrls: ['./dynamic-form-group.component.scss']\n})\nexport class DynamicFormGroupComponent implements OnInit {\n  @Input() data: any = {};\n  @Input() template!: FormNode;\n  @Input() isReadonly = true;\n\n  form: CustomFormGroup | CustomFormArray = new CustomFormGroup({ name: 'dynamic-form', type: FormNodeTypes.GROUP, children: [] }, {});\n\n  constructor(private dfs: DynamicFormService) {}\n\n  ngOnInit(): void {\n    this.form = this.dfs.createForm(this.template, this.data);\n    this.form.patchValue(this.data);\n  }\n\n  entriesOf(obj: FormGroup): { key: string; value: any }[] {\n    return Object.entries(obj).map(([key, value]) => ({\n      key,\n      value\n    }));\n  }\n\n  trackByFn(index: number) {\n    return index;\n  }\n\n  get formNodeTypes(): typeof FormNodeTypes {\n    return FormNodeTypes;\n  }\n\n  get formNodeViewTypes(): typeof FormNodeViewTypes{\n    return FormNodeViewTypes;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@media (min-width: 40.0625em) {\n  .govuk-summary-list {\n    margin-bottom: 0;\n  }\n\n  .govuk-summary-list + div > h2 {\n    margin-top: 30px;\n  }\n}\n",
                    "styleUrl": "./dynamic-form-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dfs",
                        "type": "DynamicFormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "dfs",
                        "type": "DynamicFormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "formNodeTypes": {
                    "name": "formNodeTypes",
                    "getSignature": {
                        "name": "formNodeTypes",
                        "type": "",
                        "returnType": "",
                        "line": 36
                    }
                },
                "formNodeViewTypes": {
                    "name": "formNodeViewTypes",
                    "getSignature": {
                        "name": "formNodeViewTypes",
                        "type": "",
                        "returnType": "",
                        "line": 40
                    }
                }
            },
            "templateData": "<div id=\"{{ 'test-' + form.meta?.name || 'test-dynamic-form' }}\">\n  <ng-template [ngTemplateOutlet]=\"templateHeading\"></ng-template>\n  <ng-template [ngTemplateOutlet]=\"nodeTemplateRef\" [ngTemplateOutletContext]=\"{ form: form }\"> </ng-template>\n</div>\n\n<ng-template #templateHeading>\n  <ng-container [ngSwitch]=\"form.meta?.viewType\">\n    <ng-container *ngSwitchCase=\"formNodeViewTypes.SUBHEADING\">\n      <h2 class=\"govuk-heading-m\">{{ form.meta?.label }}</h2>\n    </ng-container>\n    <ng-container *ngSwitchCaseDefault>\n      <h1 class=\"govuk-heading-xl title\">{{ form.meta?.label }}</h1>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #nodeTemplateRef let-form=\"form\">\n  <ng-container *ngFor=\"let control of entriesOf(form.controls); let i = index; trackBy: trackByFn\">\n    <ng-container [ngSwitch]=\"control.value.meta.type\">\n      <ng-container *ngSwitchCase=\"formNodeTypes.CONTROL\">\n        <ng-template [ngTemplateOutlet]=\"controlTemplate\" [ngTemplateOutletContext]=\"{ control: control, formGroup: form }\"></ng-template>\n      </ng-container>\n\n      <ng-container *ngSwitchCase=\"formNodeTypes.GROUP\">\n        <ng-template [ngTemplateOutlet]=\"childNode\" [ngTemplateOutletContext]=\"{ form: form.controls[control.key] }\"></ng-template>\n      </ng-container>\n\n      <ng-container *ngSwitchCase=\"formNodeTypes.ARRAY\">\n        <ng-template [ngTemplateOutlet]=\"nodeTemplateRef\" [ngTemplateOutletContext]=\"{ form: form.controls[control.key] }\"></ng-template>\n      </ng-container>\n\n      <ng-container *ngSwitchCase=\"formNodeTypes.SECTION\">\n        <ng-template [ngTemplateOutlet]=\"sectionTemplate\" [ngTemplateOutletContext]=\"{ control: control }\"></ng-template>\n      </ng-container>\n\n      <ng-container *ngSwitchCase=\"formNodeTypes.COMBINATION\">\n        <ng-template [ngTemplateOutlet]=\"combinationTemplate\" [ngTemplateOutletContext]=\"{ control: control, formGroup: form }\"></ng-template>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #controlTemplate let-control=\"control\" let-formGroup=\"formGroup\">\n  <ng-container [formGroup]=\"formGroup\">\n    <ng-container *ngIf=\"control.value.meta\" [ngSwitch]=\"isReadonly\">\n      <app-view-list-item *ngSwitchCase=\"true\" [label]=\"control.value.meta.label\" [name]=\"control.value.meta.name\" [viewType]=\"control.value.meta.viewType\" [formControlName]=\"control.key\" class=\"govuk-summary-list\"></app-view-list-item>\n      <app-text-input *ngSwitchCase=\"false\" [label]=\"control.value.meta.label\" [name]=\"control.value.meta.name\" [viewType]=\"control.value.meta.viewType\" [formControlName]=\"control.key\"></app-text-input>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #childNode let-form=\"form\">\n  <div class=\"node\">\n    <div class=\"node__children\">\n      <ng-template [ngTemplateOutlet]=\"nodeTemplateRef\" [ngTemplateOutletContext]=\"{ form: form }\"> </ng-template>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #sectionTemplate let-control=\"control\">\n  <div>\n    <h2 class=\"govuk-heading-m\">{{ control.value.meta.label }}</h2>\n  </div>\n</ng-template>\n\n<ng-template #combinationTemplate let-control=\"control\" let-formGroup=\"formGroup\">\n  <div *ngIf=\"control.value.meta\">\n    <app-view-combination [formNode]=\"control.value.meta\" [formGroup]=\"formGroup\" class=\"govuk-summary-list\"></app-view-combination>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-2f4d276c5236c2337da6d83e0fb289c7a91cf59313f752d83fcc1896efc574e4ee2393c647a9a8815f7f55858b973afa7b2da04a56ecaeb55344da3d63e1967c",
            "file": "src/app/layout/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<footer class=\"govuk-footer\" role=\"contentinfo\">\n  <div class=\"govuk-width-container\">\n    <div class=\"govuk-footer__meta\">\n      <div class=\"govuk-footer__meta-item govuk-footer__meta-item--grow\">\n        <h2 class=\"govuk-visually-hidden\">Support links</h2>\n        <ul class=\"govuk-footer__inline-list\">\n          <li class=\"govuk-footer__inline-list-item\">\n            <a class=\"govuk-footer__link\" href=\"https://dvsaintranet.dft.gov.uk/task/protective-monitoring-of-dvsa-it/\"> Privacy notice </a>\n          </li>\n        </ul>\n\n        <svg aria-hidden=\"true\" focusable=\"false\" class=\"govuk-footer__licence-logo\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 483.2 195.7\" height=\"17\" width=\"41\">\n          <path fill=\"currentColor\" d=\"M421.5 142.8V.1l-50.7 32.3v161.1h112.4v-50.7zm-122.3-9.6A47.12 47.12 0 0 1 221 97.8c0-26 21.1-47.1 47.1-47.1 16.7 0 31.4 8.7 39.7 21.8l42.7-27.2A97.63 97.63 0 0 0 268.1 0c-36.5 0-68.3 20.1-85.1 49.7A98 98 0 0 0 97.8 0C43.9 0 0 43.9 0 97.8s43.9 97.8 97.8 97.8c36.5 0 68.3-20.1 85.1-49.7a97.76 97.76 0 0 0 149.6 25.4l19.4 22.2h3v-87.8h-80l24.3 27.5zM97.8 145c-26 0-47.1-21.1-47.1-47.1s21.1-47.1 47.1-47.1 47.2 21 47.2 47S123.8 145 97.8 145\" />\n        </svg>\n        <span class=\"govuk-footer__licence-description\">\n          All content is available under the\n          <a class=\"govuk-footer__link\" href=\"https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/\" rel=\"license\">Open Government Licence v3.0</a>, except where otherwise stated\n        </span>\n      </div>\n      <div class=\"govuk-footer__meta-item\">\n        <a class=\"govuk-footer__link govuk-footer__copyright-logo\" href=\"https://www.nationalarchives.gov.uk/information-management/re-using-public-sector-information/uk-government-licensing-framework/crown-copyright/\">© Crown copyright</a>\n      </div>\n    </div>\n  </div>\n</footer>\n"
        },
        {
            "name": "GlobalErrorComponent",
            "id": "component-GlobalErrorComponent-2038aaefcd0f6b134e2f2ccba7623b4349e29d3dfa74028cba7eeee05886edea4e870981a2808cb4019e695812fd493f900a35bc18647de0ecb85bf3b66a8b3b",
            "file": "src/app/features/global-error/global-error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-global-error",
            "styleUrls": [
                "./global-error.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./global-error.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "globalErrorService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GlobalErrorService",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "goto",
                    "args": [
                        {
                            "name": "error",
                            "type": "GlobalError",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "GlobalError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { GlobalError, GlobalErrorService } from './global-error.service';\n\n@Component({\n  selector: 'app-global-error',\n  templateUrl: './global-error.component.html',\n  styleUrls: ['./global-error.component.scss']\n})\nexport class GlobalErrorComponent {\n  constructor(public globalErrorService: GlobalErrorService) {}\n\n  goto(error: GlobalError) {\n    if (error.anchorLink) {\n      const el = document.getElementById(error.anchorLink);\n      el && el.focus({ preventScroll: false });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./global-error.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "globalErrorService",
                        "type": "GlobalErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "globalErrorService",
                        "type": "GlobalErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"globalErrorService.errors$ | async as errorMessages\">\n  <div *ngIf=\"errorMessages && errorMessages.length > 0\" class=\"govuk-error-summary\" aria-labelledby=\"error-summary-title\" role=\"alert\" data-module=\"govuk-error-summary\">\n    <h2 class=\"govuk-error-summary__title\" id=\"error-summary-title\">There is a problem</h2>\n    <div class=\"govuk-error-summary__body\">\n      <ul class=\"govuk-list govuk-error-summary__list\">\n        <li *ngFor=\"let error of errorMessages\">\n          <a [routerLink]=\"\" queryParamsHandling=\"preserve\" [fragment]=\"error.anchorLink\" (click)=\"goto(error)\">{{ error.error }}</a>\n        </li>\n      </ul>\n    </div>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-d55463500cb53de85133ebffbed77412c787afe4869833fc752261c2506c5ac361fdf5f415c35a07cc83f82bbddd9380e6911ba23a72a2f43fca18b54c7cc1e7",
            "file": "src/app/layout/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "username",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "logOutEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent {\n  @Output() logOutEvent = new EventEmitter<void>();\n  @Input() username: string | null = '';\n\n  logout() {\n    this.logOutEvent.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#sign-out {\n  margin-left: 1rem;\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<a href=\"#main-content\" class=\"govuk-skip-link\" data-module=\"govuk-skip-link\">Skip to main content</a>\n\n<header class=\"govuk-header\" role=\"banner\" data-module=\"govuk-header\">\n  <div class=\"govuk-header__container govuk-width-container\">\n    <div class=\"govuk-grid-row govuk-!-margin-bottom-2\">\n      <div class=\"govuk-grid-column-one-half\">\n        <a href=\"/\" class=\"govuk-header__link govuk-header__link--homepage\">Vehicle testing management</a>\n      </div>\n      <div class=\"govuk-grid-column-one-half govuk-!-text-align-right govuk-!-font-size-19\">\n        <span id=\"username\">{{ username }}</span>\n        <a id=\"sign-out\" class=\"govuk-link govuk-link--inverse govuk-!-font-weight-bold\" href=\"#\" (click)=\"logout()\">Sign out</a>\n      </div>\n    </div>\n  </div>\n</header>\n"
        },
        {
            "name": "HomeButtonComponent",
            "id": "component-HomeButtonComponent-b6b1044165a66d2736dbcbe5f9ddae53030f76825a94a210f12dcdc930a1d01f58941a50a7159f6ecc389cf8a5c31795ae850ebec1c29f02655baf847a6b6bcf",
            "file": "src/app/features/home/components/home-button/home-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home-button",
            "styleUrls": [
                "./home-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "linkText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "url",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-home-button',\n  templateUrl: './home-button.component.html',\n  styleUrls: ['./home-button.component.scss']\n})\nexport class HomeButtonComponent {\n  @Input() url: string = '';\n  @Input() linkText: string = '';\n  @Input() description: string = '';\n\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'node_modules/govuk-frontend/govuk/all';\n\n.home-button {\n  background: govuk-colour('light-grey');\n  margin: 0 0 10px 18px;\n  width: 364px !important;\n  border-color: $govuk-link-colour !important;\n  border-bottom: solid;\n  min-height: 180px;\n  padding-top: 0.5rem;\n}\n",
                    "styleUrl": "./home-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "templateData": "<div class=\"govuk-grid-column-one-third home-button\">\n  <h2 class=\"govuk-heading-m\">\n    <a class=\"govuk-link\" data-module=\"govuk-button\" [routerLink]=\"[url]\">{{ linkText }}</a>\n  </h2>\n  <p class=\"govuk-body\">{{ description }}</p>\n</div>\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-724ddb29dfed8ba7536d4d5cab9303fd456f096715a22009af6e0eeafd2bfc7cf1b80132d75deb3888548987a9150a1d8c5507996b1ab93a7c4f920af3ffec33",
            "file": "src/app/features/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent {\n  // constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"govuk-grid-row home-page\">\n  <div class=\"govuk-grid-column-full\">\n    <p class=\"govuk-heading-xl govuk-!-font-weight-bold\">Select activity</p>\n\n    <div class=\"govuk-grid-row\">\n      <app-home-button url=\"search\" linkText=\"Search for a technical record\" description=\"Manage technical records, test records and issue certificates or documents\"></app-home-button>\n\n      <app-home-button url=\"create\" linkText=\"Create a new technical record\" description=\"Create records for PSVs, HGVs and trailers\"></app-home-button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "RadioGroupComponent",
            "id": "component-RadioGroupComponent-f776c3a837a8dd18da65f608ae3de77702b1764a6355ed02a02d30473ad86ecc6015e734c5fab562de502bcc97b8bedd2e6efd4cb97eaf528400d9cd9677afb5",
            "file": "src/app/forms/components/radio-group/radio-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: RadioGroupComponent, multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-radio-group",
            "styleUrls": [
                "./radio-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "MultiOptions",
                    "decorators": []
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "viewType",
                    "defaultValue": "FormNodeViewTypes.STRING",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "FormNodeViewTypes",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CustomControl",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "focused",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "value_",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "handleEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injector, Input, OnInit } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MultiOptions } from '@models/options.model';\nimport { BaseControlComponent } from '../base-control/base-control.component';\n\ninterface Option {\n  label: string;\n  value: string;\n}\n\n@Component({\n  selector: 'app-radio-group',\n  templateUrl: './radio-group.component.html',\n  styleUrls: ['./radio-group.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RadioGroupComponent,\n      multi: true\n    }\n  ]\n})\nexport class RadioGroupComponent extends BaseControlComponent {\n  @Input() options: MultiOptions = [];\n\n  constructor(injector: Injector) {\n    super(injector);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./radio-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseControlComponent",
            "templateData": "<div class=\"govuk-form-group\">\n  <fieldset class=\"govuk-fieldset\" [disabled]=\"disabled\">\n    <legend class=\"govuk-fieldset__legend govuk-fieldset__legend--l\">\n      <h1 class=\"govuk-fieldset__heading\">{{ label }}</h1>\n      <div *ngIf=\"hint\" id=\"{{ name }}-hint\" class=\"govuk-hint\">{{ hint }}</div>\n    </legend>\n    <p *ngIf=\"errorMessage\" id=\"{{ name }}-error\" class=\"govuk-error-message\"><span class=\"govuk-visually-hidden\">Error:</span> {{ errorMessage }}</p>\n    <div class=\"govuk-radios\" data-module=\"govuk-radios\">\n      <div *ngFor=\"let option of options\" class=\"govuk-radios__item\">\n        <input class=\"govuk-radios__input\" [id]=\"name + '-' + option.value + '-radio'\" [name]=\"name\" type=\"radio\" [value]=\"option.value\" (ngModel)=\"(value)\" (ngModelChange)=\"onChange($event)\" />\n        <label class=\"govuk-label govuk-radios__label\" [for]=\"option.value + '-radio'\"> {{ option.label }} </label>\n        <div *ngIf=\"option.hint\" id=\"{{ name }}-hint-{{ option.value }}\" class=\"govuk-hint govuk-radios__hint\">{{ option.hint }}</div>\n      </div>\n    </div>\n  </fieldset>\n</div>\n"
        },
        {
            "name": "SearchComponent",
            "id": "component-SearchComponent-afeebdedf0c36ec1b3fa79aec59dbe0fcb2af8f6f77e9237e1889f69f7563aa347d92d3e847d8585836967b0cd43184563020056cf61a88b1ad0c93d25c7ade4",
            "file": "src/app/features/search/search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search",
            "styleUrls": [
                "./search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "globalErrorService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GlobalErrorService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "vehicleTechRecords$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Array<VehicleTechRecordModel>>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "getInlineErrorMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "searchTechRecords",
                    "args": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { TechnicalRecordService } from '@services/technical-record/technical-record.service';\nimport { map, Observable } from 'rxjs';\nimport { VehicleTechRecordModel } from '../../models/vehicle-tech-record.model';\nimport { GlobalErrorService } from '../global-error/global-error.service';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.scss']\n})\nexport class SearchComponent {\n  vehicleTechRecords$: Observable<Array<VehicleTechRecordModel>>;\n\n  constructor(private technicalRecordService: TechnicalRecordService, public globalErrorService: GlobalErrorService) {\n    this.vehicleTechRecords$ = this.technicalRecordService.vehicleTechRecords$;\n  }\n\n  public searchTechRecords(searchTerm: string) {\n    const searchErrorMessage = 'You must provide a vehicle registration mark, trailer ID or vehicle identification number.';\n      this.globalErrorService.clearError()\n\n    searchTerm = searchTerm.trim();\n\n    if (searchTerm) {\n      this.technicalRecordService.searchBy({ type: 'vin', searchTerm });\n    } else {\n      this.globalErrorService.addError({ error: searchErrorMessage, anchorLink: 'search-term' });\n    }\n  }\n\n  public getInlineErrorMessage(): Observable<number> {\n    return this.globalErrorService.errors$.pipe(map(errors => errors.length))\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "technicalRecordService",
                        "type": "TechnicalRecordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "globalErrorService",
                        "type": "GlobalErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "technicalRecordService",
                        "type": "TechnicalRecordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalErrorService",
                        "type": "GlobalErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"govuk-grid-row search-page\">\n  <div class=\"govuk-grid-column-full\">\n    <p class=\"govuk-heading-xl govuk-!-font-weight-bold\">Search for a technical record</p>\n  </div>\n\n  <div class=\"govuk-grid-column-full\">\n    <div class=\"govuk-form-group\" [ngClass]=\"{ 'govuk-form-group--error': getInlineErrorMessage() | async }\">\n      <label class=\"govuk-label govuk-!-font-weight-bold\" for=\"searchIdentifier\"> Vehicle registration mark, trailer ID or vehicle identification number </label>\n      <span *ngIf=\"globalErrorService.errors$ | async as errorMessage\" id=\"search-term-error\" class=\"govuk-error-message\">\n        <span class=\"govuk-visually-hidden\">Error:</span>\n        <p class=\"white-space--normal\" *ngIf=\"errorMessage.length > 0\">{{ errorMessage[0].error }}</p>\n      </span>\n\n      <input #searchTerm class=\"govuk-input govuk-!-width-two-thirds\" [ngClass]=\"{ 'govuk-input--error': getInlineErrorMessage() | async }\" (keyup.enter)=\"searchTechRecords(searchTerm.value)\" id=\"search-term\" name=\"search-term\" type=\"text\" aria-describedby=\"search-term\" />\n    </div>\n\n    <button class=\"govuk-button\" data-module=\"govuk-button\" (click)=\"searchTechRecords(searchTerm.value)\">Search</button>\n  </div>\n  <ng-container *ngFor=\"let vehicleTechRecord of vehicleTechRecords$ | async\">\n    <app-vehicle-technical-record [vehicleTechRecord]=\"vehicleTechRecord\"></app-vehicle-technical-record>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-2541c026cf26fb9de7fd1d16c6a6d8d11044aa9b5b194da15578aa0a8a7d6e1b6f9faceedc966d7d733d5856d35caf2568ba0946a75fea8747756edaf6f250f2",
            "file": "src/app/layout/spinner/spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-spinner",
            "styleUrls": [
                "./spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "spinnerService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpinnerService",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { SpinnerService } from './spinner.service';\n\n@Component({\n  selector: 'app-spinner',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.scss']\n})\nexport class SpinnerComponent {\n  constructor(public spinnerService: SpinnerService) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'node_modules/govuk-frontend/govuk/all';\n\n.overlay {\n  position: fixed;\n  display: block;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  background-color: rgba(255, 255, 255, 0.5);\n  z-index: 1002;\n  & .spinner-wrapper {\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    & #loader {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n  }\n\n  @keyframes spinner {\n    0% {\n      opacity: 1;\n    }\n    100% {\n      opacity: 0;\n    }\n  }\n\n  .spinner div {\n    box-sizing: content-box;\n    left: 94px;\n    top: 45px;\n    position: absolute;\n    animation: spinner linear 1s infinite;\n    background: #000000;\n    width: 12px;\n    height: 34px;\n    border-radius: 6px / 7.82px;\n    transform-origin: 6px 55px;\n  }\n\n  .spinner div:nth-child(1) {\n    transform: rotate(0deg);\n    animation-delay: -0.9166666666666666s;\n    background: #000000;\n  }\n\n  .spinner div:nth-child(2) {\n    transform: rotate(30deg);\n    animation-delay: -0.8333333333333334s;\n    background: #000000;\n  }\n\n  .spinner div:nth-child(3) {\n    transform: rotate(60deg);\n    animation-delay: -0.75s;\n    background: #000000;\n  }\n\n  .spinner div:nth-child(4) {\n    transform: rotate(90deg);\n    animation-delay: -0.6666666666666666s;\n    background: #000000;\n  }\n\n  .spinner div:nth-child(5) {\n    transform: rotate(120deg);\n    animation-delay: -0.5833333333333334s;\n    background: #000000;\n  }\n\n  .spinner div:nth-child(6) {\n    transform: rotate(150deg);\n    animation-delay: -0.5s;\n    background: #000000;\n  }\n\n  .spinner div:nth-child(7) {\n    transform: rotate(180deg);\n    animation-delay: -0.4166666666666667s;\n    background: #000000;\n  }\n\n  .spinner div:nth-child(8) {\n    transform: rotate(210deg);\n    animation-delay: -0.3333333333333333s;\n    background: #000000;\n  }\n\n  .spinner div:nth-child(9) {\n    transform: rotate(240deg);\n    animation-delay: -0.25s;\n    background: #000000;\n  }\n\n  .spinner div:nth-child(10) {\n    transform: rotate(270deg);\n    animation-delay: -0.16666666666666666s;\n    background: #000000;\n  }\n\n  .spinner div:nth-child(11) {\n    transform: rotate(300deg);\n    animation-delay: -0.08333333333333333s;\n    background: #000000;\n  }\n\n  .spinner div:nth-child(12) {\n    transform: rotate(330deg);\n    animation-delay: 0s;\n    background: #000000;\n  }\n\n  .spinner-container {\n    width: 200px;\n    height: 200px;\n    display: inline-block;\n    overflow: hidden;\n  }\n\n  .spinner {\n    width: 100%;\n    height: 100%;\n    position: relative;\n    transform: translateZ(0) scale(1);\n    backface-visibility: hidden;\n    transform-origin: 0 0; /* see note above */\n  }\n}\n",
                    "styleUrl": "./spinner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "spinnerService",
                        "type": "SpinnerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "spinnerService",
                        "type": "SpinnerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"overlay\" *ngIf=\"(spinnerService.showSpinner$ | async) === true\">\n  <div class=\"govuk-box spinner-wrapper\" aria-busy=\"true\">\n    <div id=\"loader\" class=\"govuk-c-loader\" role=\"progressbar\" aria-label=\"Loading, please wait.\" tabindex=\"0\">\n      <div class=\"spinner-container\">\n        <div class=\"spinner\">\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "TechRecordSummaryComponent",
            "id": "component-TechRecordSummaryComponent-7848e5322f63bc2f05e0616df3f93a6d8954ee10e189fcd226bd40d3e65925a2f053ab1ad27707cfbfc87a42e31e6e7ff1ce0e38693b0629308f63cb62f2457a",
            "file": "src/app/features/tech-record-summary/tech-record-summary.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tech-record-summary",
            "styleUrls": [
                "./tech-record-summary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tech-record-summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "vehicleTechRecord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "VehicleTechRecordModel",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentRecord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TechRecordModel",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormNode",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "vehicleTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "viewableTechRecord",
                    "args": [
                        {
                            "name": "record",
                            "type": "VehicleTechRecordModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "TechRecordModel | undefined",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA function to get the correct tech record to create the summary display, this has a hierarchy\nwhich is PROVISIONAL -> CURRENT -> ARCHIVED.\n",
                    "description": "<p>A function to get the correct tech record to create the summary display, this has a hierarchy\nwhich is PROVISIONAL -&gt; CURRENT -&gt; ARCHIVED.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1214,
                                "end": 1220,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "record"
                            },
                            "type": "VehicleTechRecordModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1208,
                                "end": 1213,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>This is a VehicleTechRecordModel passed in from the parent component</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1296,
                                "end": 1303,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>returns the tech record of correct hierarchy precedence or if none exists returns undefined</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { StatusCodes, TechRecordModel, VehicleTechRecordModel } from '@models/vehicle-tech-record.model';\nimport { PsvTechRecord } from '../../forms/templates/psv/psv-tech-record.template';\nimport { HgvTechRecord } from '../../forms/templates/hgv/hgv-tech-record.template';\nimport { TrlTechRecord } from '../../forms/templates/trl/trl-tech-record.template';\nimport { FormNode } from '../../forms/services/dynamic-form.types';\n\n@Component({\n  selector: 'app-tech-record-summary',\n  templateUrl: './tech-record-summary.component.html',\n  styleUrls: ['./tech-record-summary.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TechRecordSummaryComponent implements OnInit {\n  @Input() vehicleTechRecord?: VehicleTechRecordModel;\n  template!: FormNode;\n  currentRecord?: TechRecordModel;\n\n  ngOnInit(): void {\n    this.vehicleTemplate();\n    this.currentRecord = this.viewableTechRecord(this.vehicleTechRecord);\n  }\n\n  constructor() {}\n\n  /**\n   * A function to get the correct tech record to create the summary display, this has a hierarchy\n   * which is PROVISIONAL -> CURRENT -> ARCHIVED.\n   * @param record This is a VehicleTechRecordModel passed in from the parent component\n   * @returns returns the tech record of correct hierarchy precedence or if none exists returns undefined\n   */\n  viewableTechRecord(record?: VehicleTechRecordModel): TechRecordModel | undefined {\n    let viewableTechRecord = record?.techRecord?.find((record) => record.statusCode === StatusCodes.PROVISIONAL);\n    if (viewableTechRecord == undefined) {\n      viewableTechRecord = record?.techRecord?.find((record) => record.statusCode === StatusCodes.CURRENT);\n    }\n    if (viewableTechRecord == undefined) {\n      viewableTechRecord = record?.techRecord?.find((record) => record.statusCode === StatusCodes.ARCHIVED);\n    }\n    return viewableTechRecord;\n  }\n\n  get vehicleType(): string | undefined {\n    return this.vehicleTechRecord?.techRecord.pop()?.vehicleType;\n  }\n\n  vehicleTemplate(): void {\n    let viewableRecord = this.viewableTechRecord(this.vehicleTechRecord);\n    switch (viewableRecord?.vehicleType) {\n      case 'psv': {\n        this.template = PsvTechRecord;\n        break;\n      }\n      case 'hgv': {\n        this.template = HgvTechRecord;\n        break;\n      }\n      case 'trl': {\n        this.template = TrlTechRecord;\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tech-record-summary.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "vehicleType": {
                    "name": "vehicleType",
                    "getSignature": {
                        "name": "vehicleType",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 43
                    }
                }
            },
            "templateData": "<section>\n  <app-dynamic-form-group *ngIf=\"template\" [template]=\"template\" [data]=\"currentRecord\" class=\"govuk-summary-list\"></app-dynamic-form-group>\n</section>\n"
        },
        {
            "name": "TestRecordComponent",
            "id": "component-TestRecordComponent-ae6d7b427cac57d072c168441c97187d4fff28730e56f2e07019a366bd71633031a31a6c499640873baaa7c62d9190f8c1b287b09209c46bb4cd42c5d101e44c",
            "file": "src/app/features/test-records/views/test-result/test-records.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-test-records",
            "styleUrls": [
                "./test-records.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./test-records.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormNode",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "testResult$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TestResultModel | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { TestResultModel } from '@models/test-result.model';\nimport { TestRecordsService } from '@services/test-records/test-records.service';\nimport { Observable } from 'rxjs';\nimport { FormNode } from 'src/app/forms/services/dynamic-form.types';\nimport { PsvAnnual } from '../../../../forms/templates/psv/psv-annual.template';\n\n@Component({\n  selector: 'app-test-records',\n  templateUrl: './test-records.component.html',\n  styleUrls: ['./test-records.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TestRecordComponent {\n  testResult$: Observable<TestResultModel | undefined>;\n  template: FormNode;\n\n  constructor(private testRecordsService: TestRecordsService) {\n    this.testResult$ = this.testRecordsService.testResult$;\n    this.template = PsvAnnual;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./test-records.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "testRecordsService",
                        "type": "TestRecordsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "testRecordsService",
                        "type": "TestRecordsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<section *ngIf=\"testResult$ | async as testResult\">\n  <app-dynamic-form-group [template]=\"template\" [data]=\"testResult\"></app-dynamic-form-group>\n</section>\n"
        },
        {
            "name": "TestRecordsComponent",
            "id": "component-TestRecordsComponent-b18928fd9ad8307d317d22d69e112bd75072f0e6d0b3fd755e79ebfa17dc048198122b87b9d7ba30304eb826a2a9349ff9655a4cbb0fd814a9036baf77042239",
            "file": "src/app/features/test-records/test-records.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-test-records",
            "styleUrls": [
                "./test-records.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./test-records.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { TestRecordsService } from '@services/test-records/test-records.service';\nimport { Subject, takeUntil } from 'rxjs';\n\n@Component({\n  selector: 'app-test-records',\n  templateUrl: './test-records.component.html',\n  styleUrls: ['./test-records.component.scss']\n})\nexport class TestRecordsComponent implements OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  constructor(private testRecordsService: TestRecordsService, private route: ActivatedRoute) {\n    this.route.paramMap.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      const systemId = params.get('systemId') ?? '';\n\n      this.testRecordsService.loadTestResultBySystemId(systemId);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./test-records.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "testRecordsService",
                        "type": "TestRecordsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "testRecordsService",
                        "type": "TestRecordsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "TestRecordSummaryComponent",
            "id": "component-TestRecordSummaryComponent-2537a995e0f5fdb251476e05c58e0ab4324d160989e3d83686f32e5ce699ff78ea69ce5c071e97f12851ea5f492bc451f67a4647e7f467c5eaca1b87aa02f30d",
            "file": "src/app/features/test-record-summary/test-record-summary.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-test-record-summary",
            "styleUrls": [
                "./test-record-summary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./test-record-summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "testRecords",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TestResultModel[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getTestTypeName",
                    "args": [
                        {
                            "name": "testResult",
                            "type": "TestResultModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "testResult",
                            "type": "TestResultModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTestTypeResults",
                    "args": [
                        {
                            "name": "testResult",
                            "type": "TestResultModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "testResult",
                            "type": "TestResultModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { TestResultModel } from '../../models/test-result.model';\n\n@Component({\n  selector: 'app-test-record-summary',\n  templateUrl: './test-record-summary.component.html',\n  styleUrls: ['./test-record-summary.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TestRecordSummaryComponent {\n  @Input() testRecords: TestResultModel[] = [];\n\n  constructor() {}\n\n  getTestTypeName(testResult: TestResultModel) {\n    return testResult.testTypes.map((t) => t.testTypeName).join(',');\n  }\n\n  getTestTypeResults(testResult: TestResultModel) {\n    return testResult.testTypes.map((t) => t.testResult).join(',');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./test-record-summary.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "templateData": "<div *ngIf=\"!testRecords || testRecords.length === 0\">\n  <h2 class=\"govuk-heading-m\">Test Records</h2>\n  <h3 class=\"govuk-heading-s\">No test records found.</h3>\n</div>\n<table class=\"govuk-table\" *ngIf=\"testRecords && testRecords.length > 0\">\n  <caption class=\"govuk-table__caption govuk-table__caption--m\">\n    Test Records\n  </caption>\n  <thead class=\"govuk-table__head\">\n    <tr class=\"govuk-table__row\">\n      <th scope=\"col\" class=\"govuk-table__header\">Date</th>\n      <th scope=\"col\" class=\"govuk-table__header\">Test Type</th>\n      <th scope=\"col\" class=\"govuk-table__header\">Result</th>\n      <th scope=\"col\" class=\"govuk-table__header\"></th>\n    </tr>\n  </thead>\n  <tbody class=\"govuk-table__body\">\n    <tr class=\"govuk-table__row\" *ngFor=\"let testRecord of testRecords\">\n      <th scope=\"row\" class=\"govuk-table__header\">{{ testRecord.testStartTimestamp | date: 'dd/MM/yyyy HH:mm' }}</th>\n      <td class=\"govuk-table__cell\">{{ getTestTypeName(testRecord) }}</td>\n      <td class=\"govuk-table__cell\">{{ getTestTypeResults(testRecord) }}</td>\n      <td class=\"govuk-table__cell\">\n        <a id=\"view-test-{{ testRecord.testResultId }}\" routerLink=\"/test-records/{{ testRecord.systemNumber }}/test-result/{{ testRecord.testResultId }}\">View</a>\n      </td>\n    </tr>\n  </tbody>\n</table>\n"
        },
        {
            "name": "TextInputComponent",
            "id": "component-TextInputComponent-cf2bff5d9ae007bcf61de401c98443a2ac20325a7854b641fc39f4cdaa26b9cfcdcecd2f4ca167e6856308717a72319b6788b114055286bd34205ac36e8e9498",
            "file": "src/app/forms/components/text-input/text-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: TextInputComponent, multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-text-input",
            "styleUrls": [
                "./text-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "viewType",
                    "defaultValue": "FormNodeViewTypes.STRING",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "FormNodeViewTypes",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CustomControl",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "focused",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "value_",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "handleEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injector } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BaseControlComponent } from '../base-control/base-control.component';\n\n@Component({\n  selector: 'app-text-input',\n  templateUrl: './text-input.component.html',\n  styleUrls: ['./text-input.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: TextInputComponent,\n      multi: true\n    }\n  ]\n})\nexport class TextInputComponent extends BaseControlComponent {\n  constructor(injector: Injector) {\n    super(injector);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./text-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseControlComponent",
            "templateData": "<div class=\"govuk-form-group\">\n  <h1 *ngIf=\"label\" class=\"govuk-label-wrapper\">\n    <label class=\"govuk-label govuk-label--m\" for=\"{{ name }}\">{{ label }}</label>\n  </h1>\n  <p *ngIf=\"errorMessage\" id=\"{{ name }}-error\" class=\"govuk-error-message\"><span class=\"govuk-visually-hidden\">Error:</span> {{ errorMessage }}</p>\n  <div *ngIf=\"hint\" id=\"{{ name }}-hint\" class=\"govuk-hint\">{{ hint }}</div>\n  <input class=\"govuk-input\" id=\"{{ name }}\" name=\"{{ name }}\" type=\"text\" [(ngModel)]=\"value\" [disabled]=\"disabled ?? false\" (ngModelChange)=\"onChange($event)\" (blur)=\"onTouched(); handleEvent($event)\" (focus)=\"handleEvent($event)\" />\n</div>\n"
        },
        {
            "name": "VehicleTechnicalRecordComponent",
            "id": "component-VehicleTechnicalRecordComponent-7770807b49dc3f55d5b7daae53bd51047f69249b1227201f4d49b8f03c0dea2acd7b231fc1e6d9db1e365e082cfa37f3dc4222e215bede3e47f9b9bbe90d1fd2",
            "file": "src/app/vehicle-technical-record/vehicle-technical-record.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vehicle-technical-record",
            "styleUrls": [
                "./vehicle-technical-record.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./vehicle-technical-record.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "vehicleTechRecord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "VehicleTechRecordModel",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "records",
                    "defaultValue": "of([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TestResultModel[]>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { TestRecordsService } from '@services/test-records/test-records.service';\nimport { Observable, of } from 'rxjs';\nimport { TestResultModel } from '../models/test-result.model';\nimport { VehicleTechRecordModel, Vrm } from '../models/vehicle-tech-record.model';\n\n@Component({\n  selector: 'app-vehicle-technical-record',\n  templateUrl: './vehicle-technical-record.component.html',\n  styleUrls: ['./vehicle-technical-record.component.scss']\n})\nexport class VehicleTechnicalRecordComponent {\n  @Input() vehicleTechRecord?: VehicleTechRecordModel;\n\n  records: Observable<TestResultModel[]> = of([]);\n\n  constructor(testRecordService: TestRecordsService) {\n    this.records = testRecordService.testRecords$;\n  }\n\n  get currentVrm(): string | undefined {\n    return this.vehicleTechRecord?.vrms.find((vrm) => vrm.isPrimary === true)?.vrm;\n  }\n\n  get otherVrms(): Vrm[] | undefined {\n    return this.vehicleTechRecord?.vrms.filter((vrm) => vrm.isPrimary === false);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./vehicle-technical-record.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "testRecordService",
                        "type": "TestRecordsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "testRecordService",
                        "type": "TestRecordsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "currentVrm": {
                    "name": "currentVrm",
                    "getSignature": {
                        "name": "currentVrm",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 21
                    }
                },
                "otherVrms": {
                    "name": "otherVrms",
                    "getSignature": {
                        "name": "otherVrms",
                        "type": "",
                        "returnType": "[] | undefined",
                        "line": 25
                    }
                }
            },
            "templateData": "<div class=\"govuk-grid-column-full\">\n  <dl class=\"govuk-summary-list\">\n    <div class=\"govuk-summary-list__row\">\n      <dt class=\"govuk-summary-list__key\">Vehicle identification number (VIN)</dt>\n      <dd id=\"vin\" class=\"govuk-summary-list__value\">\n        {{ vehicleTechRecord?.vin | defaultNullOrEmpty }}\n      </dd>\n      <dd class=\"govuk-summary-list__value\"></dd>\n    </div>\n    <div class=\"govuk-summary-list__row\">\n      <dt class=\"govuk-summary-list__key\">Vehicle registration mark (VRM)</dt>\n      <dd id=\"current-vrm\" class=\"govuk-summary-list__value\">\n        {{ currentVrm | defaultNullOrEmpty }}\n      </dd>\n      <dd class=\"govuk-summary-list__value\"></dd>\n    </div>\n    <div class=\"govuk-summary-list__row\">\n      <dt class=\"govuk-summary-list__key\">Previous VRM</dt>\n      <dd id=\"previous-vrm\" class=\"govuk-summary-list__value\">\n        <p class=\"govuk-body govuk-!-margin-bottom-0\" *ngFor=\"let secondaryVrm of otherVrms\">{{ secondaryVrm.vrm | defaultNullOrEmpty }}</p>\n      </dd>\n      <dd class=\"govuk-summary-list__value\"></dd>\n    </div>\n  </dl>\n  <app-tech-record-summary [vehicleTechRecord]=\"vehicleTechRecord || undefined\"></app-tech-record-summary>\n  <app-test-record-summary [testRecords]=\"(records | async) || []\"></app-test-record-summary>\n</div>\n"
        },
        {
            "name": "ViewCombinationComponent",
            "id": "component-ViewCombinationComponent-8edbb82769d4e415bd717ef03a47c48ae39e346da4fdb97095ebfc7bb568c85069548ea1a902acee991dcba5d425dc406639660bdca3c47dd3dfb3ec03a02335",
            "file": "src/app/forms/components/view-combination/view-combination.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: ViewCombinationComponent, multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-view-combination",
            "styleUrls": [
                "./view-combination.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./view-combination.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "formNode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "FormNode",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "leftComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CustomFormControl",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "rightComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CustomFormControl",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "separator",
                    "defaultValue": "' '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "findComponentByName",
                    "args": [
                        {
                            "name": "nodeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CustomFormControl",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "nodeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injector, Input, OnInit } from '@angular/core';\nimport { FormGroup, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CustomFormControl, FormNode, FormNodeCombinationOptions } from '../../services/dynamic-form.types';\n\n@Component({\n  selector: 'app-view-combination',\n  templateUrl: './view-combination.component.html',\n  styleUrls: ['./view-combination.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: ViewCombinationComponent,\n      multi: true\n    }\n  ]\n})\nexport class ViewCombinationComponent implements OnInit {\n  @Input() formNode: FormNode;\n  @Input() formGroup: FormGroup;\n\n  leftComponent?: CustomFormControl;\n  rightComponent?: CustomFormControl;\n  separator: string = ' ';\n  label?: string;\n\n  constructor() {\n    this.formNode = <FormNode>{};\n    this.formGroup = <FormGroup>{};\n  }\n\n  ngOnInit(): void {\n    const options = <FormNodeCombinationOptions>this.formNode.options;\n    this.leftComponent = this.findComponentByName(options.leftComponentName, this.formGroup);\n    this.rightComponent = this.findComponentByName(options.rightComponentName, this.formGroup);\n    this.separator = options.separator;\n    this.label = this.formNode.label;\n  }\n\n  private findComponentByName(nodeName: string, formGroup: FormGroup): CustomFormControl {\n    return formGroup.get(nodeName) as CustomFormControl;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./view-combination.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"govuk-summary-list__row\">\n  <dt class=\"govuk-summary-list__key\">{{ label }}:</dt>\n  <dd id=\"test-{{ leftComponent?.meta?.name }}\" class=\"govuk-summary-list__value\">\n    <span>{{ (leftComponent?.value | defaultNullOrEmpty) + separator + (rightComponent?.value | defaultNullOrEmpty) }}</span>\n  </dd>\n</div>\n"
        },
        {
            "name": "ViewListItemComponent",
            "id": "component-ViewListItemComponent-04c72488347ec2d3faaa7e8d038aec3e3348526b00e60ca0744781e754076f4ff86680adced5c9bb8b607df039a5d40e0c6dd97477f1b115c21a811ab5d6c586",
            "file": "src/app/forms/components/view-list-item/view-list-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: ViewListItemComponent, multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-view-list-item",
            "styleUrls": [
                "./view-list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./view-list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "viewType",
                    "defaultValue": "FormNodeViewTypes.STRING",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "FormNodeViewTypes",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CustomControl",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "focused",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "value_",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "handleEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injector } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FormNodeViewTypes } from '../../services/dynamic-form.types';\nimport { BaseControlComponent } from '../base-control/base-control.component';\n\n@Component({\n  selector: 'app-view-list-item',\n  templateUrl: './view-list-item.component.html',\n  styleUrls: ['./view-list-item.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: ViewListItemComponent,\n      multi: true\n    }\n  ]\n})\nexport class ViewListItemComponent extends BaseControlComponent {\n  constructor(injector: Injector) {\n    super(injector);\n  }\n\n  get formNodeViewTypes(): typeof FormNodeViewTypes {\n    return FormNodeViewTypes;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./view-list-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseControlComponent",
            "accessors": {
                "formNodeViewTypes": {
                    "name": "formNodeViewTypes",
                    "getSignature": {
                        "name": "formNodeViewTypes",
                        "type": "",
                        "returnType": "",
                        "line": 23
                    }
                }
            },
            "templateData": "<div *ngIf=\"viewType !== formNodeViewTypes.HIDDEN\" class=\"govuk-summary-list__row\">\n  <dt class=\"govuk-summary-list__key\">{{ label }}:</dt>\n  <ng-container [ngSwitch]=\"viewType\">\n    <ng-container *ngSwitchCase=\"formNodeViewTypes.DATE\">\n      <dd id=\"test-{{ name }}\" class=\"govuk-summary-list__value\">{{ value | date: 'dd/MM/yyyy' | defaultNullOrEmpty }}</dd>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"formNodeViewTypes.DATETIME\">\n      <dd id=\"test-{{ name }}\" class=\"govuk-summary-list__value\">{{ value | date: 'dd/MM/yyyy HH:mm' | defaultNullOrEmpty }}</dd>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"formNodeViewTypes.TIME\">\n      <dd id=\"test-{{ name }}\" class=\"govuk-summary-list__value\">{{ value | date: 'HH:mm' | defaultNullOrEmpty }}</dd>\n    </ng-container>\n\n    <ng-container *ngSwitchDefault>\n      <dd id=\"test-{{ name }}\" class=\"govuk-summary-list__value\">{{ value | defaultNullOrEmpty }}</dd>\n    </ng-container>\n  </ng-container>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-fe60ad98264d48575c96facbfd76296a52c03b66d482179973e30b51a79b7a38a94369fdeda91d33314b8eb62d08929a4b5fb2861ffd374a4b2c0c216d4820bb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { MsalBroadcastService, MsalGuard, MsalGuardConfiguration, MsalInterceptor, MsalInterceptorConfiguration, MsalModule, MsalRedirectComponent, MsalService, MSAL_GUARD_CONFIG, MSAL_INSTANCE, MSAL_INTERCEPTOR_CONFIG } from '@azure/msal-angular';\nimport { BrowserCacheLocation, InteractionType, IPublicClientApplication, PublicClientApplication } from '@azure/msal-browser';\nimport { SharedModule } from '@shared/shared.module';\nimport { environment } from '../environments/environment';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { GlobalErrorComponent } from './features/global-error/global-error.component';\nimport { HomeButtonComponent } from './features/home/components/home-button/home-button.component';\nimport { HomeComponent } from './features/home/home.component';\nimport { SearchComponent } from './features/search/search.component';\nimport { TechRecordSummaryComponent } from './features/tech-record-summary/tech-record-summary.component';\nimport { TestRecordSummaryComponent } from './features/test-record-summary/test-record-summary.component';\nimport { DynamicFormsModule } from './forms/dynamic-forms.module';\nimport { InterceptorModule } from './interceptors/interceptor.module';\nimport { FooterComponent } from './layout/footer/footer.component';\nimport { HeaderComponent } from './layout/header/header.component';\nimport { SpinnerComponent } from './layout/spinner/spinner.component';\nimport { UserService } from './services/user-service/user-service';\nimport { AppStoreModule } from './store/app-store.module';\nimport { VehicleTechnicalRecordComponent } from './vehicle-technical-record/vehicle-technical-record.component';\n\nexport function MSALInstanceFactory(): IPublicClientApplication {\n  return new PublicClientApplication({\n    auth: {\n      clientId: environment.VTM_CLIENT_ID,\n      authority: environment.VTM_AUTHORITY_ID,\n      redirectUri: environment.VTM_REDIRECT_URI\n    },\n    cache: {\n      cacheLocation: BrowserCacheLocation.LocalStorage,\n      storeAuthStateInCookie: true\n    }\n  });\n}\n\nexport function MSALInterceptorConfigFactory(): MsalInterceptorConfiguration {\n  const protectedResourceMap = new Map<string, Array<string>>();\n  protectedResourceMap.set(environment.VTM_API_URI, ['']);\n\n  return {\n    interactionType: InteractionType.Redirect,\n    protectedResourceMap\n  };\n}\n\nexport function MSALGuardConfigFactory(): MsalGuardConfiguration {\n  return {\n    interactionType: InteractionType.Redirect,\n    authRequest: {\n      scopes: [`${environment.VTM_API_CLIENT_ID}/user_impersonation`]\n    },\n    loginFailedRoute: ''\n  };\n}\n\n@NgModule({\n  declarations: [AppComponent, HeaderComponent, FooterComponent, HomeComponent, HomeButtonComponent, SearchComponent, VehicleTechnicalRecordComponent, TestRecordSummaryComponent, TechRecordSummaryComponent, GlobalErrorComponent, SpinnerComponent],\n  imports: [BrowserModule, AppRoutingModule, MsalModule, HttpClientModule, AppStoreModule, DynamicFormsModule, ReactiveFormsModule, SharedModule, InterceptorModule],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: MsalInterceptor,\n      multi: true\n    },\n    {\n      provide: MSAL_INSTANCE,\n      useFactory: MSALInstanceFactory\n    },\n    {\n      provide: MSAL_GUARD_CONFIG,\n      useFactory: MSALGuardConfigFactory\n    },\n    {\n      provide: MSAL_INTERCEPTOR_CONFIG,\n      useFactory: MSALInterceptorConfigFactory\n    },\n    MsalService,\n    MsalGuard,\n    MsalBroadcastService,\n    UserService\n  ],\n  exports: [],\n  bootstrap: [AppComponent, MsalRedirectComponent]\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "UserService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "GlobalErrorComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HomeButtonComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "SearchComponent"
                        },
                        {
                            "name": "SpinnerComponent"
                        },
                        {
                            "name": "TechRecordSummaryComponent"
                        },
                        {
                            "name": "TestRecordSummaryComponent"
                        },
                        {
                            "name": "VehicleTechnicalRecordComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AppStoreModule"
                        },
                        {
                            "name": "DynamicFormsModule"
                        },
                        {
                            "name": "InterceptorModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-44ba674fcf4c7d5c4cbae999d45931145b7898da9fe27c46dc7b1060365e91b491f94e4cd2d1f3098b8e52319f776c41443e306a2b83bfd2cb1f4c0e57a423e7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MsalGuard } from '@azure/msal-angular';\nimport { HomeComponent } from './features/home/home.component';\nimport { SearchComponent } from './features/search/search.component';\nimport { TitleResolver } from './resolvers/title/title.resolver';\n\nconst routes: Routes = [\n  {\n    path: '',\n    resolve: { title: TitleResolver },\n    children: [\n      {\n        path: '',\n        component: HomeComponent,\n        data: { title: 'Home' },\n        canActivate: [MsalGuard]\n      },\n      {\n        path: 'search',\n        component: SearchComponent,\n        data: { title: 'Technical record search' },\n        canActivate: [MsalGuard]\n      },\n      {\n        path: 'test-records',\n        canLoad: [MsalGuard],\n        loadChildren: () => \"import('./features/test-records/test-records.module').then((m) => m.TestRecordsModule)\"\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppStoreModule",
            "id": "module-AppStoreModule-c5481685394fcdeda3ea78397a0bb7945625e70dafccf696ed745612927368b73656eb7439165eaad2af982657fbcee326015b23583e7966ad1a2e5d0b50e161",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/store/app-store.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { GlobalErrorStateModule } from '@store/global-error/global-error-state.module';\nimport { environment } from '../../environments/environment';\nimport { RouterStateModule } from './router/router-state.module';\nimport { TechnicalRecordsStateModule } from './technical-records/technical-records-state.module';\nimport { TestRecordsStateModule } from './test-records/test-records.module';\nimport { UserStateModule } from './user/user-state.module';\nimport { SpinnerStateModule } from '@store/spinner/spinner-state.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n    StoreDevtoolsModule.instrument({\n      name: 'VTM Web Dev Tools',\n      maxAge: 25, // Retains last 25 states\n      logOnly: environment.production //Log-only mode in production\n    }),\n    UserStateModule,\n    TechnicalRecordsStateModule,\n    TestRecordsStateModule,\n    GlobalErrorStateModule,\n    RouterStateModule,\n    SpinnerStateModule\n  ]\n})\nexport class AppStoreModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "GlobalErrorStateModule"
                        },
                        {
                            "name": "RouterStateModule"
                        },
                        {
                            "name": "SpinnerStateModule"
                        },
                        {
                            "name": "TechnicalRecordsStateModule"
                        },
                        {
                            "name": "TestRecordsStateModule"
                        },
                        {
                            "name": "UserStateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DelayedRetryModule",
            "id": "module-DelayedRetryModule-b67191db99a390b9e7c5a7cb0cfb58110a0e799d5ca8fc98b15a1984bed25237f2458923da9cb14743a585669a6961f530787b6c80dc7c9d2e1195d3d3333e64",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/interceptors/delayed-retry/delayed-retry.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "config",
                            "type": "HttpRetryConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<DelayedRetryModule>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "HttpRetryConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { InjectionToken, ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { DelayedRetryInterceptor } from './delayed-retry.interceptor';\n\nexport const HTTP_RETRY_CONFIG = new InjectionToken<HttpRetryConfig>('HttpRetryConfig');\n\nexport interface HttpRetryConfig {\n  /**\n   * The maximum number of times to retry.\n   */\n  count?: number;\n  /**\n   * The number of milliseconds to delay before retrying.\n   */\n  delay?: number;\n  /**\n   * Array of http status codes to retry. If undefined, all requests are retried.\n   */\n  httpStatusRetry?: Array<number>;\n  /**\n   * If true, each retry delay will be multiplied by the current retry count.\n   */\n  backoff?: boolean;\n}\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: DelayedRetryInterceptor,\n      multi: true\n    }\n  ]\n})\nexport class DelayedRetryModule {\n  constructor(@Optional() @SkipSelf() parentModule?: DelayedRetryModule) {\n    if (parentModule) {\n      throw new Error('DelayedRetryModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n  static forRoot(config?: HttpRetryConfig): ModuleWithProviders<DelayedRetryModule> {\n    return {\n      ngModule: DelayedRetryModule,\n      providers: [{ provide: HTTP_RETRY_CONFIG, useValue: config }]\n    };\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DelayedRetryInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DynamicFormsModule",
            "id": "module-DynamicFormsModule-686e22fc8d754bf0d2beb8f060080658b1156867534c76834f55d1f2e5cedde7453e7a55b544307a30a1d015f8a466152b532007a529a4320e784dbba90f246d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/forms/dynamic-forms.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BaseControlComponent } from './components/base-control/base-control.component';\nimport { TextInputComponent } from './components/text-input/text-input.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DynamicFormGroupComponent } from './components/dynamic-form-group/dynamic-form-group.component';\nimport { ViewListItemComponent } from './components/view-list-item/view-list-item.component';\nimport { SharedModule } from '@shared/shared.module';\nimport { ViewCombinationComponent } from './components/view-combination/view-combination.component';\nimport { RadioGroupComponent } from './components/radio-group/radio-group.component';\n@NgModule({\n  declarations: [BaseControlComponent, TextInputComponent, ViewListItemComponent, DynamicFormGroupComponent, ViewCombinationComponent, RadioGroupComponent],\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, SharedModule],\n  exports: [TextInputComponent, ViewListItemComponent, DynamicFormGroupComponent, ViewCombinationComponent, RadioGroupComponent]\n})\nexport class DynamicFormsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BaseControlComponent"
                        },
                        {
                            "name": "DynamicFormGroupComponent"
                        },
                        {
                            "name": "RadioGroupComponent"
                        },
                        {
                            "name": "TextInputComponent"
                        },
                        {
                            "name": "ViewCombinationComponent"
                        },
                        {
                            "name": "ViewListItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DynamicFormGroupComponent"
                        },
                        {
                            "name": "RadioGroupComponent"
                        },
                        {
                            "name": "TextInputComponent"
                        },
                        {
                            "name": "ViewCombinationComponent"
                        },
                        {
                            "name": "ViewListItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GlobalErrorStateModule",
            "id": "module-GlobalErrorStateModule-560817f779890eb39d608d4280aca43fd9333226439458d84b3dace06029e95f58a7f98e18fa2df4332d8acb0e9abb7a83f2e3b61f026b0ab4e5933ee9de2ab4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/store/global-error/global-error-state.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StoreModule } from '@ngrx/store';\nimport { globalErrorReducer, STORE_GLOBAL_ERROR_KEY } from '@store/global-error/reducers/global-error-service.reducer';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, StoreModule.forFeature(STORE_GLOBAL_ERROR_KEY, globalErrorReducer)]\n})\nexport class GlobalErrorStateModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InterceptorModule",
            "id": "module-InterceptorModule-54907881fd31aeacb0119098b0e6b3d7f7cad4df622d7c9beae503d5f2e5710c9b570d24879913118ee0c4687bbd1590cee6e43fc6fa48796b3b9e0a705aa649",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/interceptors/interceptor.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DelayedRetryModule } from './delayed-retry/delayed-retry.module';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, DelayedRetryModule.forRoot({ count: 3, delay: 2000, httpStatusRetry: [504], backoff: true })]\n})\nexport class InterceptorModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DelayedRetryModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RouterStateModule",
            "id": "module-RouterStateModule-7ba2a60a8ab928d4d71789a920813feaff51d8c0422e513fc8083c94deba09963ab1acefec28282579dcdf05f8b03576896328c8494304a65aa1745aacf405c9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/store/router/router-state.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { routerReducer, StoreRouterConnectingModule } from '@ngrx/router-store';\nimport { StoreModule } from '@ngrx/store';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, StoreModule.forFeature('router', routerReducer), StoreRouterConnectingModule.forRoot()]\n})\nexport class RouterStateModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-83b902c6187a411956b91591b1ebfaee546b37efee149b5d1447233421ec50c8f75a3ac0ab048ac4cff98dc2fb8e1da8e242a056117f86eae55398ecc4523d7b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DefaultNullOrEmpty } from './pipes/default-null-or-empty/default-null-or-empty.pipe';\n\n@NgModule({\n  declarations: [DefaultNullOrEmpty],\n  imports: [CommonModule],\n  exports: [DefaultNullOrEmpty]\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultNullOrEmpty"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DefaultNullOrEmpty"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpinnerStateModule",
            "id": "module-SpinnerStateModule-fab0f92e0f5f06300fb50b379ec93e90658b59ed10d4ada34b31cdcae04bd48b3702931ac970605ff3de403a347cc84231e60399ea0bfcbe0c2b70f0a70f45e8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/store/spinner/spinner-state.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StoreModule } from '@ngrx/store';\nimport { spinnerReducer, STORE_SPINNER_KEY } from '@store/spinner/reducers/spinner.reducer';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, StoreModule.forFeature(STORE_SPINNER_KEY, spinnerReducer)]\n})\nexport class SpinnerStateModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TechnicalRecordsStateModule",
            "id": "module-TechnicalRecordsStateModule-821e75ddbc699ef5100bc95b0e139953ec1397ec9b373a8364a3e4c4780b88b4ed7a3fd1b78ed52dc567e61d0b16c62c451322d0edf537a0f4522394da85c05a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/store/technical-records/technical-records-state.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StoreModule } from '@ngrx/store';\nimport { STORE_FEATURE_TECHNICAL_RECORDS_KEY, vehicleTechRecordReducer } from './technical-record-service.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { TechnicalRecordServiceEffects } from './technical-record-service.effects';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, StoreModule.forFeature(STORE_FEATURE_TECHNICAL_RECORDS_KEY, vehicleTechRecordReducer), EffectsModule.forFeature([TechnicalRecordServiceEffects])]\n})\nexport class TechnicalRecordsStateModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TestRecordsModule",
            "id": "module-TestRecordsModule-825f9bb43b4bb455e49f8cbf7892967866f8087d6e10f37d4cdf57c17cb86e3f9e27099e051216364204a988819d40ac3f82984ed86aa3090a3fcb032d16ae9d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/test-records/test-records.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SharedModule } from '@shared/shared.module';\nimport { DynamicFormsModule } from '../../forms/dynamic-forms.module';\nimport { TestRecordsRoutingModule } from './test-records-routing.module';\nimport { TestRecordsComponent } from './test-records.component';\nimport { TestRecordComponent } from './views/test-result/test-records.component';\n\n@NgModule({\n  declarations: [TestRecordsComponent, TestRecordComponent],\n  imports: [CommonModule, TestRecordsRoutingModule, DynamicFormsModule, SharedModule]\n})\nexport class TestRecordsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TestRecordComponent"
                        },
                        {
                            "name": "TestRecordsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DynamicFormsModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TestRecordsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TestRecordsRoutingModule",
            "id": "module-TestRecordsRoutingModule-7b5091c3f8f2331d72ff8b23a943390fcd50af74327ec14547edd278f70ca205419cef1b7c65c8ef23d137d019e2df563e16805f6c12d4c81329950aa3d14fa3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/test-records/test-records-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MsalGuard } from '@azure/msal-angular';\nimport { TestRecordsComponent } from './test-records.component';\nimport { TestRecordComponent } from './views/test-result/test-records.component';\n\nconst routes: Routes = [\n  {\n    path: ':systemId',\n    component: TestRecordsComponent,\n    canActivateChild: [MsalGuard],\n    children: [\n      {\n        path: 'test-result/:testResultId',\n        component: TestRecordComponent,\n        data: { title: 'Test Result' }\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class TestRecordsRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TestRecordsStateModule",
            "id": "module-TestRecordsStateModule-f9298ef5afa3c3de88cf7b0fb847e0a4c99ba86a586a21d8dcd068d566193dc9d454fc9524f950525d48c0707de2e9a190df1a174bb23cb958cbdc4ebc374e9c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/store/test-records/test-records.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { TestResultsEffects } from './effects/test-records.effects';\nimport { STORE_FEATURE_TEST_RESULTS_KEY, testResultsReducer } from './reducers/test-records.reducer';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, StoreModule.forFeature(STORE_FEATURE_TEST_RESULTS_KEY, testResultsReducer), EffectsModule.forFeature([TestResultsEffects])]\n})\nexport class TestRecordsStateModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserStateModule",
            "id": "module-UserStateModule-bb7b4a245c7ba6d63f4b3a5a02a87ffbda205ee29a21ac2eb7a6e269f4fda52f31255982623cf1bcd40cca27079990ddfe723a611a79c1b040e162f69c0ba6ca",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/store/user/user-state.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ActionReducer, MetaReducer, StoreModule } from '@ngrx/store';\nimport { localStorageSync } from 'ngrx-store-localstorage';\nimport { STORE_FEATURE_USER_KEY, userServiceReducer } from './user-service.reducer';\n\nexport function localStorageSyncReducer(reducer: ActionReducer<any>): ActionReducer<any> {\n  return localStorageSync({ keys: ['username'], rehydrate: true })(reducer);\n}\n\nconst metaReducers: Array<MetaReducer<any, any>> = [localStorageSyncReducer];\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, StoreModule.forFeature(STORE_FEATURE_USER_KEY, userServiceReducer, { metaReducers })]\n})\nexport class UserStateModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "addError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/global-error/actions/global-error.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Global Error Service] Add error', props<GlobalError>())"
            },
            {
                "name": "clearError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/global-error/actions/global-error.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Global Error Service] Clear Error')"
            },
            {
                "name": "createMockHgv",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/mock-vehicle-technical-record.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(systemNumber: number): VehicleTechRecordModel =>\n  createMock<VehicleTechRecordModel>({\n    systemNumber: `SYS${String(systemNumber + 1).padStart(4, '0')}`,\n    vin: `XMGDE02FS0H0${12344 + systemNumber + 1}`,\n    vrms: [\n      {\n        vrm: `KP${String(systemNumber + 1).padStart(2, '0')} ABC`,\n        isPrimary: true\n      },\n      {\n        vrm: '609859Z',\n        isPrimary: false\n      }\n    ],\n    techRecord: [\n      {\n        statusCode: StatusCodes.CURRENT,\n        vehicleType: VehicleTypes.HGV,\n        regnDate: '1234',\n        manufactureYear: 2022,\n        noOfAxles: 2,\n        axles: [\n          {\n            parkingBrakeMrk: false\n          },\n          {\n            parkingBrakeMrk: true\n          }\n        ],\n        brakes: {\n          dtpNumber: '1234'\n        },\n        speedLimiterMrk: true,\n        tachoExemptMrk: true,\n        euroStandard: '123',\n        roadFriendly: true,\n        fuelPropulsionSystem: FuelTypes.HYBRID,\n        drawbarCouplingFitted: true,\n        vehicleClass: {\n          description: 'Description'\n        },\n        vehicleConfiguration: VehicleConfigurations.ARTICULATED,\n        offRoad: true,\n        euVehicleCategory: EuVehicleCategories.M1,\n        emissionsLimit: 1234,\n        departmentalVehicleMarker: true\n      }\n    ]\n  })"
            },
            {
                "name": "createMockPsv",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/mock-vehicle-technical-record.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(systemNumber: number): VehicleTechRecordModel =>\n  createMock<VehicleTechRecordModel>({\n    systemNumber: `SYS${String(systemNumber + 1).padStart(4, '0')}`,\n    vin: `XMGDE02FS0H0${12344 + systemNumber + 1}`,\n    vrms: [\n      {\n        vrm: `KP${String(systemNumber + 1).padStart(2, '0')} ABC`,\n        isPrimary: true\n      },\n      {\n        vrm: '609859Z',\n        isPrimary: false\n      },\n      {\n        vrm: '609959Z',\n        isPrimary: false\n      }\n    ],\n    techRecord: [\n      {\n        statusCode: StatusCodes.CURRENT,\n        vehicleType: VehicleTypes.PSV,\n        regnDate: '1234',\n        manufactureYear: 2022,\n        noOfAxles: 2,\n        brakes: {\n          dtpNumber: '1234'\n        },\n        axles: [\n          {\n            axleNumber: 1,\n            parkingBrakeMrk: false\n          },\n          {\n            axleNumber: 2,\n            parkingBrakeMrk: true\n          }\n        ],\n        speedLimiterMrk: true,\n        tachoExemptMrk: true,\n        euroStandard: '123',\n        fuelPropulsionSystem: FuelTypes.HYBRID,\n        vehicleClass: {\n          description: 'Description'\n        },\n        vehicleConfiguration: VehicleConfigurations.ARTICULATED,\n        euVehicleCategory: EuVehicleCategories.M1,\n        emissionsLimit: 1234,\n        seatsLowerDeck: 1234,\n        seatsUpperDeck: 1234,\n        standingCapacity: 1234,\n        vehicleSize: VehicleSizes.SMALL,\n        numberOfSeatbelts: '1234',\n        seatbeltInstallationApprovalDate: '1234',\n        departmentalVehicleMarker: true\n      }\n    ]\n  })"
            },
            {
                "name": "createMockTrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/mock-vehicle-technical-record.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(systemNumber: number): VehicleTechRecordModel =>\n  createMock<VehicleTechRecordModel>({\n    systemNumber: `SYS${String(systemNumber + 1).padStart(4, '0')}`,\n    vin: `XMGDE02FS0H0${12344 + systemNumber + 1}`,\n    vrms: [\n      {\n        vrm: `KP${String(systemNumber + 1).padStart(2, '0')} ABC`,\n        isPrimary: true\n      },\n      {\n        vrm: '609859Z',\n        isPrimary: false\n      }\n    ],\n    techRecord: [\n      {\n        statusCode: StatusCodes.CURRENT,\n        vehicleType: VehicleTypes.TRL,\n        regnDate: '1234',\n        firstUseDate: '1234',\n        manufactureYear: 2022,\n        noOfAxles: 2,\n        brakes: {\n          dtpNumber: '1234'\n        },\n        axles: [\n          {\n            parkingBrakeMrk: false\n          },\n          {\n            parkingBrakeMrk: true\n          }\n        ],\n        suspensionType: '1',\n        roadFriendly: true,\n        drawbarCouplingFitted: true,\n        vehicleClass: {\n          description: 'Description'\n        },\n        vehicleConfiguration: VehicleConfigurations.ARTICULATED,\n        couplingType: '1',\n        maxLoadOnCoupling: 1234,\n        frameDescription: FrameDescriptions.FRAME_SECTION,\n        euVehicleCategory: EuVehicleCategories.M1,\n        departmentalVehicleMarker: true\n      }\n    ]\n  })"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/components/radio-group/radio-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  label: 'Color picker',\n  name: 'color',\n  options: [\n    { label: 'Red', value: 'red' },\n    { label: 'Yellow', value: 'yellow', hint: 'this is the colour of the sun' },\n    { label: 'Blue', value: 'blue', hint: 'this is the colour of the sea' }\n  ],\n  hint: 'These are the three primary colours'\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/components/radio-group/radio-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Enabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/components/radio-group/radio-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "setenv.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "argv.environment"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.deploy.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  VTM_CLIENT_ID: \"54d151b6-2ca8-4018-8c70-f9ee600d91c7\",\n  VTM_AUTHORITY_ID: \"https://login.microsoftonline.com/6c448d90-4ca1-4caf-ab59-0a2aa67d7801\",\n  VTM_REDIRECT_URI: 'http://localhost:4200',\n  VTM_API_URI: 'http://localhost:3005',\n  VTM_API_CLIENT_ID: \"11be8c44-22f5-43bf-b9bb-50467a26cfa7\",\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  VTM_CLIENT_ID: '',\n  VTM_AUTHORITY_ID: '',\n  VTM_REDIRECT_URI: '/',\n  VTM_API_URI: '',\n  VTM_API_CLIENT_ID: ''\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  VTM_CLIENT_ID: '',\n  VTM_AUTHORITY_ID: '',\n  VTM_REDIRECT_URI: '/',\n  VTM_API_URI: '',\n  VTM_API_CLIENT_ID: ''\n}"
            },
            {
                "name": "environmentFileContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "setenv.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`export const environment = {\n  production: ${isProduction},\n  VTM_CLIENT_ID: \"${process.env['VTM_CLIENT_ID']}\",\n  VTM_AUTHORITY_ID: \"${process.env['VTM_AUTHORITY_ID']}\",\n  VTM_REDIRECT_URI: 'http://localhost:4200',\n  VTM_API_URI: 'http://localhost:3005',\n  VTM_API_CLIENT_ID: \"${process.env['VTM_API_CLIENT_ID']}\",\n};\n`"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/global-error/global-error.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: { errorMessage$: 'error' }\n})"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/search/search.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ErrorMessageMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/utils/error-message-map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  ['required']: (err: boolean, label: string) => `${label ? label : 'This filed'} is required`\n}"
            },
            {
                "name": "fakeRecord",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/test-record-summary/test-record-summary.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TestResultModel",
                "defaultValue": "mockTestResult()"
            },
            {
                "name": "fetchTestResults",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/actions/test-records.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[API/test-results] Fetch All')"
            },
            {
                "name": "fetchTestResultsBySystemId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/actions/test-records.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[API/test-results] Fetch All By systemId', props<{ systemId: string }>())"
            },
            {
                "name": "fetchTestResultsBySystemIdFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/actions/test-records.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[API/test-results] Fetch All By systemId Failed', props<GlobalError>())"
            },
            {
                "name": "fetchTestResultsBySystemIdSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/actions/test-records.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[API/test-results] Fetch All By systemId Success', props<{ payload: Array<TestResultModel> }>())"
            },
            {
                "name": "fetchTestResultsFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/actions/test-records.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[API/test-results] Fetch All Failed', props<GlobalError>())"
            },
            {
                "name": "fetchTestResultsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/actions/test-records.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[API/test-results] Fetch All Success', props<{ payload: Array<TestResultModel> }>())"
            },
            {
                "name": "getByVIN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/technical-records/technical-record-service.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Technical Record Service] GetByVIN', props<{ vin: string }>())"
            },
            {
                "name": "getByVINFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/technical-records/technical-record-service.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Technical Record Service] GetByVIN Failure', props<GlobalError>())"
            },
            {
                "name": "getByVINSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/technical-records/technical-record-service.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Technical Record Service] GetByVIN Success', props<{ vehicleTechRecords: Array<VehicleTechRecordModel> }>())"
            },
            {
                "name": "getErrorMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/global-error/selectors/global-error.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getGlobalErrorState, (state) => {\n  return state.globalError;\n})"
            },
            {
                "name": "getGlobalErrorState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/global-error/reducers/global-error-service.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<GlobalErrorState>(STORE_GLOBAL_ERROR_KEY)"
            },
            {
                "name": "getSpinner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/spinner/selectors/spinner.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getSpinnerState, (state) => {\n  return state.showSpinner;\n})"
            },
            {
                "name": "getSpinnerState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/spinner/reducers/spinner.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<SpinnerState>(STORE_SPINNER_KEY)"
            },
            {
                "name": "getUserState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user/user-service.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<UserServiceState>(STORE_FEATURE_USER_KEY)"
            },
            {
                "name": "getVehicleTechRecordState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/technical-records/technical-record-service.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<TechnicalRecordServiceState>(STORE_FEATURE_TECHNICAL_RECORDS_KEY)"
            },
            {
                "name": "globalErrorReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/global-error/reducers/global-error-service.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialGlobalErrorState,\n  on(GlobalErrorActions.clearError, TechnicalRecordServiceActions.getByVIN, TestResultActions.fetchTestResults, TestResultActions.fetchTestResultsBySystemId, (state) => ({ ...state, globalError: [] })),\n  on(GlobalErrorActions.addError, TechnicalRecordServiceActions.getByVINFailure, TestResultActions.fetchTestResultsFailed, TestResultActions.fetchTestResultsBySystemIdFailed, (state, {error, anchorLink}) => ({...state, globalError: [...state.globalError, {error: error, anchorLink: anchorLink}]}))\n)"
            },
            {
                "name": "globalErrorState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/global-error/reducers/global-error-service.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getGlobalErrorState, (state) => state.globalError)"
            },
            {
                "name": "HgvTechRecord",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/templates/hgv/hgv-tech-record.template.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormNode",
                "defaultValue": "{\n  name: 'techRecordSummary',\n  type: FormNodeTypes.GROUP,\n  label: 'Vehicle Summary',\n  viewType: FormNodeViewTypes.SUBHEADING,\n  children: [\n    {\n      name: 'vehicleType',\n      label: 'Vehicle type',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.VEHICLETYPE\n    },\n    {\n      name: 'regnDate',\n      label: 'Date of first registration',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.DATE\n    },\n    {\n      name: 'manufactureYear',\n      label: 'Year of manufacture',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'noOfAxles',\n      label: 'Number of axles',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'brakes',\n      label: 'DTP number',\n      value: '',\n      children: [\n        {\n          name: 'dtpNumber',\n          label: 'DTP number',\n          value: '',\n\n          type: FormNodeTypes.CONTROL,\n          viewType: FormNodeViewTypes.STRING\n        }\n      ],\n      type: FormNodeTypes.GROUP,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'axles',\n      value: '',\n      type: FormNodeTypes.ARRAY,\n      children: [\n        {\n          name: '0',\n          label: 'Axel',\n          value: '',\n          type: FormNodeTypes.GROUP,\n          children: [\n            {\n              name: 'parkingBrakeMrk',\n              label: 'Axles fitted with a parking brake',\n              value: '',\n\n              type: FormNodeTypes.CONTROL,\n              viewType: FormNodeViewTypes.STRING\n            }\n          ]\n        }\n      ]\n    },\n    {\n      name: 'speedLimiterMrk',\n      label: 'Speed limiter exempt',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'tachoExemptMrk',\n      label: 'Tacho exempt',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'euroStandard',\n      label: 'Euro standard',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'roadFriendly',\n      label: 'Road friendly suspension',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'fuelPropulsionSystem',\n      label: 'Fuel / propulsion system',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'drawbarCouplingFitted',\n      label: 'Drawbar coupling fitted',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'vehicleClass',\n      label: 'Vehicle class',\n      value: '',\n      type: FormNodeTypes.GROUP,\n      children: [\n        {\n          name: 'description',\n          label: 'Vehicle class',\n          value: '',\n\n          type: FormNodeTypes.CONTROL,\n          viewType: FormNodeViewTypes.STRING\n        }\n      ]\n    },\n    {\n      name: 'vehicleConfiguration',\n      label: 'Vehicle configuration',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'offRoad',\n      label: 'Off road vehicle',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'euVehicleCategory',\n      label: 'EU vehicle category',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'emissionsLimit',\n      label: 'Emission limit (plate value)',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'departmentalVehicleMarker',\n      label: 'Departmental vehicle marker',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    }\n  ]\n}"
            },
            {
                "name": "HTTP_RETRY_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/interceptors/delayed-retry/delayed-retry.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<HttpRetryConfig>('HttpRetryConfig')"
            },
            {
                "name": "Initial",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/search/search.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "initialAppState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  [STORE_FEATURE_USER_KEY]: initialUserState,\n  [STORE_FEATURE_TECHNICAL_RECORDS_KEY]: initialTechnicalRecordsState,\n  [STORE_FEATURE_TEST_RESULTS_KEY]: initialTestResultsState,\n  [STORE_GLOBAL_ERROR_KEY]: initialGlobalErrorState,\n  [STORE_SPINNER_KEY]: initialSpinnerState\n}"
            },
            {
                "name": "initialGlobalErrorState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/global-error/reducers/global-error-service.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "GlobalErrorState",
                "defaultValue": "{\n  globalError: []\n}"
            },
            {
                "name": "initialSpinnerState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/spinner/reducers/spinner.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SpinnerState",
                "defaultValue": "{\n  showSpinner: false\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/technical-records/technical-record-service.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TechnicalRecordServiceState",
                "defaultValue": "{\n  vehicleTechRecords: []\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user/user-service.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "UserServiceState",
                "defaultValue": "{\n  username: '(Not logged in)'\n}"
            },
            {
                "name": "initialTestResultsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/reducers/test-records.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "testResultAdapter.getInitialState({ error: '' })"
            },
            {
                "name": "Initilisation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/components/radio-group/radio-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "isProduction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "setenv.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "environment === 'prod'"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/search/search.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user/user-service.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[User Service] Login', props<{ name: string }>())"
            },
            {
                "name": "Logout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user/user-service.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[User Service] Logout')"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "!environment.production ? [] : []"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user/user-state.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<MetaReducer<any, any>>",
                "defaultValue": "[localStorageSyncReducer]"
            },
            {
                "name": "middlewares",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "mock-api/mock-api-server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "jsonServer.defaults()"
            },
            {
                "name": "mock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "jest-global-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  let storage: { [key: string]: any } = {};\n  return {\n    getItem: (key: string) => (key in storage ? storage[key] : null),\n    setItem: (key: string, value: any) => (storage[key] = value || ''),\n    removeItem: (key: string) => delete storage[key],\n    clear: () => (storage = {})\n  };\n}"
            },
            {
                "name": "mockTestResult",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/mock-test-result.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(i: number = 0) =>\n  createMock<TestResultModel>({\n    testResultId: `TestResultId${String(i + 1).padStart(4, '0')}`,\n\n    systemNumber: 'SYS0001',\n    vin: 'XMGDE02FS0H012345',\n    vrm: 'KP02 ABC',\n\n    createdAt: new Date().toISOString(),\n    testStartTimestamp: new Date().toISOString(),\n\n    testTypes: [...mockTestTypeList()],\n\n    trailerId: `C${String(i + 1).padStart(5, '0')}`,\n    countryOfRegistration: CountryOfRegistration.GreatBritainandNorthernIreland_GB,\n    euVehicleCategory: EuVehicleCategory.M3,\n    odometerReading: 100,\n    odometerReadingUnits: OdometerReadingUnits.KILOMETERS,\n    reasonForCreation: 'mock test result data',\n    preparerName: 'Durrell Truck & Van Centre',\n    preparerId: 'CM2254'\n  })"
            },
            {
                "name": "mockTestResultList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/mock-test-result.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(items: number = 1) => createMockList<TestResultModel>(items, (i) => mockTestResult(i))"
            },
            {
                "name": "mockTestTypeList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/mock-test-result.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(numberOfItems: number = 1) =>\n  createMockList<TestType>(numberOfItems, (i: number) => {\n    const now = new Date();\n    const nextYear = new Date().setFullYear(now.getFullYear());\n\n    return createMock<TestType>({\n      testNumber: `TestNumber${String(i + 1).padStart(4, '0')}`,\n\n      testCode: `Test${i}`,\n      testTypeName: `Test Type Name ${i}`,\n\n      testTypeStartTimestamp: now.toISOString(),\n      testTypeEndTimestamp: now.setFullYear(now.getFullYear() + 1),\n      testExpiryDate: nextYear,\n\n      certificateNumber: `CertNumber${String(i + 1).padStart(4, '0')}`,\n      reasonForAbandoning: 'The vehicle was not submitted for test at the appointed time',\n      additionalCommentsForAbandon: 'The vehicle was not submitted for test at the appointed time',\n      testAnniversaryDate: now.setFullYear(now.getFullYear() - 1),\n      prohibitionIssued: false,\n      testResult: 'Pass',\n\n      emissionStandard: Emissions.EmissionStandard.Euro3,\n      smokeTestKLimitApplied: 'yes',\n      fuelType: Emissions.FuelType.Diesel,\n      modType: {\n        code: Emissions.ModTypeCode.g,\n        description: Emissions.ModeTypeDescription.Engine\n      },\n      modificationTypeUsed: 'modifications number ' + Math.round(Math.random() * 1000).toString(),\n      particulateTrapFitted: 'particulate trap ' + Math.round(Math.random() * 1000).toString(),\n      particulateTrapSerialNumber: 'ABC' + Math.round(Math.random() * 1000).toString()\n    });\n  })"
            },
            {
                "name": "mockVehicleTechnicalRecord",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/mock-vehicle-technical-record.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(vehicleType: VehicleTypes = VehicleTypes.PSV, systemNumber: number = 0) => {\n  switch (vehicleType) {\n    case VehicleTypes.HGV:\n      return createMockHgv(systemNumber);\n    case VehicleTypes.TRL:\n      return createMockTrl(systemNumber);\n    default:\n      return createMockPsv(systemNumber);\n  }\n}"
            },
            {
                "name": "mockVehicleTechnicalRecordList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/mock-vehicle-technical-record.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(vehicleType: VehicleTypes = VehicleTypes.PSV, items: number = 1) => createMockList<VehicleTechRecordModel>(items, (systemNumber) => mockVehicleTechnicalRecord(vehicleType, systemNumber))"
            },
            {
                "name": "NoErrors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/global-error/global-error.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {}\n})"
            },
            {
                "name": "NoRecords",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/test-record-summary/test-record-summary.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {}\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {}\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/vehicle-technical-record/vehicle-technical-record.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/home/home.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {}\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/footer/footer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {}\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/header/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {\n    username: 'username'\n  }\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/home/components/home-button/home-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {}\n})"
            },
            {
                "name": "PsvAnnual",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/templates/psv/psv-annual.template.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormNode",
                "defaultValue": "{\n  name: 'psvAnnualTest',\n  label: 'Annual test',\n  type: FormNodeTypes.GROUP,\n  children: [\n    {\n      name: 'vehicleSection',\n      label: 'Vehicle',\n      type: FormNodeTypes.SECTION\n    },\n    {\n      name: 'vin',\n      label: 'VIN/chassis number',\n      value: '',\n\n      type: FormNodeTypes.CONTROL\n    },\n    {\n      name: 'vrm',\n      label: 'VRM',\n      value: '',\n\n      type: FormNodeTypes.CONTROL\n    },\n    {\n      name: 'trailerId',\n      label: 'Trailer ID',\n      value: '',\n\n      type: FormNodeTypes.CONTROL\n    },\n    {\n      name: 'countryOfRegistration',\n      label: 'Country Of Registration',\n      value: '',\n\n      type: FormNodeTypes.CONTROL\n    },\n    {\n      name: 'euVehicleCategory',\n      label: 'EU Vehicle Category',\n      value: '',\n\n      type: FormNodeTypes.CONTROL\n    },\n    {\n      name: 'odometerCombination',\n      label: 'Odometer',\n      type: FormNodeTypes.COMBINATION,\n      options: {\n        leftComponentName: 'odometerReading',\n        rightComponentName: 'odometerReadingUnits',\n        separator: ' '\n      }\n    },\n    {\n      name: 'odometerReading',\n      label: 'Odometer Reading',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.HIDDEN\n    },\n    {\n      name: 'odometerReadingUnits',\n      label: 'Odometer Reading Units',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.HIDDEN\n    },\n    {\n      name: 'preparerCombination',\n      label: 'Preparer',\n      type: FormNodeTypes.COMBINATION,\n      options: {\n        leftComponentName: 'preparerName',\n        rightComponentName: 'preparerId',\n        separator: ' - '\n      }\n    },\n    {\n      name: 'preparerName',\n      label: 'Preparer Name',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.HIDDEN\n    },\n    {\n      name: 'preparerId',\n      label: 'Preparer ID',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.HIDDEN\n    },\n    {\n      name: 'testSection',\n      label: 'Test',\n      type: FormNodeTypes.SECTION\n    },\n    {\n      name: 'createdAt',\n      label: 'Created',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.DATE\n    },\n    {\n      name: 'testStartTimestamp',\n      label: 'Test Date',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.DATE\n    },\n    {\n      name: 'testTypes',\n      label: 'Test Types',\n      type: FormNodeTypes.ARRAY,\n      children: [\n        {\n          name: 'test0',\n          type: FormNodeTypes.GROUP,\n          children: [\n            {\n              name: 'testCode',\n              label: 'Test Code',\n              value: '',\n\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'testResult',\n              label: 'Result',\n              value: '',\n\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'testTypeName',\n              label: 'Description',\n              value: '',\n\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'certificateNumber',\n              label: 'Certificate number',\n              value: '',\n\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'testNumber',\n              label: 'Test Number',\n              value: '',\n\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'testExpiryDate',\n              label: 'Expiry Date',\n              value: '',\n\n              type: FormNodeTypes.CONTROL,\n              viewType: FormNodeViewTypes.DATE\n            },\n            {\n              name: 'reasonForAbandoning',\n              type: FormNodeTypes.CONTROL,\n              label: 'Reason for abandoning',\n              value: ''\n            },\n            {\n              name: 'additionalCommentsForAbandon',\n              type: FormNodeTypes.CONTROL,\n              value: '',\n              label: 'Additional details for abandoning'\n            },\n            {\n              name: 'testAnniversaryDate',\n              type: FormNodeTypes.CONTROL,\n              value: '',\n              label: 'Anniversary date',\n              viewType: FormNodeViewTypes.DATE\n            },\n            {\n              name: 'testTypeStartTimestamp',\n              type: FormNodeTypes.CONTROL,\n              value: '',\n              label: 'Start time',\n              viewType: FormNodeViewTypes.TIME\n            },\n            {\n              name: 'testTypeEndTimestamp',\n              type: FormNodeTypes.CONTROL,\n              value: '',\n              label: 'End time',\n              viewType: FormNodeViewTypes.TIME\n            },\n            {\n              name: 'prohibitionIssued',\n              type: FormNodeTypes.CONTROL,\n              value: '',\n              label: 'Prohibition issued',\n              options: [\n                { value: true, label: 'Yes' },\n                { value: false, label: 'No' }\n              ]\n            },\n            {\n              name: '',\n              label: 'Emissions',\n              type: FormNodeTypes.SECTION\n            },\n            {\n              name: 'emissionStandard',\n              label: 'Emissions standard',\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'smokeTestKLimitApplied',\n              label: 'Smoke test K limit applied',\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'fuelType',\n              label: 'Fuel type',\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'modType',\n              label: 'Modification Type',\n              type: FormNodeTypes.GROUP,\n              children: [\n                {\n                  name: 'code',\n                  label: 'Modification code',\n                  type: FormNodeTypes.CONTROL\n                },\n                {\n                  name: 'description',\n                  label: 'Modification description',\n                  type: FormNodeTypes.CONTROL\n                }\n              ]\n            },\n            {\n              name: 'modificationTypeUsed',\n              label: 'Modification type used',\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'particulateTrapFitted',\n              label: 'Particulate trap fitted',\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'particulateTrapSerialNumber',\n              label: 'Particulate trap serial number',\n              type: FormNodeTypes.CONTROL\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}"
            },
            {
                "name": "PsvTechRecord",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/templates/psv/psv-tech-record.template.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormNode",
                "defaultValue": "{\n  name: 'techRecordSummary',\n  type: FormNodeTypes.GROUP,\n  label: 'Vehicle Summary',\n  viewType: FormNodeViewTypes.SUBHEADING,\n  children: [\n    {\n      name: 'vehicleType',\n      label: 'Vehicle type',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.VEHICLETYPE\n    },\n    {\n      name: 'regnDate',\n      label: 'Date of first registration',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.DATE\n    },\n    {\n      name: 'manufactureYear',\n      label: 'Year of manufacture',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'noOfAxles',\n      label: 'Number of axles',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'brakes',\n      label: 'DTP number',\n      value: '',\n      children: [\n        {\n          name: 'dtpNumber',\n          label: 'DTP number',\n          value: '',\n\n          type: FormNodeTypes.CONTROL,\n          viewType: FormNodeViewTypes.STRING\n        }\n      ],\n      type: FormNodeTypes.GROUP,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'axles',\n      value: '',\n      type: FormNodeTypes.ARRAY,\n      children: [\n        {\n          name: '0',\n          label: 'Axel',\n          value: '',\n          type: FormNodeTypes.GROUP,\n          children: [\n            {\n              name: 'parkingBrakeMrk',\n              label: 'Axles fitted with a parking brake',\n              value: '',\n\n              type: FormNodeTypes.CONTROL,\n              viewType: FormNodeViewTypes.STRING\n            }\n          ]\n        }\n      ]\n    },\n    {\n      name: 'speedLimiterMrk',\n      label: 'Speed limiter exempt',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'tachoExemptMrk',\n      label: 'Tacho exempt',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'euroStandard',\n      label: 'Euro standard',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'fuelPropulsionSystem',\n      label: 'Fuel / propulsion system',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'vehicleClass',\n      label: 'Vehicle class',\n      value: '',\n      type: FormNodeTypes.GROUP,\n      children: [\n        {\n          name: 'description',\n          label: 'Vehicle class',\n          value: '',\n\n          type: FormNodeTypes.CONTROL,\n          viewType: FormNodeViewTypes.STRING\n        }\n      ]\n    },\n    {\n      name: 'vehicleConfiguration',\n      label: 'Vehicle configuration',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'euVehicleCategory',\n      label: 'EU vehicle category',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'emissionsLimit',\n      label: 'Emission limit (plate value)',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'seatsLowerDeck',\n      label: 'Seats lower deck',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'seatsUpperDeck',\n      label: 'Seats upper deck',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'standingCapacity',\n      label: 'Standing capacity',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'vehicleSize',\n      label: 'Vehicle size',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'numberOfSeatbelts',\n      label: 'Number of seat belts',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'seatbeltInstallationApprovalDate',\n      label: 'Seatbelt installation approval date / type approved',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'departmentalVehicleMarker',\n      label: 'Departmental vehicle marker',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    }\n  ]\n}"
            },
            {
                "name": "Record",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/test-record-summary/test-record-summary.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: { testRecords: [fakeRecord] }\n})"
            },
            {
                "name": "Records",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/test-record-summary/test-record-summary.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: { testRecords: [fakeRecord, { ...fakeRecord, testStartTimestamp: '2022-02-02:13.23', vin: 'xthoeu213', testStatus: 'PASSED' }] }\n})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<State>",
                "defaultValue": "{\n  [STORE_FEATURE_USER_KEY]: userServiceReducer,\n  [STORE_FEATURE_TECHNICAL_RECORDS_KEY]: vehicleTechRecordReducer,\n  [STORE_FEATURE_TEST_RESULTS_KEY]: testResultsReducer,\n  [STORE_GLOBAL_ERROR_KEY]: globalErrorReducer,\n  [STORE_SPINNER_KEY]: spinnerReducer\n}"
            },
            {
                "name": "router",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "mock-api/mock-api-server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "jsonServer.router('{}')"
            },
            {
                "name": "selectAllTestResults",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/selectors/test-records.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(testResultsFeatureState, (state) => {\n  return Object.values(state.entities) as TestResultModel[];\n})"
            },
            {
                "name": "selectedTestResultState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/selectors/test-records.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(testResultsEnitities, selectRouteParams, (entities, { testResultId }) => entities[testResultId])"
            },
            {
                "name": "selectRouter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/router/selectors/router.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<RouterReducerState>('appRoutes')"
            },
            {
                "name": "selectTestResultId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/reducers/test-records.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(a: TestResultModel): string => {\n  return a.testResultId;\n}"
            },
            {
                "name": "selectTestResultIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/selectors/test-records.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "selectIds"
            },
            {
                "name": "selectTestResultsEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/selectors/test-records.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "selectEntities"
            },
            {
                "name": "selectTestResultsTotal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/selectors/test-records.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "selectTotal"
            },
            {
                "name": "server",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "mock-api/mock-api-server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "jsonServer.create()"
            },
            {
                "name": "spinnerReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/spinner/reducers/spinner.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialSpinnerState,\n  on(TechnicalRecordServiceActions.getByVIN, TestResultActions.fetchTestResults, TestResultActions.fetchTestResultsBySystemId, (state) => ({ ...state, showSpinner: true })),\n  on(TechnicalRecordServiceActions.getByVINFailure, TechnicalRecordServiceActions.getByVINSuccess,\n     TestResultActions.fetchTestResultsBySystemIdFailed, TestResultActions.fetchTestResultsBySystemIdSuccess,\n     TestResultActions.fetchTestResultsFailed, TestResultActions.fetchTestResultsSuccess,\n      (state) => ({ ...state, showSpinner: false })\n  ),\n)"
            },
            {
                "name": "spinnerState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/spinner/reducers/spinner.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getSpinnerState, (state) => state.showSpinner)"
            },
            {
                "name": "STORE_FEATURE_TECHNICAL_RECORDS_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/technical-records/technical-record-service.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'TechnicalRecords'"
            },
            {
                "name": "STORE_FEATURE_TEST_RESULTS_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/reducers/test-records.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'testRecords'"
            },
            {
                "name": "STORE_FEATURE_USER_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user/user-service.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'user'"
            },
            {
                "name": "STORE_GLOBAL_ERROR_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/global-error/reducers/global-error-service.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'GlobalError'"
            },
            {
                "name": "STORE_SPINNER_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/spinner/reducers/spinner.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Spinner'"
            },
            {
                "name": "targetPath",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "setenv.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "isProduction ? `./src/environments/environment.prod.ts` : `./src/environments/environment.deploy.ts`"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/vehicle-technical-record/vehicle-technical-record.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/search/search.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/header/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {}\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/components/radio-group/radio-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => {\n  const { label, options, name, hint, value = null, disabled = false, validators = [] } = args;\n  const form = new FormGroup({ [name]: new FormControl({ value, disabled }, validators) });\n  return {\n    component: RadioGroupComponent,\n    template: `<form [formGroup]=\"form\"><app-radio-group [label]=\"label\" [hint]=\"hint\" [name]=\"name\" [options]=\"options\" [formControlName]=\"name\"></app-radio-group></form> <pre>{{ form.value | json }}</pre>`,\n    props: {\n      form,\n      label,\n      name,\n      options,\n      hint\n    }\n  };\n}"
            },
            {
                "name": "testResultAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/reducers/test-records.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<TestResultModel>",
                "defaultValue": "createEntityAdapter<TestResultModel>({ selectId: selectTestResultId })"
            },
            {
                "name": "testResultsEnitities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/selectors/test-records.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(testResultsFeatureState, selectTestResultsEntities)"
            },
            {
                "name": "testResultsFeatureState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/reducers/test-records.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<TestResultsState>(STORE_FEATURE_TEST_RESULTS_KEY)"
            },
            {
                "name": "testResultsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/reducers/test-records.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialTestResultsState,\n  on(fetchTestResultsSuccess, (state, action) => testResultAdapter.setAll(action.payload, state)),\n  on(fetchTestResultsBySystemIdSuccess, (state, action) => testResultAdapter.setAll(action.payload, state)),\n  on(fetchTestResultsBySystemIdFailed, (state, { error }) => ({ ...testResultAdapter.setAll([], state), error }))\n)"
            },
            {
                "name": "TrlTechRecord",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/templates/trl/trl-tech-record.template.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormNode",
                "defaultValue": "{\n  name: 'techRecordSummary',\n  type: FormNodeTypes.GROUP,\n  label: 'Vehicle Summary',\n  viewType: FormNodeViewTypes.SUBHEADING,\n  children: [\n    {\n      name: 'vehicleType',\n      label: 'Vehicle type',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.VEHICLETYPE\n    },\n    {\n      name: 'regnDate',\n      label: 'Date of first registration',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.DATE\n    },\n    {\n      name: 'firstUseDate',\n      label: 'First use date',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'manufactureYear',\n      label: 'Year of manufacture',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'noOfAxles',\n      label: 'Number of axles',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'brakes',\n      label: 'DTP number',\n      value: '',\n      children: [\n        {\n          name: 'dtpNumber',\n          label: 'DTP number',\n          value: '',\n\n          type: FormNodeTypes.CONTROL,\n          viewType: FormNodeViewTypes.STRING\n        }\n      ],\n      type: FormNodeTypes.GROUP,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'axles',\n      value: '',\n      type: FormNodeTypes.ARRAY,\n      children: [\n        {\n          name: '0',\n          label: 'Axel',\n          value: '',\n          type: FormNodeTypes.GROUP,\n          children: [\n            {\n              name: 'parkingBrakeMrk',\n              label: 'Axles fitted with a parking brake',\n              value: '',\n\n              type: FormNodeTypes.CONTROL,\n              viewType: FormNodeViewTypes.STRING\n            }\n          ]\n        }\n      ]\n    },\n    {\n      name: 'suspensionType',\n      label: 'Suspension type (optional)',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'roadFriendly',\n      label: 'Road friendly suspension',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'vehicleClass',\n      label: 'Vehicle class',\n      value: '',\n      type: FormNodeTypes.GROUP,\n      children: [\n        {\n          name: 'description',\n          label: 'Vehicle class',\n          value: '',\n\n          type: FormNodeTypes.CONTROL,\n          viewType: FormNodeViewTypes.STRING\n        }\n      ]\n    },\n    {\n      name: 'vehicleConfiguration',\n      label: 'Vehicle configuration',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'couplingType',\n      label: 'Coupling type (optional)',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'maxLoadOnCoupling',\n      label: 'Max load on coupling (optional)',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'frameDescription',\n      label: 'Frame description (optional)',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'euVehicleCategory',\n      label: 'EU vehicle category',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'departmentalVehicleMarker',\n      label: 'Departmental vehicle marker',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    }\n  ]\n}"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "setenv.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('fs')"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "setenv.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('yargs')"
            },
            {
                "name": "username",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user/user-service.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getUserState, (state) => state.username)"
            },
            {
                "name": "userServiceReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user/user-service.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(UserServiceActions.Login, (state, { name }) => ({ username: name })),\n  on(UserServiceActions.Logout, (state) => initialState)\n)"
            },
            {
                "name": "vehicleTechRecordReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/technical-records/technical-record-service.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(getByVIN, (state) => ({ ...state, vehicleTechRecords: [] })),\n  on(getByVINSuccess, (state, { vehicleTechRecords }) => ({ ...state, vehicleTechRecords })),\n  on(getByVINFailure, (state, { error }) => ({ ...state, vehicleTechRecords: [], error }))\n)"
            },
            {
                "name": "vehicleTechRecords",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/technical-records/technical-record-service.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getVehicleTechRecordState, (state) => state.vehicleTechRecords)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/router/selectors/router.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/test-records/selectors/test-records.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "testResultAdapter.getSelectors()"
            }
        ],
        "functions": [
            {
                "name": "localStorageSyncReducer",
                "file": "src/app/store/user/user-state.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionReducer<any>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "MSALGuardConfigFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "MsalGuardConfiguration"
            },
            {
                "name": "MSALInstanceFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "IPublicClientApplication"
            },
            {
                "name": "MSALInterceptorConfigFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "MsalInterceptorConfiguration"
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "CountryOfRegistration",
                "childs": [
                    {
                        "name": "GreatBritainandNorthernIreland_GB",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "gb"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/country-of-registration.enum.ts"
            },
            {
                "name": "EmissionStandard",
                "childs": [
                    {
                        "name": "Euro3PM",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "0.10 g/kWh Euro 3 PM"
                    },
                    {
                        "name": "EuroIVPM",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "0.03 g/kWh Euro IV PM"
                    },
                    {
                        "name": "Euro3",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Euro 3"
                    },
                    {
                        "name": "Euro4",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Euro 4"
                    },
                    {
                        "name": "Euro6",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Euro 6"
                    },
                    {
                        "name": "EuroVI",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Euro VI"
                    },
                    {
                        "name": "FullElectric",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Full Electric"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/emissions.enum.ts"
            },
            {
                "name": "EuVehicleCategories",
                "childs": [
                    {
                        "name": "M1",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "m1"
                    },
                    {
                        "name": "M2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "m2"
                    },
                    {
                        "name": "M3",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "m3"
                    },
                    {
                        "name": "n1",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "n1"
                    },
                    {
                        "name": "n2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "n2"
                    },
                    {
                        "name": "n3",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "n3"
                    },
                    {
                        "name": "o1",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "o1"
                    },
                    {
                        "name": "o2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "o2"
                    },
                    {
                        "name": "o3",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "o3"
                    },
                    {
                        "name": "o4",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "o4"
                    },
                    {
                        "name": "l1e_a",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "l1e-a"
                    },
                    {
                        "name": "l1e",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "l1e"
                    },
                    {
                        "name": "l2e",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "l2e"
                    },
                    {
                        "name": "l3e",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "l3e"
                    },
                    {
                        "name": "l4e",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "l4e"
                    },
                    {
                        "name": "l5e",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "l5e"
                    },
                    {
                        "name": "l6e",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "l6e"
                    },
                    {
                        "name": "l7e",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "l7e"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/vehicle-tech-record.model.ts"
            },
            {
                "name": "EuVehicleCategory",
                "childs": [
                    {
                        "name": "M1",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "m1"
                    },
                    {
                        "name": "M2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "m2"
                    },
                    {
                        "name": "M3",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "m3"
                    },
                    {
                        "name": "N1",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "n1"
                    },
                    {
                        "name": "N2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "n2"
                    },
                    {
                        "name": "N3",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "n3"
                    },
                    {
                        "name": "O1",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "o1"
                    },
                    {
                        "name": "O2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "o2"
                    },
                    {
                        "name": "O3",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "o3"
                    },
                    {
                        "name": "O4",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "o4"
                    },
                    {
                        "name": "L1E_A",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "l1e-a"
                    },
                    {
                        "name": "L1E",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "l1e"
                    },
                    {
                        "name": "L2E",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "l2e"
                    },
                    {
                        "name": "L3E",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "l3e"
                    },
                    {
                        "name": "L4E",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "l4e"
                    },
                    {
                        "name": "L5E",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "l5e"
                    },
                    {
                        "name": "L6E",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "l6e"
                    },
                    {
                        "name": "L7E",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "l7e"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/eu-vehicle-category.enum.ts"
            },
            {
                "name": "FormNodeTypes",
                "childs": [
                    {
                        "name": "ROOT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "root"
                    },
                    {
                        "name": "GROUP",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "group"
                    },
                    {
                        "name": "CONTROL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "control"
                    },
                    {
                        "name": "ARRAY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "array"
                    },
                    {
                        "name": "SECTION",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "section"
                    },
                    {
                        "name": "COMBINATION",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "combination"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/forms/services/dynamic-form.types.ts"
            },
            {
                "name": "FormNodeViewTypes",
                "childs": [
                    {
                        "name": "STRING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "string"
                    },
                    {
                        "name": "DATE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "date"
                    },
                    {
                        "name": "DATETIME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dateTime"
                    },
                    {
                        "name": "TIME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "time"
                    },
                    {
                        "name": "HIDDEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "hidden"
                    },
                    {
                        "name": "VEHICLETYPE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "vehicleType"
                    },
                    {
                        "name": "SUBHEADING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "subHeading"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/forms/services/dynamic-form.types.ts"
            },
            {
                "name": "FrameDescriptions",
                "childs": [
                    {
                        "name": "CHANNEL_SECTION",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Channel section"
                    },
                    {
                        "name": "SPACE_FRAME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Space frame"
                    },
                    {
                        "name": "I_SECTION",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "I section"
                    },
                    {
                        "name": "TUBULAR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Tubular"
                    },
                    {
                        "name": "FRAME_SECTION",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Frame section"
                    },
                    {
                        "name": "OTHER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Other"
                    },
                    {
                        "name": "INTEGRAL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "integral"
                    },
                    {
                        "name": "BOX_SECTION",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Box section"
                    },
                    {
                        "name": "U_SECTION",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "U section"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/vehicle-tech-record.model.ts"
            },
            {
                "name": "FuelType",
                "childs": [
                    {
                        "name": "Diesel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "diesel"
                    },
                    {
                        "name": "GasCng",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "gas-cng"
                    },
                    {
                        "name": "GasLng",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "gas-lng"
                    },
                    {
                        "name": "GasLpg",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "gas-lpg"
                    },
                    {
                        "name": "FuelCell",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "fuel cell"
                    },
                    {
                        "name": "Petrol",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "petrol"
                    },
                    {
                        "name": "FullElectric",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "full electric"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/emissions.enum.ts"
            },
            {
                "name": "FuelTypes",
                "childs": [
                    {
                        "name": "DIESELPETROL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DieselPetrol"
                    },
                    {
                        "name": "HYBRID",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Hybrid"
                    },
                    {
                        "name": "ELECTRIC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Electric"
                    },
                    {
                        "name": "CNG",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CNG"
                    },
                    {
                        "name": "FUELCELL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Fuel cell"
                    },
                    {
                        "name": "LNG",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "LNG"
                    },
                    {
                        "name": "OTHER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Other"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/vehicle-tech-record.model.ts"
            },
            {
                "name": "ModeTypeDescription",
                "childs": [
                    {
                        "name": "ParticulateTrap",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "particulate trap"
                    },
                    {
                        "name": "Engine",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "modification or change of engine"
                    },
                    {
                        "name": "GasEngine",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "gas engine"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/emissions.enum.ts"
            },
            {
                "name": "ModTypeCode",
                "childs": [
                    {
                        "name": "p",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "p"
                    },
                    {
                        "name": "m",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "m"
                    },
                    {
                        "name": "g",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "g"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/emissions.enum.ts"
            },
            {
                "name": "OdometerReadingUnits",
                "childs": [
                    {
                        "name": "KILOMETERS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "kilometers"
                    },
                    {
                        "name": "MILES",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "miles"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/odometer-unit.enum.ts"
            },
            {
                "name": "StatusCodes",
                "childs": [
                    {
                        "name": "ARCHIVED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "archived"
                    },
                    {
                        "name": "CURRENT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "current"
                    },
                    {
                        "name": "PROVISIONAL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "provisional"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/vehicle-tech-record.model.ts"
            },
            {
                "name": "VehicleClassDescriptions",
                "childs": [
                    {
                        "name": "MOTORBIKE_OVER_200CC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "motorbikes over 200cc or with a sidecar"
                    },
                    {
                        "name": "NOT_APPLICABLE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "not applicable"
                    },
                    {
                        "name": "SMALL_PSV",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "small psv (ie: less than or equal to 22 seats)"
                    },
                    {
                        "name": "MOTORBIKE_UPTO_200CC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "motorbikes up to 200cc"
                    },
                    {
                        "name": "TRAILER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "trailer"
                    },
                    {
                        "name": "LARGE_PSV",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "large psv(ie: greater than 23 seats)"
                    },
                    {
                        "name": "THREE_WHEELER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "3 wheelers"
                    },
                    {
                        "name": "HGV",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "heavy goods vehicle"
                    },
                    {
                        "name": "MOT_CLASS_4",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MOT class 4"
                    },
                    {
                        "name": "MOT_CLASS_5",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MOT class 5"
                    },
                    {
                        "name": "MOT_CLASS_7",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MOT class 7"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/vehicle-tech-record.model.ts"
            },
            {
                "name": "VehicleConfigurations",
                "childs": [
                    {
                        "name": "RIGID",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "rigid"
                    },
                    {
                        "name": "ARTICULATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "articulated"
                    },
                    {
                        "name": "CENTRE_AXLE_DRAWBAR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "centre axle drawbar"
                    },
                    {
                        "name": "SEMI_CAR_TRANSPORTER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "semi-car transporter"
                    },
                    {
                        "name": "SEMI_TRAILER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "semi-trailer"
                    },
                    {
                        "name": "LOW_LOADER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "low loader"
                    },
                    {
                        "name": "OTHER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "other"
                    },
                    {
                        "name": "DRAWBAR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "drawbar"
                    },
                    {
                        "name": "FOUR_IN_LINE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "four-in-line"
                    },
                    {
                        "name": "DOLLY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dolly"
                    },
                    {
                        "name": "FULL_DRAWBAR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "full drawbar"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/vehicle-tech-record.model.ts"
            },
            {
                "name": "VehicleSizes",
                "childs": [
                    {
                        "name": "SMALL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "small"
                    },
                    {
                        "name": "LARGE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "large"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/vehicle-tech-record.model.ts"
            },
            {
                "name": "VehicleTypes",
                "childs": [
                    {
                        "name": "PSV",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "psv"
                    },
                    {
                        "name": "HGV",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "hgv"
                    },
                    {
                        "name": "TRL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "trl"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/vehicle-tech-record.model.ts"
            }
        ],
        "groupedVariables": {
            "src/app/store/global-error/actions/global-error.actions.ts": [
                {
                    "name": "addError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/global-error/actions/global-error.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Global Error Service] Add error', props<GlobalError>())"
                },
                {
                    "name": "clearError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/global-error/actions/global-error.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Global Error Service] Clear Error')"
                }
            ],
            "src/mocks/mock-vehicle-technical-record.mock.ts": [
                {
                    "name": "createMockHgv",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/mock-vehicle-technical-record.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(systemNumber: number): VehicleTechRecordModel =>\n  createMock<VehicleTechRecordModel>({\n    systemNumber: `SYS${String(systemNumber + 1).padStart(4, '0')}`,\n    vin: `XMGDE02FS0H0${12344 + systemNumber + 1}`,\n    vrms: [\n      {\n        vrm: `KP${String(systemNumber + 1).padStart(2, '0')} ABC`,\n        isPrimary: true\n      },\n      {\n        vrm: '609859Z',\n        isPrimary: false\n      }\n    ],\n    techRecord: [\n      {\n        statusCode: StatusCodes.CURRENT,\n        vehicleType: VehicleTypes.HGV,\n        regnDate: '1234',\n        manufactureYear: 2022,\n        noOfAxles: 2,\n        axles: [\n          {\n            parkingBrakeMrk: false\n          },\n          {\n            parkingBrakeMrk: true\n          }\n        ],\n        brakes: {\n          dtpNumber: '1234'\n        },\n        speedLimiterMrk: true,\n        tachoExemptMrk: true,\n        euroStandard: '123',\n        roadFriendly: true,\n        fuelPropulsionSystem: FuelTypes.HYBRID,\n        drawbarCouplingFitted: true,\n        vehicleClass: {\n          description: 'Description'\n        },\n        vehicleConfiguration: VehicleConfigurations.ARTICULATED,\n        offRoad: true,\n        euVehicleCategory: EuVehicleCategories.M1,\n        emissionsLimit: 1234,\n        departmentalVehicleMarker: true\n      }\n    ]\n  })"
                },
                {
                    "name": "createMockPsv",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/mock-vehicle-technical-record.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(systemNumber: number): VehicleTechRecordModel =>\n  createMock<VehicleTechRecordModel>({\n    systemNumber: `SYS${String(systemNumber + 1).padStart(4, '0')}`,\n    vin: `XMGDE02FS0H0${12344 + systemNumber + 1}`,\n    vrms: [\n      {\n        vrm: `KP${String(systemNumber + 1).padStart(2, '0')} ABC`,\n        isPrimary: true\n      },\n      {\n        vrm: '609859Z',\n        isPrimary: false\n      },\n      {\n        vrm: '609959Z',\n        isPrimary: false\n      }\n    ],\n    techRecord: [\n      {\n        statusCode: StatusCodes.CURRENT,\n        vehicleType: VehicleTypes.PSV,\n        regnDate: '1234',\n        manufactureYear: 2022,\n        noOfAxles: 2,\n        brakes: {\n          dtpNumber: '1234'\n        },\n        axles: [\n          {\n            axleNumber: 1,\n            parkingBrakeMrk: false\n          },\n          {\n            axleNumber: 2,\n            parkingBrakeMrk: true\n          }\n        ],\n        speedLimiterMrk: true,\n        tachoExemptMrk: true,\n        euroStandard: '123',\n        fuelPropulsionSystem: FuelTypes.HYBRID,\n        vehicleClass: {\n          description: 'Description'\n        },\n        vehicleConfiguration: VehicleConfigurations.ARTICULATED,\n        euVehicleCategory: EuVehicleCategories.M1,\n        emissionsLimit: 1234,\n        seatsLowerDeck: 1234,\n        seatsUpperDeck: 1234,\n        standingCapacity: 1234,\n        vehicleSize: VehicleSizes.SMALL,\n        numberOfSeatbelts: '1234',\n        seatbeltInstallationApprovalDate: '1234',\n        departmentalVehicleMarker: true\n      }\n    ]\n  })"
                },
                {
                    "name": "createMockTrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/mock-vehicle-technical-record.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(systemNumber: number): VehicleTechRecordModel =>\n  createMock<VehicleTechRecordModel>({\n    systemNumber: `SYS${String(systemNumber + 1).padStart(4, '0')}`,\n    vin: `XMGDE02FS0H0${12344 + systemNumber + 1}`,\n    vrms: [\n      {\n        vrm: `KP${String(systemNumber + 1).padStart(2, '0')} ABC`,\n        isPrimary: true\n      },\n      {\n        vrm: '609859Z',\n        isPrimary: false\n      }\n    ],\n    techRecord: [\n      {\n        statusCode: StatusCodes.CURRENT,\n        vehicleType: VehicleTypes.TRL,\n        regnDate: '1234',\n        firstUseDate: '1234',\n        manufactureYear: 2022,\n        noOfAxles: 2,\n        brakes: {\n          dtpNumber: '1234'\n        },\n        axles: [\n          {\n            parkingBrakeMrk: false\n          },\n          {\n            parkingBrakeMrk: true\n          }\n        ],\n        suspensionType: '1',\n        roadFriendly: true,\n        drawbarCouplingFitted: true,\n        vehicleClass: {\n          description: 'Description'\n        },\n        vehicleConfiguration: VehicleConfigurations.ARTICULATED,\n        couplingType: '1',\n        maxLoadOnCoupling: 1234,\n        frameDescription: FrameDescriptions.FRAME_SECTION,\n        euVehicleCategory: EuVehicleCategories.M1,\n        departmentalVehicleMarker: true\n      }\n    ]\n  })"
                },
                {
                    "name": "mockVehicleTechnicalRecord",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/mock-vehicle-technical-record.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(vehicleType: VehicleTypes = VehicleTypes.PSV, systemNumber: number = 0) => {\n  switch (vehicleType) {\n    case VehicleTypes.HGV:\n      return createMockHgv(systemNumber);\n    case VehicleTypes.TRL:\n      return createMockTrl(systemNumber);\n    default:\n      return createMockPsv(systemNumber);\n  }\n}"
                },
                {
                    "name": "mockVehicleTechnicalRecordList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/mock-vehicle-technical-record.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(vehicleType: VehicleTypes = VehicleTypes.PSV, items: number = 1) => createMockList<VehicleTechRecordModel>(items, (systemNumber) => mockVehicleTechnicalRecord(vehicleType, systemNumber))"
                }
            ],
            "src/app/forms/components/radio-group/radio-group.stories.ts": [
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/components/radio-group/radio-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  label: 'Color picker',\n  name: 'color',\n  options: [\n    { label: 'Red', value: 'red' },\n    { label: 'Yellow', value: 'yellow', hint: 'this is the colour of the sun' },\n    { label: 'Blue', value: 'blue', hint: 'this is the colour of the sea' }\n  ],\n  hint: 'These are the three primary colours'\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/components/radio-group/radio-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Enabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/components/radio-group/radio-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Initilisation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/components/radio-group/radio-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/components/radio-group/radio-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => {\n  const { label, options, name, hint, value = null, disabled = false, validators = [] } = args;\n  const form = new FormGroup({ [name]: new FormControl({ value, disabled }, validators) });\n  return {\n    component: RadioGroupComponent,\n    template: `<form [formGroup]=\"form\"><app-radio-group [label]=\"label\" [hint]=\"hint\" [name]=\"name\" [options]=\"options\" [formControlName]=\"name\"></app-radio-group></form> <pre>{{ form.value | json }}</pre>`,\n    props: {\n      form,\n      label,\n      name,\n      options,\n      hint\n    }\n  };\n}"
                }
            ],
            "setenv.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "setenv.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "argv.environment"
                },
                {
                    "name": "environmentFileContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "setenv.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`export const environment = {\n  production: ${isProduction},\n  VTM_CLIENT_ID: \"${process.env['VTM_CLIENT_ID']}\",\n  VTM_AUTHORITY_ID: \"${process.env['VTM_AUTHORITY_ID']}\",\n  VTM_REDIRECT_URI: 'http://localhost:4200',\n  VTM_API_URI: 'http://localhost:3005',\n  VTM_API_CLIENT_ID: \"${process.env['VTM_API_CLIENT_ID']}\",\n};\n`"
                },
                {
                    "name": "isProduction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "setenv.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "environment === 'prod'"
                },
                {
                    "name": "targetPath",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "setenv.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "isProduction ? `./src/environments/environment.prod.ts` : `./src/environments/environment.deploy.ts`"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "setenv.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('fs')"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "setenv.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('yargs')"
                }
            ],
            "src/environments/environment.deploy.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.deploy.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  VTM_CLIENT_ID: \"54d151b6-2ca8-4018-8c70-f9ee600d91c7\",\n  VTM_AUTHORITY_ID: \"https://login.microsoftonline.com/6c448d90-4ca1-4caf-ab59-0a2aa67d7801\",\n  VTM_REDIRECT_URI: 'http://localhost:4200',\n  VTM_API_URI: 'http://localhost:3005',\n  VTM_API_CLIENT_ID: \"11be8c44-22f5-43bf-b9bb-50467a26cfa7\",\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  VTM_CLIENT_ID: '',\n  VTM_AUTHORITY_ID: '',\n  VTM_REDIRECT_URI: '/',\n  VTM_API_URI: '',\n  VTM_API_CLIENT_ID: ''\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  VTM_CLIENT_ID: '',\n  VTM_AUTHORITY_ID: '',\n  VTM_REDIRECT_URI: '/',\n  VTM_API_URI: '',\n  VTM_API_CLIENT_ID: ''\n}"
                }
            ],
            "src/app/features/global-error/global-error.stories.ts": [
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/global-error/global-error.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: { errorMessage$: 'error' }\n})"
                },
                {
                    "name": "NoErrors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/global-error/global-error.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {}\n})"
                }
            ],
            "src/app/features/search/search.stories.ts": [
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/search/search.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Initial",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/search/search.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/search/search.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/search/search.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: args\n})"
                }
            ],
            "src/app/forms/utils/error-message-map.ts": [
                {
                    "name": "ErrorMessageMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/utils/error-message-map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  ['required']: (err: boolean, label: string) => `${label ? label : 'This filed'} is required`\n}"
                }
            ],
            "src/app/features/test-record-summary/test-record-summary.stories.ts": [
                {
                    "name": "fakeRecord",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/test-record-summary/test-record-summary.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TestResultModel",
                    "defaultValue": "mockTestResult()"
                },
                {
                    "name": "NoRecords",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/test-record-summary/test-record-summary.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {}\n})"
                },
                {
                    "name": "Record",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/test-record-summary/test-record-summary.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: { testRecords: [fakeRecord] }\n})"
                },
                {
                    "name": "Records",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/test-record-summary/test-record-summary.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: { testRecords: [fakeRecord, { ...fakeRecord, testStartTimestamp: '2022-02-02:13.23', vin: 'xthoeu213', testStatus: 'PASSED' }] }\n})"
                }
            ],
            "src/app/store/test-records/actions/test-records.actions.ts": [
                {
                    "name": "fetchTestResults",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/actions/test-records.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[API/test-results] Fetch All')"
                },
                {
                    "name": "fetchTestResultsBySystemId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/actions/test-records.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[API/test-results] Fetch All By systemId', props<{ systemId: string }>())"
                },
                {
                    "name": "fetchTestResultsBySystemIdFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/actions/test-records.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[API/test-results] Fetch All By systemId Failed', props<GlobalError>())"
                },
                {
                    "name": "fetchTestResultsBySystemIdSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/actions/test-records.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[API/test-results] Fetch All By systemId Success', props<{ payload: Array<TestResultModel> }>())"
                },
                {
                    "name": "fetchTestResultsFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/actions/test-records.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[API/test-results] Fetch All Failed', props<GlobalError>())"
                },
                {
                    "name": "fetchTestResultsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/actions/test-records.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[API/test-results] Fetch All Success', props<{ payload: Array<TestResultModel> }>())"
                }
            ],
            "src/app/store/technical-records/technical-record-service.actions.ts": [
                {
                    "name": "getByVIN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/technical-records/technical-record-service.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Technical Record Service] GetByVIN', props<{ vin: string }>())"
                },
                {
                    "name": "getByVINFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/technical-records/technical-record-service.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Technical Record Service] GetByVIN Failure', props<GlobalError>())"
                },
                {
                    "name": "getByVINSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/technical-records/technical-record-service.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Technical Record Service] GetByVIN Success', props<{ vehicleTechRecords: Array<VehicleTechRecordModel> }>())"
                }
            ],
            "src/app/store/global-error/selectors/global-error.selectors.ts": [
                {
                    "name": "getErrorMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/global-error/selectors/global-error.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getGlobalErrorState, (state) => {\n  return state.globalError;\n})"
                }
            ],
            "src/app/store/global-error/reducers/global-error-service.reducer.ts": [
                {
                    "name": "getGlobalErrorState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/global-error/reducers/global-error-service.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<GlobalErrorState>(STORE_GLOBAL_ERROR_KEY)"
                },
                {
                    "name": "globalErrorReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/global-error/reducers/global-error-service.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialGlobalErrorState,\n  on(GlobalErrorActions.clearError, TechnicalRecordServiceActions.getByVIN, TestResultActions.fetchTestResults, TestResultActions.fetchTestResultsBySystemId, (state) => ({ ...state, globalError: [] })),\n  on(GlobalErrorActions.addError, TechnicalRecordServiceActions.getByVINFailure, TestResultActions.fetchTestResultsFailed, TestResultActions.fetchTestResultsBySystemIdFailed, (state, {error, anchorLink}) => ({...state, globalError: [...state.globalError, {error: error, anchorLink: anchorLink}]}))\n)"
                },
                {
                    "name": "globalErrorState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/global-error/reducers/global-error-service.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getGlobalErrorState, (state) => state.globalError)"
                },
                {
                    "name": "initialGlobalErrorState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/global-error/reducers/global-error-service.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GlobalErrorState",
                    "defaultValue": "{\n  globalError: []\n}"
                },
                {
                    "name": "STORE_GLOBAL_ERROR_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/global-error/reducers/global-error-service.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'GlobalError'"
                }
            ],
            "src/app/store/spinner/selectors/spinner.selectors.ts": [
                {
                    "name": "getSpinner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/spinner/selectors/spinner.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getSpinnerState, (state) => {\n  return state.showSpinner;\n})"
                }
            ],
            "src/app/store/spinner/reducers/spinner.reducer.ts": [
                {
                    "name": "getSpinnerState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/spinner/reducers/spinner.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<SpinnerState>(STORE_SPINNER_KEY)"
                },
                {
                    "name": "initialSpinnerState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/spinner/reducers/spinner.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpinnerState",
                    "defaultValue": "{\n  showSpinner: false\n}"
                },
                {
                    "name": "spinnerReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/spinner/reducers/spinner.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialSpinnerState,\n  on(TechnicalRecordServiceActions.getByVIN, TestResultActions.fetchTestResults, TestResultActions.fetchTestResultsBySystemId, (state) => ({ ...state, showSpinner: true })),\n  on(TechnicalRecordServiceActions.getByVINFailure, TechnicalRecordServiceActions.getByVINSuccess,\n     TestResultActions.fetchTestResultsBySystemIdFailed, TestResultActions.fetchTestResultsBySystemIdSuccess,\n     TestResultActions.fetchTestResultsFailed, TestResultActions.fetchTestResultsSuccess,\n      (state) => ({ ...state, showSpinner: false })\n  ),\n)"
                },
                {
                    "name": "spinnerState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/spinner/reducers/spinner.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getSpinnerState, (state) => state.showSpinner)"
                },
                {
                    "name": "STORE_SPINNER_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/spinner/reducers/spinner.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Spinner'"
                }
            ],
            "src/app/store/user/user-service.reducer.ts": [
                {
                    "name": "getUserState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user/user-service.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<UserServiceState>(STORE_FEATURE_USER_KEY)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user/user-service.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserServiceState",
                    "defaultValue": "{\n  username: '(Not logged in)'\n}"
                },
                {
                    "name": "STORE_FEATURE_USER_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user/user-service.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'user'"
                },
                {
                    "name": "username",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user/user-service.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getUserState, (state) => state.username)"
                },
                {
                    "name": "userServiceReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user/user-service.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(UserServiceActions.Login, (state, { name }) => ({ username: name })),\n  on(UserServiceActions.Logout, (state) => initialState)\n)"
                }
            ],
            "src/app/store/technical-records/technical-record-service.reducer.ts": [
                {
                    "name": "getVehicleTechRecordState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/technical-records/technical-record-service.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<TechnicalRecordServiceState>(STORE_FEATURE_TECHNICAL_RECORDS_KEY)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/technical-records/technical-record-service.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TechnicalRecordServiceState",
                    "defaultValue": "{\n  vehicleTechRecords: []\n}"
                },
                {
                    "name": "STORE_FEATURE_TECHNICAL_RECORDS_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/technical-records/technical-record-service.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'TechnicalRecords'"
                },
                {
                    "name": "vehicleTechRecordReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/technical-records/technical-record-service.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(getByVIN, (state) => ({ ...state, vehicleTechRecords: [] })),\n  on(getByVINSuccess, (state, { vehicleTechRecords }) => ({ ...state, vehicleTechRecords })),\n  on(getByVINFailure, (state, { error }) => ({ ...state, vehicleTechRecords: [], error }))\n)"
                }
            ],
            "src/app/forms/templates/hgv/hgv-tech-record.template.ts": [
                {
                    "name": "HgvTechRecord",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/templates/hgv/hgv-tech-record.template.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormNode",
                    "defaultValue": "{\n  name: 'techRecordSummary',\n  type: FormNodeTypes.GROUP,\n  label: 'Vehicle Summary',\n  viewType: FormNodeViewTypes.SUBHEADING,\n  children: [\n    {\n      name: 'vehicleType',\n      label: 'Vehicle type',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.VEHICLETYPE\n    },\n    {\n      name: 'regnDate',\n      label: 'Date of first registration',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.DATE\n    },\n    {\n      name: 'manufactureYear',\n      label: 'Year of manufacture',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'noOfAxles',\n      label: 'Number of axles',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'brakes',\n      label: 'DTP number',\n      value: '',\n      children: [\n        {\n          name: 'dtpNumber',\n          label: 'DTP number',\n          value: '',\n\n          type: FormNodeTypes.CONTROL,\n          viewType: FormNodeViewTypes.STRING\n        }\n      ],\n      type: FormNodeTypes.GROUP,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'axles',\n      value: '',\n      type: FormNodeTypes.ARRAY,\n      children: [\n        {\n          name: '0',\n          label: 'Axel',\n          value: '',\n          type: FormNodeTypes.GROUP,\n          children: [\n            {\n              name: 'parkingBrakeMrk',\n              label: 'Axles fitted with a parking brake',\n              value: '',\n\n              type: FormNodeTypes.CONTROL,\n              viewType: FormNodeViewTypes.STRING\n            }\n          ]\n        }\n      ]\n    },\n    {\n      name: 'speedLimiterMrk',\n      label: 'Speed limiter exempt',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'tachoExemptMrk',\n      label: 'Tacho exempt',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'euroStandard',\n      label: 'Euro standard',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'roadFriendly',\n      label: 'Road friendly suspension',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'fuelPropulsionSystem',\n      label: 'Fuel / propulsion system',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'drawbarCouplingFitted',\n      label: 'Drawbar coupling fitted',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'vehicleClass',\n      label: 'Vehicle class',\n      value: '',\n      type: FormNodeTypes.GROUP,\n      children: [\n        {\n          name: 'description',\n          label: 'Vehicle class',\n          value: '',\n\n          type: FormNodeTypes.CONTROL,\n          viewType: FormNodeViewTypes.STRING\n        }\n      ]\n    },\n    {\n      name: 'vehicleConfiguration',\n      label: 'Vehicle configuration',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'offRoad',\n      label: 'Off road vehicle',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'euVehicleCategory',\n      label: 'EU vehicle category',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'emissionsLimit',\n      label: 'Emission limit (plate value)',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'departmentalVehicleMarker',\n      label: 'Departmental vehicle marker',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    }\n  ]\n}"
                }
            ],
            "src/app/interceptors/delayed-retry/delayed-retry.module.ts": [
                {
                    "name": "HTTP_RETRY_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/interceptors/delayed-retry/delayed-retry.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<HttpRetryConfig>('HttpRetryConfig')"
                }
            ],
            "src/app/store/index.ts": [
                {
                    "name": "initialAppState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  [STORE_FEATURE_USER_KEY]: initialUserState,\n  [STORE_FEATURE_TECHNICAL_RECORDS_KEY]: initialTechnicalRecordsState,\n  [STORE_FEATURE_TEST_RESULTS_KEY]: initialTestResultsState,\n  [STORE_GLOBAL_ERROR_KEY]: initialGlobalErrorState,\n  [STORE_SPINNER_KEY]: initialSpinnerState\n}"
                },
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "!environment.production ? [] : []"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<State>",
                    "defaultValue": "{\n  [STORE_FEATURE_USER_KEY]: userServiceReducer,\n  [STORE_FEATURE_TECHNICAL_RECORDS_KEY]: vehicleTechRecordReducer,\n  [STORE_FEATURE_TEST_RESULTS_KEY]: testResultsReducer,\n  [STORE_GLOBAL_ERROR_KEY]: globalErrorReducer,\n  [STORE_SPINNER_KEY]: spinnerReducer\n}"
                }
            ],
            "src/app/store/test-records/reducers/test-records.reducer.ts": [
                {
                    "name": "initialTestResultsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/reducers/test-records.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "testResultAdapter.getInitialState({ error: '' })"
                },
                {
                    "name": "selectTestResultId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/reducers/test-records.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(a: TestResultModel): string => {\n  return a.testResultId;\n}"
                },
                {
                    "name": "STORE_FEATURE_TEST_RESULTS_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/reducers/test-records.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'testRecords'"
                },
                {
                    "name": "testResultAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/reducers/test-records.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<TestResultModel>",
                    "defaultValue": "createEntityAdapter<TestResultModel>({ selectId: selectTestResultId })"
                },
                {
                    "name": "testResultsFeatureState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/reducers/test-records.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<TestResultsState>(STORE_FEATURE_TEST_RESULTS_KEY)"
                },
                {
                    "name": "testResultsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/reducers/test-records.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialTestResultsState,\n  on(fetchTestResultsSuccess, (state, action) => testResultAdapter.setAll(action.payload, state)),\n  on(fetchTestResultsBySystemIdSuccess, (state, action) => testResultAdapter.setAll(action.payload, state)),\n  on(fetchTestResultsBySystemIdFailed, (state, { error }) => ({ ...testResultAdapter.setAll([], state), error }))\n)"
                }
            ],
            "src/app/store/user/user-service.actions.ts": [
                {
                    "name": "Login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user/user-service.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[User Service] Login', props<{ name: string }>())"
                },
                {
                    "name": "Logout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user/user-service.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[User Service] Logout')"
                }
            ],
            "src/app/store/user/user-state.module.ts": [
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user/user-state.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<MetaReducer<any, any>>",
                    "defaultValue": "[localStorageSyncReducer]"
                }
            ],
            "mock-api/mock-api-server.ts": [
                {
                    "name": "middlewares",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "mock-api/mock-api-server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "jsonServer.defaults()"
                },
                {
                    "name": "router",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "mock-api/mock-api-server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "jsonServer.router('{}')"
                },
                {
                    "name": "server",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "mock-api/mock-api-server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "jsonServer.create()"
                }
            ],
            "jest-global-mocks.ts": [
                {
                    "name": "mock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "jest-global-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  let storage: { [key: string]: any } = {};\n  return {\n    getItem: (key: string) => (key in storage ? storage[key] : null),\n    setItem: (key: string, value: any) => (storage[key] = value || ''),\n    removeItem: (key: string) => delete storage[key],\n    clear: () => (storage = {})\n  };\n}"
                }
            ],
            "src/mocks/mock-test-result.ts": [
                {
                    "name": "mockTestResult",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/mock-test-result.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(i: number = 0) =>\n  createMock<TestResultModel>({\n    testResultId: `TestResultId${String(i + 1).padStart(4, '0')}`,\n\n    systemNumber: 'SYS0001',\n    vin: 'XMGDE02FS0H012345',\n    vrm: 'KP02 ABC',\n\n    createdAt: new Date().toISOString(),\n    testStartTimestamp: new Date().toISOString(),\n\n    testTypes: [...mockTestTypeList()],\n\n    trailerId: `C${String(i + 1).padStart(5, '0')}`,\n    countryOfRegistration: CountryOfRegistration.GreatBritainandNorthernIreland_GB,\n    euVehicleCategory: EuVehicleCategory.M3,\n    odometerReading: 100,\n    odometerReadingUnits: OdometerReadingUnits.KILOMETERS,\n    reasonForCreation: 'mock test result data',\n    preparerName: 'Durrell Truck & Van Centre',\n    preparerId: 'CM2254'\n  })"
                },
                {
                    "name": "mockTestResultList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/mock-test-result.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(items: number = 1) => createMockList<TestResultModel>(items, (i) => mockTestResult(i))"
                },
                {
                    "name": "mockTestTypeList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/mock-test-result.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(numberOfItems: number = 1) =>\n  createMockList<TestType>(numberOfItems, (i: number) => {\n    const now = new Date();\n    const nextYear = new Date().setFullYear(now.getFullYear());\n\n    return createMock<TestType>({\n      testNumber: `TestNumber${String(i + 1).padStart(4, '0')}`,\n\n      testCode: `Test${i}`,\n      testTypeName: `Test Type Name ${i}`,\n\n      testTypeStartTimestamp: now.toISOString(),\n      testTypeEndTimestamp: now.setFullYear(now.getFullYear() + 1),\n      testExpiryDate: nextYear,\n\n      certificateNumber: `CertNumber${String(i + 1).padStart(4, '0')}`,\n      reasonForAbandoning: 'The vehicle was not submitted for test at the appointed time',\n      additionalCommentsForAbandon: 'The vehicle was not submitted for test at the appointed time',\n      testAnniversaryDate: now.setFullYear(now.getFullYear() - 1),\n      prohibitionIssued: false,\n      testResult: 'Pass',\n\n      emissionStandard: Emissions.EmissionStandard.Euro3,\n      smokeTestKLimitApplied: 'yes',\n      fuelType: Emissions.FuelType.Diesel,\n      modType: {\n        code: Emissions.ModTypeCode.g,\n        description: Emissions.ModeTypeDescription.Engine\n      },\n      modificationTypeUsed: 'modifications number ' + Math.round(Math.random() * 1000).toString(),\n      particulateTrapFitted: 'particulate trap ' + Math.round(Math.random() * 1000).toString(),\n      particulateTrapSerialNumber: 'ABC' + Math.round(Math.random() * 1000).toString()\n    });\n  })"
                }
            ],
            "src/app/app.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {}\n})"
                }
            ],
            "src/app/vehicle-technical-record/vehicle-technical-record.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/vehicle-technical-record/vehicle-technical-record.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/vehicle-technical-record/vehicle-technical-record.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: args\n})"
                }
            ],
            "src/app/features/home/home.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/home/home.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {}\n})"
                }
            ],
            "src/app/layout/footer/footer.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/footer/footer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {}\n})"
                }
            ],
            "src/app/layout/header/header.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/header/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {\n    username: 'username'\n  }\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/header/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {}\n})"
                }
            ],
            "src/app/features/home/components/home-button/home-button.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/home/components/home-button/home-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {}\n})"
                }
            ],
            "src/app/forms/templates/psv/psv-annual.template.ts": [
                {
                    "name": "PsvAnnual",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/templates/psv/psv-annual.template.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormNode",
                    "defaultValue": "{\n  name: 'psvAnnualTest',\n  label: 'Annual test',\n  type: FormNodeTypes.GROUP,\n  children: [\n    {\n      name: 'vehicleSection',\n      label: 'Vehicle',\n      type: FormNodeTypes.SECTION\n    },\n    {\n      name: 'vin',\n      label: 'VIN/chassis number',\n      value: '',\n\n      type: FormNodeTypes.CONTROL\n    },\n    {\n      name: 'vrm',\n      label: 'VRM',\n      value: '',\n\n      type: FormNodeTypes.CONTROL\n    },\n    {\n      name: 'trailerId',\n      label: 'Trailer ID',\n      value: '',\n\n      type: FormNodeTypes.CONTROL\n    },\n    {\n      name: 'countryOfRegistration',\n      label: 'Country Of Registration',\n      value: '',\n\n      type: FormNodeTypes.CONTROL\n    },\n    {\n      name: 'euVehicleCategory',\n      label: 'EU Vehicle Category',\n      value: '',\n\n      type: FormNodeTypes.CONTROL\n    },\n    {\n      name: 'odometerCombination',\n      label: 'Odometer',\n      type: FormNodeTypes.COMBINATION,\n      options: {\n        leftComponentName: 'odometerReading',\n        rightComponentName: 'odometerReadingUnits',\n        separator: ' '\n      }\n    },\n    {\n      name: 'odometerReading',\n      label: 'Odometer Reading',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.HIDDEN\n    },\n    {\n      name: 'odometerReadingUnits',\n      label: 'Odometer Reading Units',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.HIDDEN\n    },\n    {\n      name: 'preparerCombination',\n      label: 'Preparer',\n      type: FormNodeTypes.COMBINATION,\n      options: {\n        leftComponentName: 'preparerName',\n        rightComponentName: 'preparerId',\n        separator: ' - '\n      }\n    },\n    {\n      name: 'preparerName',\n      label: 'Preparer Name',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.HIDDEN\n    },\n    {\n      name: 'preparerId',\n      label: 'Preparer ID',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.HIDDEN\n    },\n    {\n      name: 'testSection',\n      label: 'Test',\n      type: FormNodeTypes.SECTION\n    },\n    {\n      name: 'createdAt',\n      label: 'Created',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.DATE\n    },\n    {\n      name: 'testStartTimestamp',\n      label: 'Test Date',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.DATE\n    },\n    {\n      name: 'testTypes',\n      label: 'Test Types',\n      type: FormNodeTypes.ARRAY,\n      children: [\n        {\n          name: 'test0',\n          type: FormNodeTypes.GROUP,\n          children: [\n            {\n              name: 'testCode',\n              label: 'Test Code',\n              value: '',\n\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'testResult',\n              label: 'Result',\n              value: '',\n\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'testTypeName',\n              label: 'Description',\n              value: '',\n\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'certificateNumber',\n              label: 'Certificate number',\n              value: '',\n\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'testNumber',\n              label: 'Test Number',\n              value: '',\n\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'testExpiryDate',\n              label: 'Expiry Date',\n              value: '',\n\n              type: FormNodeTypes.CONTROL,\n              viewType: FormNodeViewTypes.DATE\n            },\n            {\n              name: 'reasonForAbandoning',\n              type: FormNodeTypes.CONTROL,\n              label: 'Reason for abandoning',\n              value: ''\n            },\n            {\n              name: 'additionalCommentsForAbandon',\n              type: FormNodeTypes.CONTROL,\n              value: '',\n              label: 'Additional details for abandoning'\n            },\n            {\n              name: 'testAnniversaryDate',\n              type: FormNodeTypes.CONTROL,\n              value: '',\n              label: 'Anniversary date',\n              viewType: FormNodeViewTypes.DATE\n            },\n            {\n              name: 'testTypeStartTimestamp',\n              type: FormNodeTypes.CONTROL,\n              value: '',\n              label: 'Start time',\n              viewType: FormNodeViewTypes.TIME\n            },\n            {\n              name: 'testTypeEndTimestamp',\n              type: FormNodeTypes.CONTROL,\n              value: '',\n              label: 'End time',\n              viewType: FormNodeViewTypes.TIME\n            },\n            {\n              name: 'prohibitionIssued',\n              type: FormNodeTypes.CONTROL,\n              value: '',\n              label: 'Prohibition issued',\n              options: [\n                { value: true, label: 'Yes' },\n                { value: false, label: 'No' }\n              ]\n            },\n            {\n              name: '',\n              label: 'Emissions',\n              type: FormNodeTypes.SECTION\n            },\n            {\n              name: 'emissionStandard',\n              label: 'Emissions standard',\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'smokeTestKLimitApplied',\n              label: 'Smoke test K limit applied',\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'fuelType',\n              label: 'Fuel type',\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'modType',\n              label: 'Modification Type',\n              type: FormNodeTypes.GROUP,\n              children: [\n                {\n                  name: 'code',\n                  label: 'Modification code',\n                  type: FormNodeTypes.CONTROL\n                },\n                {\n                  name: 'description',\n                  label: 'Modification description',\n                  type: FormNodeTypes.CONTROL\n                }\n              ]\n            },\n            {\n              name: 'modificationTypeUsed',\n              label: 'Modification type used',\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'particulateTrapFitted',\n              label: 'Particulate trap fitted',\n              type: FormNodeTypes.CONTROL\n            },\n            {\n              name: 'particulateTrapSerialNumber',\n              label: 'Particulate trap serial number',\n              type: FormNodeTypes.CONTROL\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}"
                }
            ],
            "src/app/forms/templates/psv/psv-tech-record.template.ts": [
                {
                    "name": "PsvTechRecord",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/templates/psv/psv-tech-record.template.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormNode",
                    "defaultValue": "{\n  name: 'techRecordSummary',\n  type: FormNodeTypes.GROUP,\n  label: 'Vehicle Summary',\n  viewType: FormNodeViewTypes.SUBHEADING,\n  children: [\n    {\n      name: 'vehicleType',\n      label: 'Vehicle type',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.VEHICLETYPE\n    },\n    {\n      name: 'regnDate',\n      label: 'Date of first registration',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.DATE\n    },\n    {\n      name: 'manufactureYear',\n      label: 'Year of manufacture',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'noOfAxles',\n      label: 'Number of axles',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'brakes',\n      label: 'DTP number',\n      value: '',\n      children: [\n        {\n          name: 'dtpNumber',\n          label: 'DTP number',\n          value: '',\n\n          type: FormNodeTypes.CONTROL,\n          viewType: FormNodeViewTypes.STRING\n        }\n      ],\n      type: FormNodeTypes.GROUP,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'axles',\n      value: '',\n      type: FormNodeTypes.ARRAY,\n      children: [\n        {\n          name: '0',\n          label: 'Axel',\n          value: '',\n          type: FormNodeTypes.GROUP,\n          children: [\n            {\n              name: 'parkingBrakeMrk',\n              label: 'Axles fitted with a parking brake',\n              value: '',\n\n              type: FormNodeTypes.CONTROL,\n              viewType: FormNodeViewTypes.STRING\n            }\n          ]\n        }\n      ]\n    },\n    {\n      name: 'speedLimiterMrk',\n      label: 'Speed limiter exempt',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'tachoExemptMrk',\n      label: 'Tacho exempt',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'euroStandard',\n      label: 'Euro standard',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'fuelPropulsionSystem',\n      label: 'Fuel / propulsion system',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'vehicleClass',\n      label: 'Vehicle class',\n      value: '',\n      type: FormNodeTypes.GROUP,\n      children: [\n        {\n          name: 'description',\n          label: 'Vehicle class',\n          value: '',\n\n          type: FormNodeTypes.CONTROL,\n          viewType: FormNodeViewTypes.STRING\n        }\n      ]\n    },\n    {\n      name: 'vehicleConfiguration',\n      label: 'Vehicle configuration',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'euVehicleCategory',\n      label: 'EU vehicle category',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'emissionsLimit',\n      label: 'Emission limit (plate value)',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'seatsLowerDeck',\n      label: 'Seats lower deck',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'seatsUpperDeck',\n      label: 'Seats upper deck',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'standingCapacity',\n      label: 'Standing capacity',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'vehicleSize',\n      label: 'Vehicle size',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'numberOfSeatbelts',\n      label: 'Number of seat belts',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'seatbeltInstallationApprovalDate',\n      label: 'Seatbelt installation approval date / type approved',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'departmentalVehicleMarker',\n      label: 'Departmental vehicle marker',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    }\n  ]\n}"
                }
            ],
            "src/app/store/test-records/selectors/test-records.selectors.ts": [
                {
                    "name": "selectAllTestResults",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/selectors/test-records.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(testResultsFeatureState, (state) => {\n  return Object.values(state.entities) as TestResultModel[];\n})"
                },
                {
                    "name": "selectedTestResultState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/selectors/test-records.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(testResultsEnitities, selectRouteParams, (entities, { testResultId }) => entities[testResultId])"
                },
                {
                    "name": "selectTestResultIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/selectors/test-records.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "selectIds"
                },
                {
                    "name": "selectTestResultsEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/selectors/test-records.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "selectEntities"
                },
                {
                    "name": "selectTestResultsTotal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/selectors/test-records.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "selectTotal"
                },
                {
                    "name": "testResultsEnitities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/selectors/test-records.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(testResultsFeatureState, selectTestResultsEntities)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/test-records/selectors/test-records.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "testResultAdapter.getSelectors()"
                }
            ],
            "src/app/store/router/selectors/router.selectors.ts": [
                {
                    "name": "selectRouter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/router/selectors/router.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<RouterReducerState>('appRoutes')"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/router/selectors/router.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "getSelectors()"
                }
            ],
            "src/app/forms/templates/trl/trl-tech-record.template.ts": [
                {
                    "name": "TrlTechRecord",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/templates/trl/trl-tech-record.template.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormNode",
                    "defaultValue": "{\n  name: 'techRecordSummary',\n  type: FormNodeTypes.GROUP,\n  label: 'Vehicle Summary',\n  viewType: FormNodeViewTypes.SUBHEADING,\n  children: [\n    {\n      name: 'vehicleType',\n      label: 'Vehicle type',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.VEHICLETYPE\n    },\n    {\n      name: 'regnDate',\n      label: 'Date of first registration',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.DATE\n    },\n    {\n      name: 'firstUseDate',\n      label: 'First use date',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'manufactureYear',\n      label: 'Year of manufacture',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'noOfAxles',\n      label: 'Number of axles',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'brakes',\n      label: 'DTP number',\n      value: '',\n      children: [\n        {\n          name: 'dtpNumber',\n          label: 'DTP number',\n          value: '',\n\n          type: FormNodeTypes.CONTROL,\n          viewType: FormNodeViewTypes.STRING\n        }\n      ],\n      type: FormNodeTypes.GROUP,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'axles',\n      value: '',\n      type: FormNodeTypes.ARRAY,\n      children: [\n        {\n          name: '0',\n          label: 'Axel',\n          value: '',\n          type: FormNodeTypes.GROUP,\n          children: [\n            {\n              name: 'parkingBrakeMrk',\n              label: 'Axles fitted with a parking brake',\n              value: '',\n\n              type: FormNodeTypes.CONTROL,\n              viewType: FormNodeViewTypes.STRING\n            }\n          ]\n        }\n      ]\n    },\n    {\n      name: 'suspensionType',\n      label: 'Suspension type (optional)',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'roadFriendly',\n      label: 'Road friendly suspension',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'vehicleClass',\n      label: 'Vehicle class',\n      value: '',\n      type: FormNodeTypes.GROUP,\n      children: [\n        {\n          name: 'description',\n          label: 'Vehicle class',\n          value: '',\n\n          type: FormNodeTypes.CONTROL,\n          viewType: FormNodeViewTypes.STRING\n        }\n      ]\n    },\n    {\n      name: 'vehicleConfiguration',\n      label: 'Vehicle configuration',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'couplingType',\n      label: 'Coupling type (optional)',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'maxLoadOnCoupling',\n      label: 'Max load on coupling (optional)',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'frameDescription',\n      label: 'Frame description (optional)',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'euVehicleCategory',\n      label: 'EU vehicle category',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    },\n    {\n      name: 'departmentalVehicleMarker',\n      label: 'Departmental vehicle marker',\n      value: '',\n\n      type: FormNodeTypes.CONTROL,\n      viewType: FormNodeViewTypes.STRING\n    }\n  ]\n}"
                }
            ],
            "src/app/store/technical-records/technical-record-service.selectors.ts": [
                {
                    "name": "vehicleTechRecords",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/technical-records/technical-record-service.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getVehicleTechRecordState, (state) => state.vehicleTechRecords)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/user/user-state.module.ts": [
                {
                    "name": "localStorageSyncReducer",
                    "file": "src/app/store/user/user-state.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionReducer<any>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "MSALGuardConfigFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "MsalGuardConfiguration"
                },
                {
                    "name": "MSALInstanceFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "IPublicClientApplication"
                },
                {
                    "name": "MSALInterceptorConfigFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "MsalInterceptorConfiguration"
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/models/country-of-registration.enum.ts": [
                {
                    "name": "CountryOfRegistration",
                    "childs": [
                        {
                            "name": "GreatBritainandNorthernIreland_GB",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "gb"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/country-of-registration.enum.ts"
                }
            ],
            "src/app/models/emissions.enum.ts": [
                {
                    "name": "EmissionStandard",
                    "childs": [
                        {
                            "name": "Euro3PM",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "0.10 g/kWh Euro 3 PM"
                        },
                        {
                            "name": "EuroIVPM",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "0.03 g/kWh Euro IV PM"
                        },
                        {
                            "name": "Euro3",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Euro 3"
                        },
                        {
                            "name": "Euro4",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Euro 4"
                        },
                        {
                            "name": "Euro6",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Euro 6"
                        },
                        {
                            "name": "EuroVI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Euro VI"
                        },
                        {
                            "name": "FullElectric",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Full Electric"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/emissions.enum.ts"
                },
                {
                    "name": "FuelType",
                    "childs": [
                        {
                            "name": "Diesel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "diesel"
                        },
                        {
                            "name": "GasCng",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "gas-cng"
                        },
                        {
                            "name": "GasLng",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "gas-lng"
                        },
                        {
                            "name": "GasLpg",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "gas-lpg"
                        },
                        {
                            "name": "FuelCell",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "fuel cell"
                        },
                        {
                            "name": "Petrol",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "petrol"
                        },
                        {
                            "name": "FullElectric",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "full electric"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/emissions.enum.ts"
                },
                {
                    "name": "ModeTypeDescription",
                    "childs": [
                        {
                            "name": "ParticulateTrap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "particulate trap"
                        },
                        {
                            "name": "Engine",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "modification or change of engine"
                        },
                        {
                            "name": "GasEngine",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "gas engine"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/emissions.enum.ts"
                },
                {
                    "name": "ModTypeCode",
                    "childs": [
                        {
                            "name": "p",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "p"
                        },
                        {
                            "name": "m",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "m"
                        },
                        {
                            "name": "g",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "g"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/emissions.enum.ts"
                }
            ],
            "src/app/models/vehicle-tech-record.model.ts": [
                {
                    "name": "EuVehicleCategories",
                    "childs": [
                        {
                            "name": "M1",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "m1"
                        },
                        {
                            "name": "M2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "m2"
                        },
                        {
                            "name": "M3",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "m3"
                        },
                        {
                            "name": "n1",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "n1"
                        },
                        {
                            "name": "n2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "n2"
                        },
                        {
                            "name": "n3",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "n3"
                        },
                        {
                            "name": "o1",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "o1"
                        },
                        {
                            "name": "o2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "o2"
                        },
                        {
                            "name": "o3",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "o3"
                        },
                        {
                            "name": "o4",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "o4"
                        },
                        {
                            "name": "l1e_a",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "l1e-a"
                        },
                        {
                            "name": "l1e",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "l1e"
                        },
                        {
                            "name": "l2e",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "l2e"
                        },
                        {
                            "name": "l3e",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "l3e"
                        },
                        {
                            "name": "l4e",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "l4e"
                        },
                        {
                            "name": "l5e",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "l5e"
                        },
                        {
                            "name": "l6e",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "l6e"
                        },
                        {
                            "name": "l7e",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "l7e"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/vehicle-tech-record.model.ts"
                },
                {
                    "name": "FrameDescriptions",
                    "childs": [
                        {
                            "name": "CHANNEL_SECTION",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Channel section"
                        },
                        {
                            "name": "SPACE_FRAME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Space frame"
                        },
                        {
                            "name": "I_SECTION",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "I section"
                        },
                        {
                            "name": "TUBULAR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Tubular"
                        },
                        {
                            "name": "FRAME_SECTION",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Frame section"
                        },
                        {
                            "name": "OTHER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Other"
                        },
                        {
                            "name": "INTEGRAL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "integral"
                        },
                        {
                            "name": "BOX_SECTION",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Box section"
                        },
                        {
                            "name": "U_SECTION",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "U section"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/vehicle-tech-record.model.ts"
                },
                {
                    "name": "FuelTypes",
                    "childs": [
                        {
                            "name": "DIESELPETROL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DieselPetrol"
                        },
                        {
                            "name": "HYBRID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Hybrid"
                        },
                        {
                            "name": "ELECTRIC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Electric"
                        },
                        {
                            "name": "CNG",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CNG"
                        },
                        {
                            "name": "FUELCELL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Fuel cell"
                        },
                        {
                            "name": "LNG",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "LNG"
                        },
                        {
                            "name": "OTHER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Other"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/vehicle-tech-record.model.ts"
                },
                {
                    "name": "StatusCodes",
                    "childs": [
                        {
                            "name": "ARCHIVED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "archived"
                        },
                        {
                            "name": "CURRENT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "current"
                        },
                        {
                            "name": "PROVISIONAL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "provisional"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/vehicle-tech-record.model.ts"
                },
                {
                    "name": "VehicleClassDescriptions",
                    "childs": [
                        {
                            "name": "MOTORBIKE_OVER_200CC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "motorbikes over 200cc or with a sidecar"
                        },
                        {
                            "name": "NOT_APPLICABLE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "not applicable"
                        },
                        {
                            "name": "SMALL_PSV",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "small psv (ie: less than or equal to 22 seats)"
                        },
                        {
                            "name": "MOTORBIKE_UPTO_200CC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "motorbikes up to 200cc"
                        },
                        {
                            "name": "TRAILER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "trailer"
                        },
                        {
                            "name": "LARGE_PSV",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "large psv(ie: greater than 23 seats)"
                        },
                        {
                            "name": "THREE_WHEELER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "3 wheelers"
                        },
                        {
                            "name": "HGV",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "heavy goods vehicle"
                        },
                        {
                            "name": "MOT_CLASS_4",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MOT class 4"
                        },
                        {
                            "name": "MOT_CLASS_5",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MOT class 5"
                        },
                        {
                            "name": "MOT_CLASS_7",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MOT class 7"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/vehicle-tech-record.model.ts"
                },
                {
                    "name": "VehicleConfigurations",
                    "childs": [
                        {
                            "name": "RIGID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "rigid"
                        },
                        {
                            "name": "ARTICULATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "articulated"
                        },
                        {
                            "name": "CENTRE_AXLE_DRAWBAR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "centre axle drawbar"
                        },
                        {
                            "name": "SEMI_CAR_TRANSPORTER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "semi-car transporter"
                        },
                        {
                            "name": "SEMI_TRAILER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "semi-trailer"
                        },
                        {
                            "name": "LOW_LOADER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "low loader"
                        },
                        {
                            "name": "OTHER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "other"
                        },
                        {
                            "name": "DRAWBAR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "drawbar"
                        },
                        {
                            "name": "FOUR_IN_LINE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "four-in-line"
                        },
                        {
                            "name": "DOLLY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dolly"
                        },
                        {
                            "name": "FULL_DRAWBAR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "full drawbar"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/vehicle-tech-record.model.ts"
                },
                {
                    "name": "VehicleSizes",
                    "childs": [
                        {
                            "name": "SMALL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "small"
                        },
                        {
                            "name": "LARGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "large"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/vehicle-tech-record.model.ts"
                },
                {
                    "name": "VehicleTypes",
                    "childs": [
                        {
                            "name": "PSV",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "psv"
                        },
                        {
                            "name": "HGV",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "hgv"
                        },
                        {
                            "name": "TRL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "trl"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/vehicle-tech-record.model.ts"
                }
            ],
            "src/app/models/eu-vehicle-category.enum.ts": [
                {
                    "name": "EuVehicleCategory",
                    "childs": [
                        {
                            "name": "M1",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "m1"
                        },
                        {
                            "name": "M2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "m2"
                        },
                        {
                            "name": "M3",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "m3"
                        },
                        {
                            "name": "N1",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "n1"
                        },
                        {
                            "name": "N2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "n2"
                        },
                        {
                            "name": "N3",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "n3"
                        },
                        {
                            "name": "O1",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "o1"
                        },
                        {
                            "name": "O2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "o2"
                        },
                        {
                            "name": "O3",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "o3"
                        },
                        {
                            "name": "O4",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "o4"
                        },
                        {
                            "name": "L1E_A",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "l1e-a"
                        },
                        {
                            "name": "L1E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "l1e"
                        },
                        {
                            "name": "L2E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "l2e"
                        },
                        {
                            "name": "L3E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "l3e"
                        },
                        {
                            "name": "L4E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "l4e"
                        },
                        {
                            "name": "L5E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "l5e"
                        },
                        {
                            "name": "L6E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "l6e"
                        },
                        {
                            "name": "L7E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "l7e"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/eu-vehicle-category.enum.ts"
                }
            ],
            "src/app/forms/services/dynamic-form.types.ts": [
                {
                    "name": "FormNodeTypes",
                    "childs": [
                        {
                            "name": "ROOT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "root"
                        },
                        {
                            "name": "GROUP",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "group"
                        },
                        {
                            "name": "CONTROL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "control"
                        },
                        {
                            "name": "ARRAY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "array"
                        },
                        {
                            "name": "SECTION",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "section"
                        },
                        {
                            "name": "COMBINATION",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "combination"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/forms/services/dynamic-form.types.ts"
                },
                {
                    "name": "FormNodeViewTypes",
                    "childs": [
                        {
                            "name": "STRING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "string"
                        },
                        {
                            "name": "DATE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "date"
                        },
                        {
                            "name": "DATETIME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dateTime"
                        },
                        {
                            "name": "TIME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "time"
                        },
                        {
                            "name": "HIDDEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "hidden"
                        },
                        {
                            "name": "VEHICLETYPE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "vehicleType"
                        },
                        {
                            "name": "SUBHEADING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "subHeading"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/forms/services/dynamic-form.types.ts"
                }
            ],
            "src/app/models/odometer-unit.enum.ts": [
                {
                    "name": "OdometerReadingUnits",
                    "childs": [
                        {
                            "name": "KILOMETERS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "kilometers"
                        },
                        {
                            "name": "MILES",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "miles"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/odometer-unit.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "resolve": {
                            "title": "TitleResolver"
                        },
                        "children": [
                            {
                                "path": "",
                                "component": "HomeComponent",
                                "data": {
                                    "title": "Home"
                                },
                                "canActivate": [
                                    "MsalGuard"
                                ]
                            },
                            {
                                "path": "search",
                                "component": "SearchComponent",
                                "data": {
                                    "title": "Technicalrecordsearch"
                                },
                                "canActivate": [
                                    "MsalGuard"
                                ]
                            },
                            {
                                "path": "test-records",
                                "canLoad": [
                                    "MsalGuard"
                                ],
                                "loadChildren": "./features/test-records/test-records.module#TestRecordsModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "src/app/features/test-records/test-records-routing.module.ts",
                                                "module": "TestRecordsRoutingModule",
                                                "children": [
                                                    {
                                                        "path": ":systemId",
                                                        "component": "TestRecordsComponent",
                                                        "canActivateChild": [
                                                            "MsalGuard"
                                                        ],
                                                        "children": [
                                                            {
                                                                "path": "test-result/:testResultId",
                                                                "component": "TestRecordComponent",
                                                                "data": {
                                                                    "title": "TestResult"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "TestRecordsModule"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "jest-global-mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "mock-api/mock-api-server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "middlewares",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "mock-api/mock-api-server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "router",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "mock-api/mock-api-server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "server",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "setenv.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "setenv.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environmentFileContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "setenv.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isProduction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "setenv.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "targetPath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "setenv.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "setenv.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "MSALGuardConfigFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "MSALInstanceFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "MSALInterceptorConfigFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/global-error/global-error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GlobalErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/global-error/global-error.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GlobalErrorService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/global-error/global-error.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GlobalError",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/global-error/global-error.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/global-error/global-error.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/home/components/home-button/home-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/home/components/home-button/home-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/home/home.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/search/search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/search/search.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/search/search.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Initial",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/search/search.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/search/search.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tech-record-summary/tech-record-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TechRecordSummaryComponent",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/test-record-summary/test-record-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TestRecordSummaryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/test-record-summary/test-record-summary.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fakeRecord",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/test-record-summary/test-record-summary.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoRecords",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/test-record-summary/test-record-summary.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Record",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/test-record-summary/test-record-summary.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Records",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/test-records/test-records.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TestRecordsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/test-records/views/test-result/test-records.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TestRecordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/components/base-control/base-control.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseControlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/components/dynamic-form-group/dynamic-form-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/components/radio-group/radio-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/components/radio-group/radio-group.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Option",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/components/radio-group/radio-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/components/radio-group/radio-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/components/radio-group/radio-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Enabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/components/radio-group/radio-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Initilisation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/components/radio-group/radio-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/components/text-input/text-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/components/view-combination/view-combination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ViewCombinationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/components/view-list-item/view-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ViewListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/services/dynamic-form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DynamicFormService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/services/dynamic-form.types.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomFormArray",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/services/dynamic-form.types.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomFormControl",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/services/dynamic-form.types.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/services/dynamic-form.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CustomArray",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/services/dynamic-form.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CustomControl",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/services/dynamic-form.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CustomGroup",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/services/dynamic-form.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormNode",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/services/dynamic-form.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormNodeCombinationOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/services/dynamic-form.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormNodeOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/templates/hgv/hgv-tech-record.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HgvTechRecord",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/templates/psv/psv-annual.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PsvAnnual",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/templates/psv/psv-tech-record.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PsvTechRecord",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/templates/trl/trl-tech-record.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TrlTechRecord",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/utils/error-message-map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ErrorMessageMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interceptors/delayed-retry/delayed-retry.interceptor.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InternalConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interceptors/delayed-retry/delayed-retry.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "DelayedRetryInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/interceptors/delayed-retry/delayed-retry.module.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HttpRetryConfig",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "src/app/interceptors/delayed-retry/delayed-retry.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HTTP_RETRY_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/footer/footer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/spinner/spinner.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SpinnerService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/emissions.enum.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModType",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/options.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MultiOption",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/options.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MultiOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/test-result.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TestResultModel",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/models/test-type.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TestType",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/models/vehicle-tech-record.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Axle",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/vehicle-tech-record.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TechRecordModel",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/app/models/vehicle-tech-record.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "VehicleTechRecordModel",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/vehicle-tech-record.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Vrm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/resolvers/title/title.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "TitleResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/technical-record/technical-record.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TechnicalRecordService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/test-records/test-records.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TestRecordsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/user-service/user-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/default-null-or-empty/default-null-or-empty.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DefaultNullOrEmpty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/global-error/actions/global-error.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/global-error/actions/global-error.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clearError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/global-error/reducers/global-error-service.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GlobalErrorState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/global-error/reducers/global-error-service.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getGlobalErrorState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/global-error/reducers/global-error-service.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "globalErrorReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/global-error/reducers/global-error-service.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "globalErrorState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/global-error/reducers/global-error-service.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialGlobalErrorState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/global-error/reducers/global-error-service.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORE_GLOBAL_ERROR_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/global-error/selectors/global-error.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getErrorMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialAppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/router/selectors/router.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRouter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/router/selectors/router.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/spinner/reducers/spinner.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SpinnerState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/spinner/reducers/spinner.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSpinnerState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/spinner/reducers/spinner.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialSpinnerState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/spinner/reducers/spinner.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "spinnerReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/spinner/reducers/spinner.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "spinnerState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/spinner/reducers/spinner.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORE_SPINNER_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/spinner/selectors/spinner.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSpinner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/technical-records/technical-record-service.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getByVIN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/technical-records/technical-record-service.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getByVINFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/technical-records/technical-record-service.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getByVINSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/technical-records/technical-record-service.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TechnicalRecordServiceEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/technical-records/technical-record-service.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TechnicalRecordServiceState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/technical-records/technical-record-service.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getVehicleTechRecordState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/technical-records/technical-record-service.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/technical-records/technical-record-service.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORE_FEATURE_TECHNICAL_RECORDS_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/technical-records/technical-record-service.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "vehicleTechRecordReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/technical-records/technical-record-service.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "vehicleTechRecords",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/actions/test-records.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fetchTestResults",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/actions/test-records.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fetchTestResultsBySystemId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/actions/test-records.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fetchTestResultsBySystemIdFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/actions/test-records.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fetchTestResultsBySystemIdSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/actions/test-records.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fetchTestResultsFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/actions/test-records.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fetchTestResultsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/effects/test-records.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TestResultsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/reducers/test-records.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TestResultsState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/reducers/test-records.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialTestResultsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/reducers/test-records.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTestResultId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/reducers/test-records.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORE_FEATURE_TEST_RESULTS_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/reducers/test-records.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testResultAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/reducers/test-records.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testResultsFeatureState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/reducers/test-records.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testResultsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/selectors/test-records.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllTestResults",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/selectors/test-records.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectedTestResultState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/selectors/test-records.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTestResultIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/selectors/test-records.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTestResultsEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/selectors/test-records.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTestResultsTotal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/selectors/test-records.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testResultsEnitities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/test-records/selectors/test-records.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user/user-service.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user/user-service.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Logout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user/user-service.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserServiceState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user/user-service.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getUserState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user/user-service.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user/user-service.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORE_FEATURE_USER_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user/user-service.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "username",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user/user-service.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userServiceReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user/user-state.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "localStorageSyncReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user/user-state.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/vehicle-technical-record/vehicle-technical-record.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VehicleTechnicalRecordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/vehicle-technical-record/vehicle-technical-record.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/vehicle-technical-record/vehicle-technical-record.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.deploy.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/mock-test-result.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockTestResult",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/mock-test-result.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockTestResultList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/mock-test-result.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockTestTypeList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/mock-vehicle-technical-record.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createMockHgv",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/mock-vehicle-technical-record.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createMockPsv",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/mock-vehicle-technical-record.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createMockTrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/mock-vehicle-technical-record.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockVehicleTechnicalRecord",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/mock-vehicle-technical-record.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockVehicleTechnicalRecordList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}