/**
 * Test Results Microservice
 * This is the API spec for capturing test results. These test result will be stored in the AWS DynamoDB database. Authorization details will be updated once we have confirmed the security scheme we are using.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { HttpClient, HttpEvent, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';

import { Observable } from 'rxjs';

import { CompleteTestResults } from '../model/completeTestResults';

import { Configuration } from '../configuration';
import { BASE_PATH } from '../variables';

@Injectable()
export class UpdateTestResultsService {
	protected basePath = 'https://url/api/v1';
	public defaultHeaders = new HttpHeaders();
	public configuration = new Configuration();

	constructor(
		protected httpClient: HttpClient,
		@Optional() @Inject(BASE_PATH) basePath: string,
		@Optional() configuration: Configuration
	) {
		if (basePath) {
			this.basePath = basePath;
		}
		if (configuration) {
			this.configuration = configuration;
			this.basePath = basePath || configuration.basePath || this.basePath;
		}
	}

	/**
	 * @param consumes string[] mime-types
	 * @return true: consumes contains 'multipart/form-data', false: otherwise
	 */
	private canConsumeForm(consumes: string[]): boolean {
		const form = 'multipart/form-data';
		for (const consume of consumes) {
			if (form === consume) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Update a test result using the systemNumber and testResultId as unique identifiers.
	 *
	 * @param body The test result to be updated
	 * @param systemNumber
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public testResultsSystemNumberPut(
		body: CompleteTestResults,
		systemNumber: string,
		observe?: 'body',
		reportProgress?: boolean
	): Observable<CompleteTestResults>;
	public testResultsSystemNumberPut(
		body: CompleteTestResults,
		systemNumber: string,
		observe?: 'response',
		reportProgress?: boolean
	): Observable<HttpResponse<CompleteTestResults>>;
	public testResultsSystemNumberPut(
		body: CompleteTestResults,
		systemNumber: string,
		observe?: 'events',
		reportProgress?: boolean
	): Observable<HttpEvent<CompleteTestResults>>;
	public testResultsSystemNumberPut(
		body: CompleteTestResults,
		systemNumber: string,
		observe: any = 'body',
		reportProgress = false
	): Observable<any> {
		if (body === null || body === undefined) {
			throw new Error('Required parameter body was null or undefined when calling testResultsSystemNumberPut.');
		}

		if (systemNumber === null || systemNumber === undefined) {
			throw new Error('Required parameter systemNumber was null or undefined when calling testResultsSystemNumberPut.');
		}

		let headers = this.defaultHeaders;

		// authentication (OAuth2) required
		if (this.configuration.accessToken) {
			const accessToken =
				typeof this.configuration.accessToken === 'function'
					? this.configuration.accessToken()
					: this.configuration.accessToken;
			headers = headers.set('Authorization', `Bearer ${accessToken}`);
		}

		// to determine the Accept header
		const httpHeaderAccepts: string[] = ['application/json'];
		const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		if (httpHeaderAcceptSelected != undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		// to determine the Content-Type header
		const consumes: string[] = ['application/json'];
		const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
		if (httpContentTypeSelected != undefined) {
			headers = headers.set('Content-Type', httpContentTypeSelected);
		}

		return this.httpClient.request<CompleteTestResults>(
			'put',
			`${this.basePath}/test-results/${encodeURIComponent(String(systemNumber))}`,
			{
				body: body,
				withCredentials: this.configuration.withCredentials,
				headers: headers,
				observe: observe,
				reportProgress: reportProgress,
			}
		);
	}
}
